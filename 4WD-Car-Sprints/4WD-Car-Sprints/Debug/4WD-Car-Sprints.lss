
4WD-Car-Sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000bee  00000c82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800088  00800088  00000caa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023aa  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd7  00000000  00000000  000032e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013f2  00000000  00000000  000040b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  000054ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000db9  00000000  00000000  00005a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001740  00000000  00000000  000067cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007f0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_1>
   8:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <main>
  8a:	0c 94 f5 05 	jmp	0xbea	; 0xbea <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_overflowRoutine>:
/********************** FUNCTIONS DEFINITIONS ***************************************/

void APP_overflowRoutine()
{
	static i8 i8_gs_overFlowCounter = 0;
	TIMER_preload(3035,TIMER_TM1); 
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	8b ed       	ldi	r24, 0xDB	; 219
  96:	9b e0       	ldi	r25, 0x0B	; 11
  98:	0e 94 61 05 	call	0xac2	; 0xac2 <TIMER_preload>
	if (en_g_carStatus == SYSTEM_ON)
  9c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <en_g_carStatus>
  a0:	81 11       	cpse	r24, r1
  a2:	2c c0       	rjmp	.+88     	; 0xfc <APP_overflowRoutine+0x6a>
	{
		i8_gs_overFlowCounter++;
  a4:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <i8_gs_overFlowCounter.1794>
  a8:	2f 5f       	subi	r18, 0xFF	; 255
  aa:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <i8_gs_overFlowCounter.1794>
		if(st_g_systemSequence[u8_g_sequenceNumber].period == i8_gs_overFlowCounter)
  ae:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <u8_g_sequenceNumber>
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fc 01       	movw	r30, r24
  b6:	ee 0f       	add	r30, r30
  b8:	ff 1f       	adc	r31, r31
  ba:	e8 0f       	add	r30, r24
  bc:	f9 1f       	adc	r31, r25
  be:	eb 58       	subi	r30, 0x8B	; 139
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	42 81       	ldd	r20, Z+2	; 0x02
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	02 2e       	mov	r0, r18
  c8:	00 0c       	add	r0, r0
  ca:	33 0b       	sbc	r19, r19
  cc:	42 17       	cp	r20, r18
  ce:	53 07       	cpc	r21, r19
  d0:	91 f4       	brne	.+36     	; 0xf6 <APP_overflowRoutine+0x64>
		{
			i8_gs_overFlowCounter=-1;
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <i8_gs_overFlowCounter.1794>
			u8_g_sequenceNumber = (u8_g_sequenceNumber + 1) % SEQUENCE_MAX_NUMBER;
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	83 70       	andi	r24, 0x03	; 3
  dc:	90 78       	andi	r25, 0x80	; 128
  de:	99 23       	and	r25, r25
  e0:	24 f4       	brge	.+8      	; 0xea <APP_overflowRoutine+0x58>
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	8c 6f       	ori	r24, 0xFC	; 252
  e6:	9f 6f       	ori	r25, 0xFF	; 255
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <u8_g_sequenceNumber>
			u8_g_halfSecondStop = 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <u8_g_halfSecondStop>
  f4:	08 95       	ret
		}
		else
		{
			u8_g_halfSecondStop = 0;
  f6:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <u8_g_halfSecondStop>
  fa:	08 95       	ret
		}
	}
	else if(en_g_carStatus == START_PRESSED)
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	29 f4       	brne	.+10     	; 0x10a <APP_overflowRoutine+0x78>
	{
		i8_gs_overFlowCounter=-1;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <i8_gs_overFlowCounter.1794>
		en_g_carStatus = SYSTEM_ON;
 106:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <en_g_carStatus>
 10a:	08 95       	ret

0000010c <APP_pwmRoutine>:
/*************************************************************************************/
/*timer0 ovf routine for generating pwm signals*/
void APP_pwmRoutine()
{
	static u8 u8_a_flag = 0;
	if(u8_a_flag == 0){
 10c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 110:	81 11       	cpse	r24, r1
 112:	14 c0       	rjmp	.+40     	; 0x13c <APP_pwmRoutine+0x30>
		DIO_setPinStatus(&st_g_pwmSignalPin, DIO_HIGH);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	84 e7       	ldi	r24, 0x74	; 116
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
		TIMER_preload(255 - u8_g_pwmDutyCycle,TIMER_TM0);
 11e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <u8_g_pwmDutyCycle>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	a9 01       	movw	r20, r18
 12a:	49 1b       	sub	r20, r25
 12c:	51 09       	sbc	r21, r1
 12e:	ca 01       	movw	r24, r20
 130:	0e 94 61 05 	call	0xac2	; 0xac2 <TIMER_preload>
		u8_a_flag = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 13a:	08 95       	ret
		} else if(u8_a_flag == 1){
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	69 f4       	brne	.+26     	; 0x15a <APP_pwmRoutine+0x4e>
		DIO_setPinStatus(&st_g_pwmSignalPin, DIO_LOW);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	84 e7       	ldi	r24, 0x74	; 116
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
		TIMER_preload(u8_g_pwmDutyCycle,TIMER_TM0);
 14a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <u8_g_pwmDutyCycle>
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 61 05 	call	0xac2	; 0xac2 <TIMER_preload>
		u8_a_flag = 0;
 156:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
 15a:	08 95       	ret

0000015c <APP_systemStart>:
	return  en_a_appErrorStatus ;
}
/******************************************************************************/
/*start button external interrupt Routine*/
void APP_systemStart()
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <APP_systemStart+0x6>
 162:	1f 92       	push	r1
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	st_leds led = {PORTC_INDEX,DIO_PIN0};
 168:	19 82       	std	Y+1, r1	; 0x01
 16a:	1a 82       	std	Y+2, r1	; 0x02
 16c:	1b 82       	std	Y+3, r1	; 0x03
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	89 83       	std	Y+1, r24	; 0x01
	LED_init(&led);
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_init>
	
	LED_on(&led);
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LED_on>
	if(en_g_carStatus == SYSTEM_OFF)
 182:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <en_g_carStatus>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	81 f4       	brne	.+32     	; 0x1aa <APP_systemStart+0x4e>
	{
		TIMER_preload(u16_g_timerLastValue, TIMER_TM1);
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <u16_g_timerLastValue>
 190:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <u16_g_timerLastValue+0x1>
 194:	0e 94 61 05 	call	0xac2	; 0xac2 <TIMER_preload>
		TIMER_start(TIMER_TM0);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 11 05 	call	0xa22	; 0xa22 <TIMER_start>
		TIMER_start(TIMER_TM1);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 11 05 	call	0xa22	; 0xa22 <TIMER_start>
		en_g_carStatus = START_PRESSED;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <en_g_carStatus>
	}
	else
	{
	}
		
}
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <APP_longestSide>:
/************************************************************************************/

/***********************************************************************************/
/*longest side of the rectangle*/
en_appErrorStatus APP_longestSide()
{
 1b6:	cf 93       	push	r28
	u8_g_pwmDutyCycle = 128;
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <u8_g_pwmDutyCycle>
	en_appErrorStatus en_a_appErrorStatus = APP_OK;
	
	en_a_appErrorStatus |= LED_off(st_g_currentLed);	
 1be:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <st_g_currentLed>
 1c2:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <st_g_currentLed+0x1>
 1c6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_off>
 1ca:	c8 2f       	mov	r28, r24
	st_g_currentLed    = &st_g_longSideLed;
 1cc:	81 e7       	ldi	r24, 0x71	; 113
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <st_g_currentLed+0x1>
 1d4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <st_g_currentLed>
	en_a_appErrorStatus |= LED_on(st_g_currentLed);
 1d8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LED_on>
 1dc:	c8 2b       	or	r28, r24
	
	en_a_appErrorStatus |= MOTOR_leftMotorForwardDirection();
 1de:	0e 94 42 02 	call	0x484	; 0x484 <MOTOR_leftMotorForwardDirection>
 1e2:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= MOTOR_rightMotorForwardDirection();
 1e4:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MOTOR_rightMotorForwardDirection>
	return en_a_appErrorStatus ;
}
 1e8:	8c 2b       	or	r24, r28
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <APP_shortestSide>:
/*************************************************************************************/
/*shortest side of the rectangle*/
en_appErrorStatus APP_shortestSide()
{
 1ee:	cf 93       	push	r28
	u8_g_pwmDutyCycle = 77;
 1f0:	8d e4       	ldi	r24, 0x4D	; 77
 1f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <u8_g_pwmDutyCycle>
	en_appErrorStatus en_a_appErrorStatus = APP_OK;
	
	en_a_appErrorStatus |= LED_off(st_g_currentLed);
 1f6:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <st_g_currentLed>
 1fa:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <st_g_currentLed+0x1>
 1fe:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_off>
 202:	c8 2f       	mov	r28, r24
	st_g_currentLed    = &st_g_shortSideLed;
 204:	8e e6       	ldi	r24, 0x6E	; 110
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <st_g_currentLed+0x1>
 20c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <st_g_currentLed>
	en_a_appErrorStatus |= LED_on(st_g_currentLed);
 210:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LED_on>
 214:	c8 2b       	or	r28, r24
	
	en_a_appErrorStatus |= MOTOR_leftMotorForwardDirection();
 216:	0e 94 42 02 	call	0x484	; 0x484 <MOTOR_leftMotorForwardDirection>
 21a:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= MOTOR_rightMotorForwardDirection();
 21c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MOTOR_rightMotorForwardDirection>
	return en_a_appErrorStatus ;
}
 220:	8c 2b       	or	r24, r28
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <APP_rotate>:
/*****************************************************************/
/*rotate the robot*/
en_appErrorStatus APP_rotate()
{
 226:	cf 93       	push	r28
	en_appErrorStatus en_a_appErrorStatus = APP_OK;
	
	en_a_appErrorStatus |= LED_off(st_g_currentLed);
 228:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <st_g_currentLed>
 22c:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <st_g_currentLed+0x1>
 230:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_off>
 234:	c8 2f       	mov	r28, r24
	st_g_currentLed    = &st_g_rotateLed;
 236:	88 e6       	ldi	r24, 0x68	; 104
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <st_g_currentLed+0x1>
 23e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <st_g_currentLed>
	en_a_appErrorStatus |= LED_on(st_g_currentLed);
 242:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LED_on>
 246:	c8 2b       	or	r28, r24
	
	en_a_appErrorStatus |= MOTOR_leftMotorBackwardDirection();
 248:	0e 94 51 02 	call	0x4a2	; 0x4a2 <MOTOR_leftMotorBackwardDirection>
 24c:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= MOTOR_rightMotorForwardDirection();
 24e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MOTOR_rightMotorForwardDirection>
	return en_a_appErrorStatus;
}
 252:	8c 2b       	or	r24, r28
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <APP_systemStop>:
	/*st_leds led = {PORTC_INDEX,DIO_PIN0};
	LED_init(&led);
	
	LED_on(&led);*/
	en_appErrorStatus en_a_appErrorStatus = APP_OK;
	TIMER_read(TIMER_TM1,&u16_g_timerLastValue);
 258:	6a e8       	ldi	r22, 0x8A	; 138
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <TIMER_read>
	TIMER_stop(TIMER_TM0);
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 28 05 	call	0xa50	; 0xa50 <TIMER_stop>
	TIMER_stop(TIMER_TM1);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 28 05 	call	0xa50	; 0xa50 <TIMER_stop>
	MOTOR_stopMotorDirection();
 26e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <MOTOR_stopMotorDirection>
	en_g_carStatus = SYSTEM_OFF;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <en_g_carStatus>
	
	en_a_appErrorStatus |= LED_off(st_g_currentLed);
 278:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <st_g_currentLed>
 27c:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <st_g_currentLed+0x1>
 280:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_off>
	st_g_currentLed    = &st_g_stopLed;
 284:	8b e6       	ldi	r24, 0x6B	; 107
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <st_g_currentLed+0x1>
 28c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <st_g_currentLed>
	en_a_appErrorStatus |= LED_on(st_g_currentLed);
 290:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LED_on>
 294:	08 95       	ret

00000296 <APP_init>:
/*************************************************************************************/


/*initialize application function*/
en_appErrorStatus APP_init()
{
 296:	cf 93       	push	r28
	en_appErrorStatus en_a_appErrorStatus = APP_OK;	
	en_a_appErrorStatus |= DIO_setPinDirection(&st_g_pwmSignalPin);
 298:	84 e7       	ldi	r24, 0x74	; 116
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_setPinDirection>
 2a0:	c8 2f       	mov	r28, r24
	//en_a_appErrorStatus |= BUTTON_init(&st_g_startButton);
	//en_a_appErrorStatus |= BUTTON_init(&st_g_stopButton);
	//en_a_appErrorStatus |= BUTTON_connectIPU(&st_g_startButton);
	//en_a_appErrorStatus |= BUTTON_connectIPU(&st_g_stopButton);
		
	DIO_DDRD = 0;
 2a2:	11 ba       	out	0x11, r1	; 17
	DIO_PORTD = 0xff;
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	82 bb       	out	0x12, r24	; 18
		
	en_a_appErrorStatus |= LED_init(&st_g_longSideLed);
 2a8:	81 e7       	ldi	r24, 0x71	; 113
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_init>
 2b0:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= LED_init(&st_g_shortSideLed);
 2b2:	8e e6       	ldi	r24, 0x6E	; 110
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_init>
 2ba:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= LED_init(&st_g_rotateLed);
 2bc:	88 e6       	ldi	r24, 0x68	; 104
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_init>
 2c4:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= LED_init(&st_g_stopLed);
 2c6:	8b e6       	ldi	r24, 0x6B	; 107
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_init>
 2ce:	c8 2b       	or	r28, r24


	en_a_appErrorStatus |= EXTI_interruptInit(&st_g_startInterrupt);
 2d0:	84 e6       	ldi	r24, 0x64	; 100
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 28 04 	call	0x850	; 0x850 <EXTI_interruptInit>
 2d8:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= EXTI_interruptInit(&st_g_stopInterrupt);
 2da:	80 e6       	ldi	r24, 0x60	; 96
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 28 04 	call	0x850	; 0x850 <EXTI_interruptInit>
 2e2:	c8 2b       	or	r28, r24
		
	en_a_appErrorStatus |= TIMER_init();
 2e4:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <TIMER_init>
 2e8:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= TIMER_setCallBack(TIMER0_OVF,APP_pwmRoutine);
 2ea:	66 e8       	ldi	r22, 0x86	; 134
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 73 05 	call	0xae6	; 0xae6 <TIMER_setCallBack>
 2f4:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= TIMER_setCallBack(TIMER1_OVF,APP_overflowRoutine);
 2f6:	69 e4       	ldi	r22, 0x49	; 73
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 73 05 	call	0xae6	; 0xae6 <TIMER_setCallBack>
 300:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= TIMER_preload(231,TIMER_TM0);
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	87 ee       	ldi	r24, 0xE7	; 231
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 61 05 	call	0xac2	; 0xac2 <TIMER_preload>
 30c:	c8 2b       	or	r28, r24
		
	en_a_appErrorStatus |= GIE_enableGeneralInterrupt();
 30e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <GIE_enableGeneralInterrupt>
 312:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= MOTOR_driverInitialize();
 314:	0e 94 2b 02 	call	0x456	; 0x456 <MOTOR_driverInitialize>
	
	
		
	return  en_a_appErrorStatus ;
}
 318:	8c 2b       	or	r24, r28
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <APP_temporaryStop>:
	return en_a_appErrorStatus;
}
/******************************************************************/
/*stop car for half second*/
en_appErrorStatus APP_temporaryStop()
{
 31e:	cf 93       	push	r28
	en_appErrorStatus en_a_appErrorStatus = APP_OK;
	
	en_a_appErrorStatus |= LED_off(st_g_currentLed);
 320:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <st_g_currentLed>
 324:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <st_g_currentLed+0x1>
 328:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LED_off>
 32c:	c8 2f       	mov	r28, r24
	st_g_currentLed    = &st_g_stopLed;
 32e:	8b e6       	ldi	r24, 0x6B	; 107
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <st_g_currentLed+0x1>
 336:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <st_g_currentLed>
	en_a_appErrorStatus |= LED_on(st_g_currentLed);
 33a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LED_on>
 33e:	c8 2b       	or	r28, r24
	
	en_a_appErrorStatus |= MOTOR_stopMotorDirection();
 340:	0e 94 69 02 	call	0x4d2	; 0x4d2 <MOTOR_stopMotorDirection>
	return en_a_appErrorStatus;	
}
 344:	8c 2b       	or	r24, r28
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <LED_init>:
#include "../../LIB/STD_TYPES.h"
#include "../../MCAL/dio/dio.h"
#include "led.h"

en_ledError LED_init(st_leds *st_a_led)
{
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	1f 92       	push	r1
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 358:	fc 01       	movw	r30, r24
 35a:	20 81       	ld	r18, Z
 35c:	24 30       	cpi	r18, 0x04	; 4
 35e:	b8 f4       	brcc	.+46     	; 0x38e <LED_init+0x44>
 360:	21 81       	ldd	r18, Z+1	; 0x01
 362:	28 30       	cpi	r18, 0x08	; 8
 364:	b0 f4       	brcc	.+44     	; 0x392 <LED_init+0x48>
 366:	8c 01       	movw	r16, r24
		st_pinConfig st_a_ledPin = {st_a_led->port, st_a_led->pin, DIO_DIRECTION_OUTPUT, DIO_LOW};
 368:	80 81       	ld	r24, Z
 36a:	83 70       	andi	r24, 0x03	; 3
 36c:	27 70       	andi	r18, 0x07	; 7
 36e:	22 0f       	add	r18, r18
 370:	22 0f       	add	r18, r18
 372:	28 2b       	or	r18, r24
 374:	20 62       	ori	r18, 0x20	; 32
 376:	29 83       	std	Y+1, r18	; 0x01
		if (DIO_pinInitialize(&st_a_ledPin) == DIO_OK )
 378:	ce 01       	movw	r24, r28
 37a:	01 96       	adiw	r24, 0x01	; 1
 37c:	0e 94 0e 04 	call	0x81c	; 0x81c <DIO_pinInitialize>
 380:	81 11       	cpse	r24, r1
 382:	03 c0       	rjmp	.+6      	; 0x38a <LED_init+0x40>
		{
			st_a_led->state = 0;
 384:	f8 01       	movw	r30, r16
 386:	12 82       	std	Z+2, r1	; 0x02
 388:	05 c0       	rjmp	.+10     	; 0x394 <LED_init+0x4a>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
 38a:	82 e0       	ldi	r24, 0x02	; 2
#include "led.h"

en_ledError LED_init(st_leds *st_a_led)
{
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 38c:	03 c0       	rjmp	.+6      	; 0x394 <LED_init+0x4a>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
		}
		} else {
		en_a_retFunction = LED_WRONG_INPUT;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	01 c0       	rjmp	.+2      	; 0x394 <LED_init+0x4a>
 392:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 394:	0f 90       	pop	r0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	08 95       	ret

000003a0 <LED_on>:
en_ledError LED_on(st_leds *st_a_led)
{
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	1f 92       	push	r1
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	fc 01       	movw	r30, r24
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 3b0:	80 81       	ld	r24, Z
 3b2:	84 30       	cpi	r24, 0x04	; 4
 3b4:	d0 f4       	brcc	.+52     	; 0x3ea <LED_on+0x4a>
 3b6:	91 81       	ldd	r25, Z+1	; 0x01
 3b8:	98 30       	cpi	r25, 0x08	; 8
 3ba:	c8 f4       	brcc	.+50     	; 0x3ee <LED_on+0x4e>
 3bc:	8f 01       	movw	r16, r30
		st_pinConfig st_a_ledPin = {st_a_led->port, st_a_led->pin, DIO_DIRECTION_OUTPUT, DIO_HIGH};
 3be:	83 70       	andi	r24, 0x03	; 3
 3c0:	97 70       	andi	r25, 0x07	; 7
 3c2:	99 0f       	add	r25, r25
 3c4:	99 0f       	add	r25, r25
 3c6:	98 2b       	or	r25, r24
 3c8:	90 62       	ori	r25, 0x20	; 32
 3ca:	90 64       	ori	r25, 0x40	; 64
 3cc:	99 83       	std	Y+1, r25	; 0x01
		if (DIO_setPinStatus(&st_a_ledPin, DIO_HIGH) == DIO_OK)
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	ce 01       	movw	r24, r28
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 3d8:	81 11       	cpse	r24, r1
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <LED_on+0x46>
		{
			st_a_led->state = 2;
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	f8 01       	movw	r30, r16
 3e0:	82 83       	std	Z+2, r24	; 0x02
			en_a_retFunction = LED_OK;
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <LED_on+0x50>
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
 3e6:	82 e0       	ldi	r24, 0x02	; 2
	return en_a_retFunction;
}
en_ledError LED_on(st_leds *st_a_led)
{
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <LED_on+0x50>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
		}
		} else {
		en_a_retFunction = LED_WRONG_INPUT;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <LED_on+0x50>
 3ee:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 3f0:	0f 90       	pop	r0
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <LED_off>:
en_ledError LED_off(st_leds *st_a_led)
{
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	1f 92       	push	r1
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	fc 01       	movw	r30, r24
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 40c:	80 81       	ld	r24, Z
 40e:	84 30       	cpi	r24, 0x04	; 4
 410:	c8 f4       	brcc	.+50     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 412:	91 81       	ldd	r25, Z+1	; 0x01
 414:	98 30       	cpi	r25, 0x08	; 8
 416:	c0 f4       	brcc	.+48     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 418:	8f 01       	movw	r16, r30
		st_pinConfig st_a_ledPin = {st_a_led->port, st_a_led->pin, DIO_DIRECTION_OUTPUT, DIO_LOW};
 41a:	83 70       	andi	r24, 0x03	; 3
 41c:	97 70       	andi	r25, 0x07	; 7
 41e:	99 0f       	add	r25, r25
 420:	99 0f       	add	r25, r25
 422:	98 2b       	or	r25, r24
 424:	90 62       	ori	r25, 0x20	; 32
 426:	99 83       	std	Y+1, r25	; 0x01
		if (DIO_setPinStatus(&st_a_ledPin, DIO_LOW) == DIO_OK)
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	ce 01       	movw	r24, r28
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 432:	81 11       	cpse	r24, r1
 434:	05 c0       	rjmp	.+10     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		{
			st_a_led->state = 1;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	f8 01       	movw	r30, r16
 43a:	82 83       	std	Z+2, r24	; 0x02
			en_a_retFunction = LED_OK;
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	05 c0       	rjmp	.+10     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
 440:	82 e0       	ldi	r24, 0x02	; 2
	return en_a_retFunction;
}
en_ledError LED_off(st_leds *st_a_led)
{
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 442:	03 c0       	rjmp	.+6      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
		}
		} else {
		en_a_retFunction = LED_WRONG_INPUT;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	01 c0       	rjmp	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 448:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 44a:	0f 90       	pop	r0
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <MOTOR_driverInitialize>:
 456:	cf 93       	push	r28
 458:	85 e8       	ldi	r24, 0x85	; 133
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 0e 04 	call	0x81c	; 0x81c <DIO_pinInitialize>
 460:	c8 2f       	mov	r28, r24
 462:	86 e8       	ldi	r24, 0x86	; 134
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 0e 04 	call	0x81c	; 0x81c <DIO_pinInitialize>
 46a:	c8 2b       	or	r28, r24
 46c:	83 e8       	ldi	r24, 0x83	; 131
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 0e 04 	call	0x81c	; 0x81c <DIO_pinInitialize>
 474:	c8 2b       	or	r28, r24
 476:	84 e8       	ldi	r24, 0x84	; 132
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 0e 04 	call	0x81c	; 0x81c <DIO_pinInitialize>
 47e:	8c 2b       	or	r24, r28
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <MOTOR_leftMotorForwardDirection>:
 484:	cf 93       	push	r28
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	85 e8       	ldi	r24, 0x85	; 133
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 490:	c8 2f       	mov	r28, r24
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	86 e8       	ldi	r24, 0x86	; 134
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 49c:	8c 2b       	or	r24, r28
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <MOTOR_leftMotorBackwardDirection>:
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	85 e8       	ldi	r24, 0x85	; 133
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	86 e8       	ldi	r24, 0x86	; 134
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	08 95       	ret

000004ba <MOTOR_rightMotorForwardDirection>:
 4ba:	61 e0       	ldi	r22, 0x01	; 1
 4bc:	83 e8       	ldi	r24, 0x83	; 131
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	84 e8       	ldi	r24, 0x84	; 132
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret

000004d2 <MOTOR_stopMotorDirection>:
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	85 e8       	ldi	r24, 0x85	; 133
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	86 e8       	ldi	r24, 0x86	; 134
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	83 e8       	ldi	r24, 0x83	; 131
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	84 e8       	ldi	r24, 0x84	; 132
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	08 95       	ret

000004fe <DIO_setPinDirection>:
 4fe:	00 97       	sbiw	r24, 0x00	; 0
 500:	09 f4       	brne	.+2      	; 0x504 <DIO_setPinDirection+0x6>
 502:	a0 c0       	rjmp	.+320    	; 0x644 <DIO_setPinDirection+0x146>
 504:	fc 01       	movw	r30, r24
 506:	20 81       	ld	r18, Z
 508:	22 23       	and	r18, r18
 50a:	0c f4       	brge	.+2      	; 0x50e <DIO_setPinDirection+0x10>
 50c:	9d c0       	rjmp	.+314    	; 0x648 <DIO_setPinDirection+0x14a>
 50e:	32 2f       	mov	r19, r18
 510:	33 70       	andi	r19, 0x03	; 3
 512:	32 30       	cpi	r19, 0x02	; 2
 514:	09 f4       	brne	.+2      	; 0x518 <DIO_setPinDirection+0x1a>
 516:	4c c0       	rjmp	.+152    	; 0x5b0 <DIO_setPinDirection+0xb2>
 518:	08 f0       	brcs	.+2      	; 0x51c <DIO_setPinDirection+0x1e>
 51a:	6f c0       	rjmp	.+222    	; 0x5fa <DIO_setPinDirection+0xfc>
 51c:	31 30       	cpi	r19, 0x01	; 1
 51e:	19 f1       	breq	.+70     	; 0x566 <DIO_setPinDirection+0x68>
 520:	25 fd       	sbrc	r18, 5
 522:	10 c0       	rjmp	.+32     	; 0x544 <DIO_setPinDirection+0x46>
 524:	3a b3       	in	r19, 0x1a	; 26
 526:	26 95       	lsr	r18
 528:	26 95       	lsr	r18
 52a:	27 70       	andi	r18, 0x07	; 7
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_setPinDirection+0x38>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	2a 95       	dec	r18
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_setPinDirection+0x34>
 53a:	80 95       	com	r24
 53c:	83 23       	and	r24, r19
 53e:	8a bb       	out	0x1a, r24	; 26
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	08 95       	ret
 544:	3a b3       	in	r19, 0x1a	; 26
 546:	fc 01       	movw	r30, r24
 548:	20 81       	ld	r18, Z
 54a:	26 95       	lsr	r18
 54c:	26 95       	lsr	r18
 54e:	27 70       	andi	r18, 0x07	; 7
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_setPinDirection+0x5c>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	2a 95       	dec	r18
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_setPinDirection+0x58>
 55e:	83 2b       	or	r24, r19
 560:	8a bb       	out	0x1a, r24	; 26
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	08 95       	ret
 566:	25 fd       	sbrc	r18, 5
 568:	12 c0       	rjmp	.+36     	; 0x58e <DIO_setPinDirection+0x90>
 56a:	37 b3       	in	r19, 0x17	; 23
 56c:	fc 01       	movw	r30, r24
 56e:	20 81       	ld	r18, Z
 570:	26 95       	lsr	r18
 572:	26 95       	lsr	r18
 574:	27 70       	andi	r18, 0x07	; 7
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_setPinDirection+0x82>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	2a 95       	dec	r18
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_setPinDirection+0x7e>
 584:	80 95       	com	r24
 586:	83 23       	and	r24, r19
 588:	87 bb       	out	0x17, r24	; 23
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	08 95       	ret
 58e:	37 b3       	in	r19, 0x17	; 23
 590:	fc 01       	movw	r30, r24
 592:	20 81       	ld	r18, Z
 594:	26 95       	lsr	r18
 596:	26 95       	lsr	r18
 598:	27 70       	andi	r18, 0x07	; 7
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_setPinDirection+0xa6>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	2a 95       	dec	r18
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_setPinDirection+0xa2>
 5a8:	83 2b       	or	r24, r19
 5aa:	87 bb       	out	0x17, r24	; 23
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	08 95       	ret
 5b0:	25 fd       	sbrc	r18, 5
 5b2:	12 c0       	rjmp	.+36     	; 0x5d8 <DIO_setPinDirection+0xda>
 5b4:	34 b3       	in	r19, 0x14	; 20
 5b6:	fc 01       	movw	r30, r24
 5b8:	20 81       	ld	r18, Z
 5ba:	26 95       	lsr	r18
 5bc:	26 95       	lsr	r18
 5be:	27 70       	andi	r18, 0x07	; 7
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_setPinDirection+0xcc>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	2a 95       	dec	r18
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_setPinDirection+0xc8>
 5ce:	80 95       	com	r24
 5d0:	83 23       	and	r24, r19
 5d2:	84 bb       	out	0x14, r24	; 20
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	08 95       	ret
 5d8:	34 b3       	in	r19, 0x14	; 20
 5da:	fc 01       	movw	r30, r24
 5dc:	20 81       	ld	r18, Z
 5de:	26 95       	lsr	r18
 5e0:	26 95       	lsr	r18
 5e2:	27 70       	andi	r18, 0x07	; 7
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_setPinDirection+0xf0>
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	2a 95       	dec	r18
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_setPinDirection+0xec>
 5f2:	83 2b       	or	r24, r19
 5f4:	84 bb       	out	0x14, r24	; 20
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	08 95       	ret
 5fa:	25 fd       	sbrc	r18, 5
 5fc:	12 c0       	rjmp	.+36     	; 0x622 <DIO_setPinDirection+0x124>
 5fe:	31 b3       	in	r19, 0x11	; 17
 600:	fc 01       	movw	r30, r24
 602:	20 81       	ld	r18, Z
 604:	26 95       	lsr	r18
 606:	26 95       	lsr	r18
 608:	27 70       	andi	r18, 0x07	; 7
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_setPinDirection+0x116>
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	2a 95       	dec	r18
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_setPinDirection+0x112>
 618:	80 95       	com	r24
 61a:	83 23       	and	r24, r19
 61c:	81 bb       	out	0x11, r24	; 17
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	08 95       	ret
 622:	31 b3       	in	r19, 0x11	; 17
 624:	fc 01       	movw	r30, r24
 626:	20 81       	ld	r18, Z
 628:	26 95       	lsr	r18
 62a:	26 95       	lsr	r18
 62c:	27 70       	andi	r18, 0x07	; 7
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_setPinDirection+0x13a>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	2a 95       	dec	r18
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_setPinDirection+0x136>
 63c:	83 2b       	or	r24, r19
 63e:	81 bb       	out	0x11, r24	; 17
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	08 95       	ret
 644:	82 e0       	ldi	r24, 0x02	; 2
 646:	08 95       	ret
 648:	82 e0       	ldi	r24, 0x02	; 2
 64a:	08 95       	ret

0000064c <DIO_setPinStatus>:
 64c:	00 97       	sbiw	r24, 0x00	; 0
 64e:	09 f4       	brne	.+2      	; 0x652 <DIO_setPinStatus+0x6>
 650:	d9 c0       	rjmp	.+434    	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 652:	dc 01       	movw	r26, r24
 654:	2c 91       	ld	r18, X
 656:	22 23       	and	r18, r18
 658:	0c f4       	brge	.+2      	; 0x65c <DIO_setPinStatus+0x10>
 65a:	d6 c0       	rjmp	.+428    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 65c:	61 70       	andi	r22, 0x01	; 1
 65e:	23 70       	andi	r18, 0x03	; 3
 660:	22 30       	cpi	r18, 0x02	; 2
 662:	09 f4       	brne	.+2      	; 0x666 <DIO_setPinStatus+0x1a>
 664:	69 c0       	rjmp	.+210    	; 0x738 <DIO_setPinStatus+0xec>
 666:	08 f0       	brcs	.+2      	; 0x66a <DIO_setPinStatus+0x1e>
 668:	9a c0       	rjmp	.+308    	; 0x79e <DIO_setPinStatus+0x152>
 66a:	21 30       	cpi	r18, 0x01	; 1
 66c:	91 f1       	breq	.+100    	; 0x6d2 <DIO_setPinStatus+0x86>
 66e:	4a b3       	in	r20, 0x1a	; 26
 670:	2c 91       	ld	r18, X
 672:	26 95       	lsr	r18
 674:	26 95       	lsr	r18
 676:	27 70       	andi	r18, 0x07	; 7
 678:	e2 2f       	mov	r30, r18
 67a:	50 e0       	ldi	r21, 0x00	; 0
 67c:	da 01       	movw	r26, r20
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_setPinStatus+0x38>
 680:	b5 95       	asr	r27
 682:	a7 95       	ror	r26
 684:	2a 95       	dec	r18
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_setPinStatus+0x34>
 688:	a0 ff       	sbrs	r26, 0
 68a:	c0 c0       	rjmp	.+384    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 68c:	61 11       	cpse	r22, r1
 68e:	11 c0       	rjmp	.+34     	; 0x6b2 <DIO_setPinStatus+0x66>
 690:	4b b3       	in	r20, 0x1b	; 27
 692:	21 e0       	ldi	r18, 0x01	; 1
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_setPinStatus+0x50>
 698:	22 0f       	add	r18, r18
 69a:	33 1f       	adc	r19, r19
 69c:	ea 95       	dec	r30
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_setPinStatus+0x4c>
 6a0:	20 95       	com	r18
 6a2:	24 23       	and	r18, r20
 6a4:	2b bb       	out	0x1b, r18	; 27
 6a6:	fc 01       	movw	r30, r24
 6a8:	20 81       	ld	r18, Z
 6aa:	2f 7b       	andi	r18, 0xBF	; 191
 6ac:	20 83       	st	Z, r18
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	08 95       	ret
 6b2:	4b b3       	in	r20, 0x1b	; 27
 6b4:	21 e0       	ldi	r18, 0x01	; 1
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_setPinStatus+0x72>
 6ba:	22 0f       	add	r18, r18
 6bc:	33 1f       	adc	r19, r19
 6be:	ea 95       	dec	r30
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_setPinStatus+0x6e>
 6c2:	24 2b       	or	r18, r20
 6c4:	2b bb       	out	0x1b, r18	; 27
 6c6:	dc 01       	movw	r26, r24
 6c8:	2c 91       	ld	r18, X
 6ca:	20 64       	ori	r18, 0x40	; 64
 6cc:	2c 93       	st	X, r18
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	08 95       	ret
 6d2:	47 b3       	in	r20, 0x17	; 23
 6d4:	fc 01       	movw	r30, r24
 6d6:	20 81       	ld	r18, Z
 6d8:	26 95       	lsr	r18
 6da:	26 95       	lsr	r18
 6dc:	27 70       	andi	r18, 0x07	; 7
 6de:	e2 2f       	mov	r30, r18
 6e0:	50 e0       	ldi	r21, 0x00	; 0
 6e2:	da 01       	movw	r26, r20
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <DIO_setPinStatus+0x9e>
 6e6:	b5 95       	asr	r27
 6e8:	a7 95       	ror	r26
 6ea:	2a 95       	dec	r18
 6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <DIO_setPinStatus+0x9a>
 6ee:	a0 ff       	sbrs	r26, 0
 6f0:	8f c0       	rjmp	.+286    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 6f2:	61 11       	cpse	r22, r1
 6f4:	11 c0       	rjmp	.+34     	; 0x718 <DIO_setPinStatus+0xcc>
 6f6:	48 b3       	in	r20, 0x18	; 24
 6f8:	21 e0       	ldi	r18, 0x01	; 1
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_setPinStatus+0xb6>
 6fe:	22 0f       	add	r18, r18
 700:	33 1f       	adc	r19, r19
 702:	ea 95       	dec	r30
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_setPinStatus+0xb2>
 706:	20 95       	com	r18
 708:	24 23       	and	r18, r20
 70a:	28 bb       	out	0x18, r18	; 24
 70c:	fc 01       	movw	r30, r24
 70e:	20 81       	ld	r18, Z
 710:	2f 7b       	andi	r18, 0xBF	; 191
 712:	20 83       	st	Z, r18
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	08 95       	ret
 718:	48 b3       	in	r20, 0x18	; 24
 71a:	21 e0       	ldi	r18, 0x01	; 1
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_setPinStatus+0xd8>
 720:	22 0f       	add	r18, r18
 722:	33 1f       	adc	r19, r19
 724:	ea 95       	dec	r30
 726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_setPinStatus+0xd4>
 728:	24 2b       	or	r18, r20
 72a:	28 bb       	out	0x18, r18	; 24
 72c:	dc 01       	movw	r26, r24
 72e:	2c 91       	ld	r18, X
 730:	20 64       	ori	r18, 0x40	; 64
 732:	2c 93       	st	X, r18
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	08 95       	ret
 738:	44 b3       	in	r20, 0x14	; 20
 73a:	fc 01       	movw	r30, r24
 73c:	20 81       	ld	r18, Z
 73e:	26 95       	lsr	r18
 740:	26 95       	lsr	r18
 742:	27 70       	andi	r18, 0x07	; 7
 744:	e2 2f       	mov	r30, r18
 746:	50 e0       	ldi	r21, 0x00	; 0
 748:	da 01       	movw	r26, r20
 74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_setPinStatus+0x104>
 74c:	b5 95       	asr	r27
 74e:	a7 95       	ror	r26
 750:	2a 95       	dec	r18
 752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_setPinStatus+0x100>
 754:	a0 ff       	sbrs	r26, 0
 756:	5e c0       	rjmp	.+188    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 758:	61 11       	cpse	r22, r1
 75a:	11 c0       	rjmp	.+34     	; 0x77e <DIO_setPinStatus+0x132>
 75c:	45 b3       	in	r20, 0x15	; 21
 75e:	21 e0       	ldi	r18, 0x01	; 1
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_setPinStatus+0x11c>
 764:	22 0f       	add	r18, r18
 766:	33 1f       	adc	r19, r19
 768:	ea 95       	dec	r30
 76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_setPinStatus+0x118>
 76c:	20 95       	com	r18
 76e:	24 23       	and	r18, r20
 770:	25 bb       	out	0x15, r18	; 21
 772:	fc 01       	movw	r30, r24
 774:	20 81       	ld	r18, Z
 776:	2f 7b       	andi	r18, 0xBF	; 191
 778:	20 83       	st	Z, r18
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	08 95       	ret
 77e:	45 b3       	in	r20, 0x15	; 21
 780:	21 e0       	ldi	r18, 0x01	; 1
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <DIO_setPinStatus+0x13e>
 786:	22 0f       	add	r18, r18
 788:	33 1f       	adc	r19, r19
 78a:	ea 95       	dec	r30
 78c:	e2 f7       	brpl	.-8      	; 0x786 <DIO_setPinStatus+0x13a>
 78e:	24 2b       	or	r18, r20
 790:	25 bb       	out	0x15, r18	; 21
 792:	dc 01       	movw	r26, r24
 794:	2c 91       	ld	r18, X
 796:	20 64       	ori	r18, 0x40	; 64
 798:	2c 93       	st	X, r18
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	08 95       	ret
 79e:	41 b3       	in	r20, 0x11	; 17
 7a0:	fc 01       	movw	r30, r24
 7a2:	20 81       	ld	r18, Z
 7a4:	26 95       	lsr	r18
 7a6:	26 95       	lsr	r18
 7a8:	27 70       	andi	r18, 0x07	; 7
 7aa:	e2 2f       	mov	r30, r18
 7ac:	50 e0       	ldi	r21, 0x00	; 0
 7ae:	da 01       	movw	r26, r20
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_setPinStatus+0x16a>
 7b2:	b5 95       	asr	r27
 7b4:	a7 95       	ror	r26
 7b6:	2a 95       	dec	r18
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_setPinStatus+0x166>
 7ba:	a0 ff       	sbrs	r26, 0
 7bc:	2d c0       	rjmp	.+90     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7be:	61 11       	cpse	r22, r1
 7c0:	11 c0       	rjmp	.+34     	; 0x7e4 <DIO_setPinStatus+0x198>
 7c2:	42 b3       	in	r20, 0x12	; 18
 7c4:	21 e0       	ldi	r18, 0x01	; 1
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	02 c0       	rjmp	.+4      	; 0x7ce <DIO_setPinStatus+0x182>
 7ca:	22 0f       	add	r18, r18
 7cc:	33 1f       	adc	r19, r19
 7ce:	ea 95       	dec	r30
 7d0:	e2 f7       	brpl	.-8      	; 0x7ca <DIO_setPinStatus+0x17e>
 7d2:	20 95       	com	r18
 7d4:	24 23       	and	r18, r20
 7d6:	22 bb       	out	0x12, r18	; 18
 7d8:	fc 01       	movw	r30, r24
 7da:	20 81       	ld	r18, Z
 7dc:	2f 7b       	andi	r18, 0xBF	; 191
 7de:	20 83       	st	Z, r18
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	08 95       	ret
 7e4:	42 b3       	in	r20, 0x12	; 18
 7e6:	21 e0       	ldi	r18, 0x01	; 1
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_setPinStatus+0x1a4>
 7ec:	22 0f       	add	r18, r18
 7ee:	33 1f       	adc	r19, r19
 7f0:	ea 95       	dec	r30
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_setPinStatus+0x1a0>
 7f4:	24 2b       	or	r18, r20
 7f6:	22 bb       	out	0x12, r18	; 18
 7f8:	dc 01       	movw	r26, r24
 7fa:	2c 91       	ld	r18, X
 7fc:	20 64       	ori	r18, 0x40	; 64
 7fe:	2c 93       	st	X, r18
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	08 95       	ret
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	08 95       	ret
 808:	82 e0       	ldi	r24, 0x02	; 2
 80a:	08 95       	ret
 80c:	81 e0       	ldi	r24, 0x01	; 1
 80e:	08 95       	ret
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	08 95       	ret
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	08 95       	ret
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	08 95       	ret

0000081c <DIO_pinInitialize>:
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	00 97       	sbiw	r24, 0x00	; 0
 822:	81 f0       	breq	.+32     	; 0x844 <DIO_pinInitialize+0x28>
 824:	fc 01       	movw	r30, r24
 826:	20 81       	ld	r18, Z
 828:	22 23       	and	r18, r18
 82a:	74 f0       	brlt	.+28     	; 0x848 <DIO_pinInitialize+0x2c>
 82c:	ec 01       	movw	r28, r24
 82e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_setPinDirection>
 832:	68 81       	ld	r22, Y
 834:	66 fb       	bst	r22, 6
 836:	66 27       	eor	r22, r22
 838:	60 f9       	bld	r22, 0
 83a:	ce 01       	movw	r24, r28
 83c:	0e 94 26 03 	call	0x64c	; 0x64c <DIO_setPinStatus>
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	03 c0       	rjmp	.+6      	; 0x84a <DIO_pinInitialize+0x2e>
 844:	82 e0       	ldi	r24, 0x02	; 2
 846:	01 c0       	rjmp	.+2      	; 0x84a <DIO_pinInitialize+0x2e>
 848:	82 e0       	ldi	r24, 0x02	; 2
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	08 95       	ret

00000850 <EXTI_interruptInit>:
		{
			u8_a_retFunction = EXTI_WRONG_DATA;
		}
	}
	return u8_a_retFunction;
}
 850:	cf 93       	push	r28
 852:	00 97       	sbiw	r24, 0x00	; 0
 854:	09 f4       	brne	.+2      	; 0x858 <EXTI_interruptInit+0x8>
 856:	72 c0       	rjmp	.+228    	; 0x93c <__stack+0xdd>
 858:	fc 01       	movw	r30, r24
 85a:	83 81       	ldd	r24, Z+3	; 0x03
 85c:	81 11       	cpse	r24, r1
 85e:	36 c0       	rjmp	.+108    	; 0x8cc <__stack+0x6d>
 860:	82 81       	ldd	r24, Z+2	; 0x02
 862:	81 11       	cpse	r24, r1
 864:	08 c0       	rjmp	.+16     	; 0x876 <__stack+0x17>
 866:	85 b7       	in	r24, 0x35	; 53
 868:	8e 7f       	andi	r24, 0xFE	; 254
 86a:	85 bf       	out	0x35, r24	; 53
 86c:	85 b7       	in	r24, 0x35	; 53
 86e:	8d 7f       	andi	r24, 0xFD	; 253
 870:	85 bf       	out	0x35, r24	; 53
 872:	c0 e0       	ldi	r28, 0x00	; 0
 874:	1f c0       	rjmp	.+62     	; 0x8b4 <__stack+0x55>
 876:	81 30       	cpi	r24, 0x01	; 1
 878:	41 f4       	brne	.+16     	; 0x88a <__stack+0x2b>
 87a:	85 b7       	in	r24, 0x35	; 53
 87c:	81 60       	ori	r24, 0x01	; 1
 87e:	85 bf       	out	0x35, r24	; 53
 880:	85 b7       	in	r24, 0x35	; 53
 882:	8d 7f       	andi	r24, 0xFD	; 253
 884:	85 bf       	out	0x35, r24	; 53
 886:	c0 e0       	ldi	r28, 0x00	; 0
 888:	15 c0       	rjmp	.+42     	; 0x8b4 <__stack+0x55>
 88a:	83 30       	cpi	r24, 0x03	; 3
 88c:	41 f4       	brne	.+16     	; 0x89e <__stack+0x3f>
 88e:	85 b7       	in	r24, 0x35	; 53
 890:	81 60       	ori	r24, 0x01	; 1
 892:	85 bf       	out	0x35, r24	; 53
 894:	85 b7       	in	r24, 0x35	; 53
 896:	82 60       	ori	r24, 0x02	; 2
 898:	85 bf       	out	0x35, r24	; 53
 89a:	c0 e0       	ldi	r28, 0x00	; 0
 89c:	0b c0       	rjmp	.+22     	; 0x8b4 <__stack+0x55>
 89e:	82 30       	cpi	r24, 0x02	; 2
 8a0:	41 f4       	brne	.+16     	; 0x8b2 <__stack+0x53>
 8a2:	85 b7       	in	r24, 0x35	; 53
 8a4:	8e 7f       	andi	r24, 0xFE	; 254
 8a6:	85 bf       	out	0x35, r24	; 53
 8a8:	85 b7       	in	r24, 0x35	; 53
 8aa:	82 60       	ori	r24, 0x02	; 2
 8ac:	85 bf       	out	0x35, r24	; 53
 8ae:	c0 e0       	ldi	r28, 0x00	; 0
 8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <__stack+0x55>
 8b2:	c2 e0       	ldi	r28, 0x02	; 2
 8b4:	80 81       	ld	r24, Z
 8b6:	91 81       	ldd	r25, Z+1	; 0x01
 8b8:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <v_gs_ptrfuncInt0+0x1>
 8bc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <v_gs_ptrfuncInt0>
 8c0:	8b b7       	in	r24, 0x3b	; 59
 8c2:	80 64       	ori	r24, 0x40	; 64
 8c4:	8b bf       	out	0x3b, r24	; 59
 8c6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <GIE_enableGeneralInterrupt>
 8ca:	3b c0       	rjmp	.+118    	; 0x942 <__stack+0xe3>
 8cc:	81 30       	cpi	r24, 0x01	; 1
 8ce:	c1 f5       	brne	.+112    	; 0x940 <__stack+0xe1>
 8d0:	82 81       	ldd	r24, Z+2	; 0x02
 8d2:	81 11       	cpse	r24, r1
 8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <__stack+0x87>
 8d6:	85 b7       	in	r24, 0x35	; 53
 8d8:	8b 7f       	andi	r24, 0xFB	; 251
 8da:	85 bf       	out	0x35, r24	; 53
 8dc:	85 b7       	in	r24, 0x35	; 53
 8de:	87 7f       	andi	r24, 0xF7	; 247
 8e0:	85 bf       	out	0x35, r24	; 53
 8e2:	c0 e0       	ldi	r28, 0x00	; 0
 8e4:	1f c0       	rjmp	.+62     	; 0x924 <__stack+0xc5>
 8e6:	81 30       	cpi	r24, 0x01	; 1
 8e8:	41 f4       	brne	.+16     	; 0x8fa <__stack+0x9b>
 8ea:	85 b7       	in	r24, 0x35	; 53
 8ec:	84 60       	ori	r24, 0x04	; 4
 8ee:	85 bf       	out	0x35, r24	; 53
 8f0:	85 b7       	in	r24, 0x35	; 53
 8f2:	87 7f       	andi	r24, 0xF7	; 247
 8f4:	85 bf       	out	0x35, r24	; 53
 8f6:	c0 e0       	ldi	r28, 0x00	; 0
 8f8:	15 c0       	rjmp	.+42     	; 0x924 <__stack+0xc5>
 8fa:	83 30       	cpi	r24, 0x03	; 3
 8fc:	41 f4       	brne	.+16     	; 0x90e <__stack+0xaf>
 8fe:	85 b7       	in	r24, 0x35	; 53
 900:	84 60       	ori	r24, 0x04	; 4
 902:	85 bf       	out	0x35, r24	; 53
 904:	85 b7       	in	r24, 0x35	; 53
 906:	88 60       	ori	r24, 0x08	; 8
 908:	85 bf       	out	0x35, r24	; 53
 90a:	c0 e0       	ldi	r28, 0x00	; 0
 90c:	0b c0       	rjmp	.+22     	; 0x924 <__stack+0xc5>
 90e:	82 30       	cpi	r24, 0x02	; 2
 910:	41 f4       	brne	.+16     	; 0x922 <__stack+0xc3>
 912:	85 b7       	in	r24, 0x35	; 53
 914:	8b 7f       	andi	r24, 0xFB	; 251
 916:	85 bf       	out	0x35, r24	; 53
 918:	85 b7       	in	r24, 0x35	; 53
 91a:	88 60       	ori	r24, 0x08	; 8
 91c:	85 bf       	out	0x35, r24	; 53
 91e:	c0 e0       	ldi	r28, 0x00	; 0
 920:	01 c0       	rjmp	.+2      	; 0x924 <__stack+0xc5>
 922:	c2 e0       	ldi	r28, 0x02	; 2
 924:	80 81       	ld	r24, Z
 926:	91 81       	ldd	r25, Z+1	; 0x01
 928:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <v_gs_ptrfuncInt1+0x1>
 92c:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <v_gs_ptrfuncInt1>
 930:	8b b7       	in	r24, 0x3b	; 59
 932:	80 68       	ori	r24, 0x80	; 128
 934:	8b bf       	out	0x3b, r24	; 59
 936:	0e 94 f6 04 	call	0x9ec	; 0x9ec <GIE_enableGeneralInterrupt>
 93a:	03 c0       	rjmp	.+6      	; 0x942 <__stack+0xe3>
 93c:	c1 e0       	ldi	r28, 0x01	; 1
 93e:	01 c0       	rjmp	.+2      	; 0x942 <__stack+0xe3>
 940:	c2 e0       	ldi	r28, 0x02	; 2
 942:	8c 2f       	mov	r24, r28
 944:	cf 91       	pop	r28
 946:	08 95       	ret

00000948 <__vector_1>:


void __vector_1 (void){
 948:	1f 92       	push	r1
 94a:	0f 92       	push	r0
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	0f 92       	push	r0
 950:	11 24       	eor	r1, r1
 952:	2f 93       	push	r18
 954:	3f 93       	push	r19
 956:	4f 93       	push	r20
 958:	5f 93       	push	r21
 95a:	6f 93       	push	r22
 95c:	7f 93       	push	r23
 95e:	8f 93       	push	r24
 960:	9f 93       	push	r25
 962:	af 93       	push	r26
 964:	bf 93       	push	r27
 966:	ef 93       	push	r30
 968:	ff 93       	push	r31
	if(v_gs_ptrfuncInt0 != NULL) 
 96a:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <v_gs_ptrfuncInt0>
 96e:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <v_gs_ptrfuncInt0+0x1>
 972:	30 97       	sbiw	r30, 0x00	; 0
 974:	09 f0       	breq	.+2      	; 0x978 <__vector_1+0x30>
	{
		v_gs_ptrfuncInt0();
 976:	09 95       	icall
	}
	else
	{
		// do nothing
	}
}
 978:	ff 91       	pop	r31
 97a:	ef 91       	pop	r30
 97c:	bf 91       	pop	r27
 97e:	af 91       	pop	r26
 980:	9f 91       	pop	r25
 982:	8f 91       	pop	r24
 984:	7f 91       	pop	r23
 986:	6f 91       	pop	r22
 988:	5f 91       	pop	r21
 98a:	4f 91       	pop	r20
 98c:	3f 91       	pop	r19
 98e:	2f 91       	pop	r18
 990:	0f 90       	pop	r0
 992:	0f be       	out	0x3f, r0	; 63
 994:	0f 90       	pop	r0
 996:	1f 90       	pop	r1
 998:	18 95       	reti

0000099a <__vector_2>:
void __vector_2 (void){
 99a:	1f 92       	push	r1
 99c:	0f 92       	push	r0
 99e:	0f b6       	in	r0, 0x3f	; 63
 9a0:	0f 92       	push	r0
 9a2:	11 24       	eor	r1, r1
 9a4:	2f 93       	push	r18
 9a6:	3f 93       	push	r19
 9a8:	4f 93       	push	r20
 9aa:	5f 93       	push	r21
 9ac:	6f 93       	push	r22
 9ae:	7f 93       	push	r23
 9b0:	8f 93       	push	r24
 9b2:	9f 93       	push	r25
 9b4:	af 93       	push	r26
 9b6:	bf 93       	push	r27
 9b8:	ef 93       	push	r30
 9ba:	ff 93       	push	r31
	if(v_gs_ptrfuncInt1 != NULL) 
 9bc:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <v_gs_ptrfuncInt1>
 9c0:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <v_gs_ptrfuncInt1+0x1>
 9c4:	30 97       	sbiw	r30, 0x00	; 0
 9c6:	09 f0       	breq	.+2      	; 0x9ca <__vector_2+0x30>
	{
		v_gs_ptrfuncInt1();
 9c8:	09 95       	icall
	}
	else
	{
		// do nothing
	}
}
 9ca:	ff 91       	pop	r31
 9cc:	ef 91       	pop	r30
 9ce:	bf 91       	pop	r27
 9d0:	af 91       	pop	r26
 9d2:	9f 91       	pop	r25
 9d4:	8f 91       	pop	r24
 9d6:	7f 91       	pop	r23
 9d8:	6f 91       	pop	r22
 9da:	5f 91       	pop	r21
 9dc:	4f 91       	pop	r20
 9de:	3f 91       	pop	r19
 9e0:	2f 91       	pop	r18
 9e2:	0f 90       	pop	r0
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	0f 90       	pop	r0
 9e8:	1f 90       	pop	r1
 9ea:	18 95       	reti

000009ec <GIE_enableGeneralInterrupt>:
#include "gie.h"

en_gieErrorStatus GIE_enableGeneralInterrupt(void)
{
	en_gieErrorStatus u8_a_retFunction = GIE_OK;
	SET_BIT(SREG, GLOBAL_INTERRUPT_ENABLE_BIT);
 9ec:	8f b7       	in	r24, 0x3f	; 63
 9ee:	80 68       	ori	r24, 0x80	; 128
 9f0:	8f bf       	out	0x3f, r24	; 63
	return u8_a_retFunction;
	
}
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	08 95       	ret

000009f6 <TIMER_init>:
**************************************************************************************************************************	
*/

en_timerError TIMER_init(void) {
	en_timerError en_a_retFunction = TIMER_OK;
	TIMSK = 0x00;
 9f6:	19 be       	out	0x39, r1	; 57
	TIFR  = 0x00;
 9f8:	18 be       	out	0x38, r1	; 56
	TIMSK = (TIMER_0_OC_INTERRUPT << OCIE0) | (TIMER_0_OVF_INTERRUPT << TOIE0)
 9fa:	85 e0       	ldi	r24, 0x05	; 5
 9fc:	89 bf       	out	0x39, r24	; 57
	| (TIMER_1_IC_INTERRUPT << TICIE1)
	| (TIMER_1_OCA_INTERRUPT << OCIE1A)
	| (TIMER_1_OCB_INTERRUPT << OCIE1B)
	| (TIMER_1_OVF_INTERRUPT << TOIE1);
	#if TIMER_0 == ENABLE
	TCCR0 = ((TCCR0 & 0x00) | TIMER_0_MODE);
 9fe:	83 b7       	in	r24, 0x33	; 51
 a00:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 a02:	12 be       	out	0x32, r1	; 50
	OCR0 = 0x00;
 a04:	1c be       	out	0x3c, r1	; 60
	#endif
	#if TIMER_1 == ENABLE
	TCCR1A = ((TCCR1A & 0x00) | (TIMER_1_MODE & 0x03));
 a06:	8f b5       	in	r24, 0x2f	; 47
 a08:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = ((TCCR1B & 0x00) | ((TIMER_1_MODE >> 2) << WGM12));
 a0a:	8e b5       	in	r24, 0x2e	; 46
 a0c:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0x00;
 a0e:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0x00;
 a10:	1c bc       	out	0x2c, r1	; 44
	OCR1AH = 0x00;
 a12:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0x00;
 a14:	1a bc       	out	0x2a, r1	; 42
	OCR1BH = 0x00;
 a16:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0x00;
 a18:	18 bc       	out	0x28, r1	; 40
	ICR1H  = 0x00;
 a1a:	17 bc       	out	0x27, r1	; 39
	ICR1L  = 0x00;
 a1c:	16 bc       	out	0x26, r1	; 38
	#endif
	return en_a_retFunction;
}
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	08 95       	ret

00000a22 <TIMER_start>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3){
 a22:	83 30       	cpi	r24, 0x03	; 3
 a24:	88 f4       	brcc	.+34     	; 0xa48 <TIMER_start+0x26>
		switch (u8_a_timerNumber) {
 a26:	88 23       	and	r24, r24
 a28:	19 f0       	breq	.+6      	; 0xa30 <TIMER_start+0xe>
 a2a:	81 30       	cpi	r24, 0x01	; 1
 a2c:	31 f0       	breq	.+12     	; 0xa3a <TIMER_start+0x18>
 a2e:	0e c0       	rjmp	.+28     	; 0xa4c <TIMER_start+0x2a>
			case TIMER_TM0:
			TCCR0 |= (TIMER_0_CLK << CS00);
 a30:	83 b7       	in	r24, 0x33	; 51
 a32:	82 60       	ori	r24, 0x02	; 2
 a34:	83 bf       	out	0x33, r24	; 51
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 a36:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			TCCR0 |= (TIMER_0_CLK << CS00);
			break;
 a38:	08 95       	ret
			case TIMER_TM1:
			TCNT1H = 0x00;
 a3a:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0x00;
 a3c:	1c bc       	out	0x2c, r1	; 44
			TCCR1B |= (TIMER_1_CLK << CS10);
 a3e:	8e b5       	in	r24, 0x2e	; 46
 a40:	83 60       	ori	r24, 0x03	; 3
 a42:	8e bd       	out	0x2e, r24	; 46
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 a44:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case TIMER_TM1:
			TCNT1H = 0x00;
			TCNT1L = 0x00;
			TCCR1B |= (TIMER_1_CLK << CS10);
			break;
 a46:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 a4c:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 a4e:	08 95       	ret

00000a50 <TIMER_stop>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3){
 a50:	83 30       	cpi	r24, 0x03	; 3
 a52:	88 f4       	brcc	.+34     	; 0xa76 <TIMER_stop+0x26>
		switch (u8_a_timerNumber) {
 a54:	88 23       	and	r24, r24
 a56:	19 f0       	breq	.+6      	; 0xa5e <TIMER_stop+0xe>
 a58:	81 30       	cpi	r24, 0x01	; 1
 a5a:	31 f0       	breq	.+12     	; 0xa68 <TIMER_stop+0x18>
 a5c:	0e c0       	rjmp	.+28     	; 0xa7a <TIMER_stop+0x2a>
			case TIMER_TM0:
			TCCR0 &= 0xF8;
 a5e:	83 b7       	in	r24, 0x33	; 51
 a60:	88 7f       	andi	r24, 0xF8	; 248
 a62:	83 bf       	out	0x33, r24	; 51
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 a64:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			TCCR0 &= 0xF8;
			break;
 a66:	08 95       	ret
			case TIMER_TM1:
			TCCR1B &= 0xF8;
 a68:	8e b5       	in	r24, 0x2e	; 46
 a6a:	88 7f       	andi	r24, 0xF8	; 248
 a6c:	8e bd       	out	0x2e, r24	; 46
			TCNT1H = 0x00;
 a6e:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0x00;
 a70:	1c bc       	out	0x2c, r1	; 44
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 a72:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case TIMER_TM1:
			TCCR1B &= 0xF8;
			TCNT1H = 0x00;
			TCNT1L = 0x00;
			break;
 a74:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 a7a:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 a7c:	08 95       	ret

00000a7e <TIMER_read>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3 && u16_a_tTimerValue != NULL){
 a7e:	83 30       	cpi	r24, 0x03	; 3
 a80:	d0 f4       	brcc	.+52     	; 0xab6 <TIMER_read+0x38>
 a82:	61 15       	cp	r22, r1
 a84:	71 05       	cpc	r23, r1
 a86:	c9 f0       	breq	.+50     	; 0xaba <TIMER_read+0x3c>
		switch (u8_a_timerNumber) {
 a88:	88 23       	and	r24, r24
 a8a:	19 f0       	breq	.+6      	; 0xa92 <TIMER_read+0x14>
 a8c:	81 30       	cpi	r24, 0x01	; 1
 a8e:	41 f0       	breq	.+16     	; 0xaa0 <TIMER_read+0x22>
 a90:	16 c0       	rjmp	.+44     	; 0xabe <TIMER_read+0x40>
			case TIMER_TM0:
			*u16_a_tTimerValue = TCNT0;
 a92:	82 b7       	in	r24, 0x32	; 50
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	fb 01       	movw	r30, r22
 a98:	91 83       	std	Z+1, r25	; 0x01
 a9a:	80 83       	st	Z, r24
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
 a9c:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3 && u16_a_tTimerValue != NULL){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			*u16_a_tTimerValue = TCNT0;
			break;
 a9e:	08 95       	ret
			case TIMER_TM1:
			*u16_a_tTimerValue = (TCNT1L | (TCNT1H << 8));
 aa0:	2c b5       	in	r18, 0x2c	; 44
 aa2:	8d b5       	in	r24, 0x2d	; 45
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	98 2f       	mov	r25, r24
 aa8:	88 27       	eor	r24, r24
 aaa:	82 2b       	or	r24, r18
 aac:	fb 01       	movw	r30, r22
 aae:	91 83       	std	Z+1, r25	; 0x01
 ab0:	80 83       	st	Z, r24
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
 ab2:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_TM0:
			*u16_a_tTimerValue = TCNT0;
			break;
			case TIMER_TM1:
			*u16_a_tTimerValue = (TCNT1L | (TCNT1H << 8));
			break;
 ab4:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	08 95       	ret
 aba:	81 e0       	ldi	r24, 0x01	; 1
 abc:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
 abe:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 ac0:	08 95       	ret

00000ac2 <TIMER_preload>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3){
 ac2:	63 30       	cpi	r22, 0x03	; 3
 ac4:	60 f4       	brcc	.+24     	; 0xade <TIMER_preload+0x1c>
		switch (u8_a_timerNumber) {
 ac6:	66 23       	and	r22, r22
 ac8:	19 f0       	breq	.+6      	; 0xad0 <TIMER_preload+0xe>
 aca:	61 30       	cpi	r22, 0x01	; 1
 acc:	21 f0       	breq	.+8      	; 0xad6 <TIMER_preload+0x14>
 ace:	09 c0       	rjmp	.+18     	; 0xae2 <TIMER_preload+0x20>
			case TIMER_TM0:
			TCNT0 = (u8) u16_a_value;
 ad0:	82 bf       	out	0x32, r24	; 50
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 ad2:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			TCNT0 = (u8) u16_a_value;
			break;
 ad4:	08 95       	ret
			case TIMER_TM1:
			TCNT1H = (u8) (u16_a_value >> 8);
 ad6:	9d bd       	out	0x2d, r25	; 45
			TCNT1L = (u8) u16_a_value;
 ad8:	8c bd       	out	0x2c, r24	; 44
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 ada:	80 e0       	ldi	r24, 0x00	; 0
			TCNT0 = (u8) u16_a_value;
			break;
			case TIMER_TM1:
			TCNT1H = (u8) (u16_a_value >> 8);
			TCNT1L = (u8) u16_a_value;
			break;
 adc:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 ade:	81 e0       	ldi	r24, 0x01	; 1
 ae0:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 ae2:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 ae4:	08 95       	ret

00000ae6 <TIMER_setCallBack>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_setCallBack(u8 u8_a_timerInterruptNum, void (*v_a_ptr)(void)) {
	en_timerError en_a_retFunction = TIMER_OK;
	if ( NULL == v_a_ptr)
 ae6:	61 15       	cp	r22, r1
 ae8:	71 05       	cpc	r23, r1
 aea:	61 f0       	breq	.+24     	; 0xb04 <TIMER_setCallBack+0x1e>
	{
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	else
	{
		if (u8_a_timerInterruptNum >= 0 && u8_a_timerInterruptNum < 2) 
 aec:	82 30       	cpi	r24, 0x02	; 2
 aee:	60 f4       	brcc	.+24     	; 0xb08 <TIMER_setCallBack+0x22>
		{
			v_g_callbackFunc[u8_a_timerInterruptNum] = v_a_ptr;
 af0:	e8 2f       	mov	r30, r24
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	ee 0f       	add	r30, r30
 af6:	ff 1f       	adc	r31, r31
 af8:	ee 56       	subi	r30, 0x6E	; 110
 afa:	ff 4f       	sbci	r31, 0xFF	; 255
 afc:	71 83       	std	Z+1, r23	; 0x01
 afe:	60 83       	st	Z, r22
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_setCallBack(u8 u8_a_timerInterruptNum, void (*v_a_ptr)(void)) {
	en_timerError en_a_retFunction = TIMER_OK;
 b00:	80 e0       	ldi	r24, 0x00	; 0
 b02:	08 95       	ret
	if ( NULL == v_a_ptr)
	{
		en_a_retFunction = TIMER_WRONG_INPUT;
 b04:	81 e0       	ldi	r24, 0x01	; 1
 b06:	08 95       	ret
		if (u8_a_timerInterruptNum >= 0 && u8_a_timerInterruptNum < 2) 
		{
			v_g_callbackFunc[u8_a_timerInterruptNum] = v_a_ptr;
		} 
		else {
			en_a_retFunction = TIMER_WRONG_INPUT;
 b08:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return en_a_retFunction ;
}
 b0a:	08 95       	ret

00000b0c <__vector_9>:

/****************************************************************************************************/
//TIMER interrupt vectors(ISR Handlers)
void __vector_9(void) {
 b0c:	1f 92       	push	r1
 b0e:	0f 92       	push	r0
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	0f 92       	push	r0
 b14:	11 24       	eor	r1, r1
 b16:	2f 93       	push	r18
 b18:	3f 93       	push	r19
 b1a:	4f 93       	push	r20
 b1c:	5f 93       	push	r21
 b1e:	6f 93       	push	r22
 b20:	7f 93       	push	r23
 b22:	8f 93       	push	r24
 b24:	9f 93       	push	r25
 b26:	af 93       	push	r26
 b28:	bf 93       	push	r27
 b2a:	ef 93       	push	r30
 b2c:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER1_OVF] != NULL)
 b2e:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <v_g_callbackFunc>
 b32:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <v_g_callbackFunc+0x1>
 b36:	30 97       	sbiw	r30, 0x00	; 0
 b38:	09 f0       	breq	.+2      	; 0xb3c <__vector_9+0x30>
	v_g_callbackFunc[TIMER1_OVF]();
 b3a:	09 95       	icall
}
 b3c:	ff 91       	pop	r31
 b3e:	ef 91       	pop	r30
 b40:	bf 91       	pop	r27
 b42:	af 91       	pop	r26
 b44:	9f 91       	pop	r25
 b46:	8f 91       	pop	r24
 b48:	7f 91       	pop	r23
 b4a:	6f 91       	pop	r22
 b4c:	5f 91       	pop	r21
 b4e:	4f 91       	pop	r20
 b50:	3f 91       	pop	r19
 b52:	2f 91       	pop	r18
 b54:	0f 90       	pop	r0
 b56:	0f be       	out	0x3f, r0	; 63
 b58:	0f 90       	pop	r0
 b5a:	1f 90       	pop	r1
 b5c:	18 95       	reti

00000b5e <__vector_11>:
void __vector_11(void) {
 b5e:	1f 92       	push	r1
 b60:	0f 92       	push	r0
 b62:	0f b6       	in	r0, 0x3f	; 63
 b64:	0f 92       	push	r0
 b66:	11 24       	eor	r1, r1
 b68:	2f 93       	push	r18
 b6a:	3f 93       	push	r19
 b6c:	4f 93       	push	r20
 b6e:	5f 93       	push	r21
 b70:	6f 93       	push	r22
 b72:	7f 93       	push	r23
 b74:	8f 93       	push	r24
 b76:	9f 93       	push	r25
 b78:	af 93       	push	r26
 b7a:	bf 93       	push	r27
 b7c:	ef 93       	push	r30
 b7e:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER0_OVF] != NULL)
 b80:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <v_g_callbackFunc+0x2>
 b84:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <v_g_callbackFunc+0x3>
 b88:	30 97       	sbiw	r30, 0x00	; 0
 b8a:	09 f0       	breq	.+2      	; 0xb8e <__vector_11+0x30>
	v_g_callbackFunc[TIMER0_OVF]();
 b8c:	09 95       	icall
 b8e:	ff 91       	pop	r31
 b90:	ef 91       	pop	r30
 b92:	bf 91       	pop	r27
 b94:	af 91       	pop	r26
 b96:	9f 91       	pop	r25
 b98:	8f 91       	pop	r24
 b9a:	7f 91       	pop	r23
 b9c:	6f 91       	pop	r22
 b9e:	5f 91       	pop	r21
 ba0:	4f 91       	pop	r20
 ba2:	3f 91       	pop	r19
 ba4:	2f 91       	pop	r18
 ba6:	0f 90       	pop	r0
 ba8:	0f be       	out	0x3f, r0	; 63
 baa:	0f 90       	pop	r0
 bac:	1f 90       	pop	r1
 bae:	18 95       	reti

00000bb0 <main>:
{
	//dio_setpindirection((st_pinconfig*){portc_index,dio_pin7,dio_direction_output,dio_high,dio_unlock});
	//dio_setpinstatus((st_pinconfig*){portc_index,dio_pin7,dio_direction_output,dio_high,dio_unlock},dio_high);
	
	
	APP_init();
 bb0:	0e 94 4b 01 	call	0x296	; 0x296 <APP_init>
	//dio_porta = 0x15;

    while (1) 
    {
	
		if(en_g_carStatus == SYSTEM_ON)
 bb4:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <en_g_carStatus>
 bb8:	81 11       	cpse	r24, r1
 bba:	fc cf       	rjmp	.-8      	; 0xbb4 <main+0x4>
		{
			if(u8_g_halfSecondStop != 1)
 bbc:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <u8_g_halfSecondStop>
 bc0:	81 30       	cpi	r24, 0x01	; 1
 bc2:	81 f0       	breq	.+32     	; 0xbe4 <main+0x34>
			{
				st_g_systemSequence[u8_g_sequenceNumber].ptr_g_Function();
 bc4:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <u8_g_sequenceNumber>
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	fc 01       	movw	r30, r24
 bcc:	ee 0f       	add	r30, r30
 bce:	ff 1f       	adc	r31, r31
 bd0:	8e 0f       	add	r24, r30
 bd2:	9f 1f       	adc	r25, r31
 bd4:	fc 01       	movw	r30, r24
 bd6:	eb 58       	subi	r30, 0x8B	; 139
 bd8:	ff 4f       	sbci	r31, 0xFF	; 255
 bda:	01 90       	ld	r0, Z+
 bdc:	f0 81       	ld	r31, Z
 bde:	e0 2d       	mov	r30, r0
 be0:	09 95       	icall
 be2:	e8 cf       	rjmp	.-48     	; 0xbb4 <main+0x4>
			}
			else
			{
				APP_temporaryStop();
 be4:	0e 94 8f 01 	call	0x31e	; 0x31e <APP_temporaryStop>
 be8:	e5 cf       	rjmp	.-54     	; 0xbb4 <main+0x4>

00000bea <_exit>:
 bea:	f8 94       	cli

00000bec <__stop_program>:
 bec:	ff cf       	rjmp	.-2      	; 0xbec <__stop_program>
