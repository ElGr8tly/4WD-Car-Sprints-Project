
4WD-Car-Sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000de2  00000e76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080008c  0080008c  00000ea2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002753  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f37  00000000  00000000  000038b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015c2  00000000  00000000  000047ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  00005dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df6  00000000  00000000  00006388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ade  00000000  00000000  0000717e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00008c5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__vector_1>
   8:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 39       	cpi	r26, 0x9C	; 156
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 06 	call	0xda4	; 0xda4 <main>
  8a:	0c 94 ef 06 	jmp	0xdde	; 0xdde <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_overflowRoutine>:
/********************** FUNCTIONS DEFINITIONS ***************************************/

void APP_overflowRoutine()
{
	//to make every overflow happen at 500ms interval
	TIMER_preload(PRE_TICKS,TIMER_TM1);
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	8b ed       	ldi	r24, 0xDB	; 219
  96:	9b e0       	ldi	r25, 0x0B	; 11
  98:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TIMER_preload>
	static i8 i8_gs_overFlowCounter = 0;
	if (en_g_carStatus == SYSTEM_ON)
  9c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <en_g_carStatus>
  a0:	81 11       	cpse	r24, r1
  a2:	2c c0       	rjmp	.+88     	; 0xfc <APP_overflowRoutine+0x6a>
	{
		i8_gs_overFlowCounter++;
  a4:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <i8_gs_overFlowCounter.1788>
  a8:	2f 5f       	subi	r18, 0xFF	; 255
  aa:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <i8_gs_overFlowCounter.1788>
		if(st_g_systemSequence[u8_g_sequenceNumber].period == i8_gs_overFlowCounter)
  ae:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <u8_g_sequenceNumber>
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fc 01       	movw	r30, r24
  b6:	ee 0f       	add	r30, r30
  b8:	ff 1f       	adc	r31, r31
  ba:	e8 0f       	add	r30, r24
  bc:	f9 1f       	adc	r31, r25
  be:	e7 58       	subi	r30, 0x87	; 135
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	42 81       	ldd	r20, Z+2	; 0x02
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	02 2e       	mov	r0, r18
  c8:	00 0c       	add	r0, r0
  ca:	33 0b       	sbc	r19, r19
  cc:	42 17       	cp	r20, r18
  ce:	53 07       	cpc	r21, r19
  d0:	91 f4       	brne	.+36     	; 0xf6 <APP_overflowRoutine+0x64>
		{
			i8_gs_overFlowCounter=-1;
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <i8_gs_overFlowCounter.1788>
			u8_g_sequenceNumber = (u8_g_sequenceNumber + 1) % SEQUENCE_MAX_NUMBER;
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	83 70       	andi	r24, 0x03	; 3
  dc:	90 78       	andi	r25, 0x80	; 128
  de:	99 23       	and	r25, r25
  e0:	24 f4       	brge	.+8      	; 0xea <APP_overflowRoutine+0x58>
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	8c 6f       	ori	r24, 0xFC	; 252
  e6:	9f 6f       	ori	r25, 0xFF	; 255
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <u8_g_sequenceNumber>
			u8_g_halfSecondStop = 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <u8_g_halfSecondStop>
  f4:	08 95       	ret
		}
		else
		{
			u8_g_halfSecondStop = 0;
  f6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <u8_g_halfSecondStop>
  fa:	08 95       	ret
		}
	}
	else if(en_g_carStatus == START_PRESSED)
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	29 f4       	brne	.+10     	; 0x10a <APP_overflowRoutine+0x78>
	{
		i8_gs_overFlowCounter=-1;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <i8_gs_overFlowCounter.1788>
		en_g_carStatus = SYSTEM_ON;
 106:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <en_g_carStatus>
 10a:	08 95       	ret

0000010c <APP_pwmRoutine>:
 */
void APP_pwmRoutine()
{
	static u8 u8_a_flag = 0;			// Static flag to keep track of the PWM signal state
	// Check the current state of the PWM signal
	if(u8_a_flag == 0){
 10c:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 110:	81 11       	cpse	r24, r1
 112:	14 c0       	rjmp	.+40     	; 0x13c <APP_pwmRoutine+0x30>
		// If the signal is currently low, set it to high and update Timer0 preload value
		DIO_setPinStatus(&st_g_pwmSignalPin, DIO_HIGH);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	88 e7       	ldi	r24, 0x78	; 120
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
		TIMER_preload( (MAX_PRELOAD - u8_g_pwmDutyCycle), TIMER_TM0);
 11e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <u8_g_pwmDutyCycle>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	a9 01       	movw	r20, r18
 12a:	49 1b       	sub	r20, r25
 12c:	51 09       	sbc	r21, r1
 12e:	ca 01       	movw	r24, r20
 130:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TIMER_preload>
		u8_a_flag = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 13a:	08 95       	ret
		} else if(u8_a_flag == 1){
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	69 f4       	brne	.+26     	; 0x15a <APP_pwmRoutine+0x4e>
		// If the signal is currently high, set it to low and update Timer0 preload value
		DIO_setPinStatus(&st_g_pwmSignalPin, DIO_LOW);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	88 e7       	ldi	r24, 0x78	; 120
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
		TIMER_preload(u8_g_pwmDutyCycle,TIMER_TM0);
 14a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <u8_g_pwmDutyCycle>
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TIMER_preload>
		u8_a_flag = 0;
 156:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
 15a:	08 95       	ret

0000015c <APP_systemStart>:
 * and turns it on to indicate that the start button has been pressed. If the system is currently
 * in the OFF state, it starts Timer0 and Timer1, sets the system status to START_PRESSED, and
 * resumes Timer1 with the last recorded value. If the system is already in the ON state, it does nothing.
 */
void APP_systemStart()
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <APP_systemStart+0x6>
 162:	1f 92       	push	r1
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
    // Create an LED object for indication
    st_leds led = {PORTC_INDEX, DIO_PIN0};
 168:	19 82       	std	Y+1, r1	; 0x01
 16a:	1a 82       	std	Y+2, r1	; 0x02
 16c:	1b 82       	std	Y+3, r1	; 0x03
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	89 83       	std	Y+1, r24	; 0x01
    LED_init(&led);
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	0e 94 0a 02 	call	0x414	; 0x414 <LED_init>

    // Turn on the LED to indicate the start button press
    LED_on(&led);
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	0e 94 35 02 	call	0x46a	; 0x46a <LED_on>

    // Check if the system is currently OFF
    if (en_g_carStatus == SYSTEM_OFF)
 182:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <en_g_carStatus>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	81 f4       	brne	.+32     	; 0x1aa <APP_systemStart+0x4e>
    {
		// Resume Timer1 with the last recorded value
	    TIMER_preload(u16_g_timerLastValue, TIMER_TM1);
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <u16_g_timerLastValue>
 190:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <u16_g_timerLastValue+0x1>
 194:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TIMER_preload>
        // Start Timer0 and Timer1
        TIMER_start(TIMER_TM0);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 0b 06 	call	0xc16	; 0xc16 <TIMER_start>
        TIMER_start(TIMER_TM1);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 0b 06 	call	0xc16	; 0xc16 <TIMER_start>

        // Set the system status to START_PRESSED
        en_g_carStatus = START_PRESSED;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <en_g_carStatus>


    }
    // If the system is already ON, do nothing
}
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <APP_systemStop>:
void APP_systemStop()
{
    en_appErrorStatus en_a_appErrorStatus = APP_OK;

    // Read the last recorded value of Timer1
    TIMER_read(TIMER_TM1, &u16_g_timerLastValue);
 1b6:	6e e8       	ldi	r22, 0x8E	; 142
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 39 06 	call	0xc72	; 0xc72 <TIMER_read>

    // Stop both Timer0 and Timer1
    TIMER_stop(TIMER_TM0);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 22 06 	call	0xc44	; 0xc44 <TIMER_stop>
    TIMER_stop(TIMER_TM1);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 22 06 	call	0xc44	; 0xc44 <TIMER_stop>

    // Stop the car's motor direction
    MOTOR_stopMotorDirection();
 1cc:	0e 94 ce 02 	call	0x59c	; 0x59c <MOTOR_stopMotorDirection>

    // Set the system status to SYSTEM_OFF
    en_g_carStatus = SYSTEM_OFF;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <en_g_carStatus>

    // Turn off the currently active LED (if any) and set it to indicate the stop state
    en_a_appErrorStatus |= LED_off(st_g_currentLed);
 1d6:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <st_g_currentLed>
 1da:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <st_g_currentLed+0x1>
 1de:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_off>
    st_g_currentLed = &st_g_stopLed;
 1e2:	8b e6       	ldi	r24, 0x6B	; 107
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <st_g_currentLed+0x1>
 1ea:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <st_g_currentLed>
    en_a_appErrorStatus |= LED_on(st_g_currentLed);
 1ee:	0e 94 35 02 	call	0x46a	; 0x46a <LED_on>
 1f2:	08 95       	ret

000001f4 <APP_longestSide>:
 * @return en_appErrorStatus representing the success or failure of the operation.
 *         - APP_OK: Operation successful.
 *         - APP_NOK: Operation failed.
 */
en_appErrorStatus APP_longestSide()
{
 1f4:	cf 93       	push	r28
    u8_g_pwmDutyCycle = SPEED_50; // Set the PWM duty cycle to 50%
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <u8_g_pwmDutyCycle>
    en_appErrorStatus en_a_appErrorStatus = APP_OK;

    // Turn off the currently active LED (if any)
    en_a_appErrorStatus |= LED_off(st_g_currentLed);
 1fc:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <st_g_currentLed>
 200:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <st_g_currentLed+0x1>
 204:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_off>
 208:	c8 2f       	mov	r28, r24

    // Set the current LED to indicate movement along the longest side
    st_g_currentLed = &st_g_longSideLed;
 20a:	81 e7       	ldi	r24, 0x71	; 113
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <st_g_currentLed+0x1>
 212:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <st_g_currentLed>
    en_a_appErrorStatus |= LED_on(st_g_currentLed);
 216:	0e 94 35 02 	call	0x46a	; 0x46a <LED_on>
 21a:	c8 2b       	or	r28, r24

    // Configure the left and right motors for forward direction
    en_a_appErrorStatus |= MOTOR_leftMotorForwardDirection();
 21c:	0e 94 a7 02 	call	0x54e	; 0x54e <MOTOR_leftMotorForwardDirection>
 220:	c8 2b       	or	r28, r24
    en_a_appErrorStatus |= MOTOR_rightMotorForwardDirection();
 222:	0e 94 c2 02 	call	0x584	; 0x584 <MOTOR_rightMotorForwardDirection>

    return en_a_appErrorStatus;
}
 226:	8c 2b       	or	r24, r28
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <APP_shortestSide>:
 * @return en_appErrorStatus representing the success or failure of the operation.
 *         - APP_OK: Operation successful.
 *         - APP_NOK: Operation failed.
 */
en_appErrorStatus APP_shortestSide()
{
 22c:	cf 93       	push	r28
    u8_g_pwmDutyCycle = SPEED_30; // Set the PWM duty cycle for shorter movement(30%)
 22e:	8d e4       	ldi	r24, 0x4D	; 77
 230:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <u8_g_pwmDutyCycle>
    en_appErrorStatus en_a_appErrorStatus = APP_OK;

    // Turn off the currently active LED (if any)
    en_a_appErrorStatus |= LED_off(st_g_currentLed);
 234:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <st_g_currentLed>
 238:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <st_g_currentLed+0x1>
 23c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_off>
 240:	c8 2f       	mov	r28, r24

    // Set the current LED to indicate movement along the shortest side
    st_g_currentLed = &st_g_shortSideLed;
 242:	8e e6       	ldi	r24, 0x6E	; 110
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <st_g_currentLed+0x1>
 24a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <st_g_currentLed>
    en_a_appErrorStatus |= LED_on(st_g_currentLed);
 24e:	0e 94 35 02 	call	0x46a	; 0x46a <LED_on>
 252:	c8 2b       	or	r28, r24

    // Configure the left and right motors for forward direction
    en_a_appErrorStatus |= MOTOR_leftMotorForwardDirection();
 254:	0e 94 a7 02 	call	0x54e	; 0x54e <MOTOR_leftMotorForwardDirection>
 258:	c8 2b       	or	r28, r24
    en_a_appErrorStatus |= MOTOR_rightMotorForwardDirection();
 25a:	0e 94 c2 02 	call	0x584	; 0x584 <MOTOR_rightMotorForwardDirection>

    return en_a_appErrorStatus;
}
 25e:	8c 2b       	or	r24, r28
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <APP_rotate>:
 * @return en_appErrorStatus representing the success or failure of the operation.
 *         - APP_OK: Operation successful.
 *         - APP_NOK: Operation failed.
 */
en_appErrorStatus APP_rotate()
{
 264:	cf 93       	push	r28
    en_appErrorStatus en_a_appErrorStatus = APP_OK;

    // Turn off the currently active LED (if any)
    en_a_appErrorStatus |= LED_off(st_g_currentLed);
 266:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <st_g_currentLed>
 26a:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <st_g_currentLed+0x1>
 26e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_off>
 272:	c8 2f       	mov	r28, r24

    // Set the current LED to indicate rotation
    st_g_currentLed = &st_g_rotateLed;
 274:	88 e6       	ldi	r24, 0x68	; 104
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <st_g_currentLed+0x1>
 27c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <st_g_currentLed>
    en_a_appErrorStatus |= LED_on(st_g_currentLed);
 280:	0e 94 35 02 	call	0x46a	; 0x46a <LED_on>
 284:	c8 2b       	or	r28, r24

    // Configure the motors for rotation (left motor backward and right motor forward)
    en_a_appErrorStatus |= MOTOR_leftMotorBackwardDirection();
 286:	0e 94 b6 02 	call	0x56c	; 0x56c <MOTOR_leftMotorBackwardDirection>
 28a:	c8 2b       	or	r28, r24
    en_a_appErrorStatus |= MOTOR_rightMotorForwardDirection();
 28c:	0e 94 c2 02 	call	0x584	; 0x584 <MOTOR_rightMotorForwardDirection>

    return en_a_appErrorStatus;
}
 290:	8c 2b       	or	r24, r28
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <APP_init>:
 * @return en_appErrorStatus representing the success or failure of the initialization.
 *         - APP_OK: Initialization successful.
 *         - APP_NOK: Initialization failed.
 */
en_appErrorStatus APP_init()
{
 296:	cf 93       	push	r28
	en_appErrorStatus en_a_appErrorStatus = APP_OK;

	// Set the direction of the PWM signal pin
	en_a_appErrorStatus |= DIO_setPinDirection(&st_g_pwmSignalPin);
 298:	88 e7       	ldi	r24, 0x78	; 120
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <DIO_setPinDirection>
 2a0:	c8 2f       	mov	r28, r24

	// Initialize and connect the start and stop buttons
	en_a_appErrorStatus |= BUTTON_init(&st_g_startButton);
 2a2:	86 e7       	ldi	r24, 0x76	; 118
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 b0 01 	call	0x360	; 0x360 <BUTTON_init>
 2aa:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= BUTTON_init(&st_g_stopButton);
 2ac:	84 e7       	ldi	r24, 0x74	; 116
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 b0 01 	call	0x360	; 0x360 <BUTTON_init>
 2b4:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= BUTTON_connectIPU(&st_g_startButton);
 2b6:	86 e7       	ldi	r24, 0x76	; 118
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <BUTTON_connectIPU>
 2be:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= BUTTON_connectIPU(&st_g_stopButton);
 2c0:	84 e7       	ldi	r24, 0x74	; 116
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <BUTTON_connectIPU>
 2c8:	c8 2b       	or	r28, r24

	// Initialize the LEDs
	en_a_appErrorStatus |= LED_init(&st_g_longSideLed);
 2ca:	81 e7       	ldi	r24, 0x71	; 113
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 0a 02 	call	0x414	; 0x414 <LED_init>
 2d2:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= LED_init(&st_g_shortSideLed);
 2d4:	8e e6       	ldi	r24, 0x6E	; 110
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 0a 02 	call	0x414	; 0x414 <LED_init>
 2dc:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= LED_init(&st_g_rotateLed);
 2de:	88 e6       	ldi	r24, 0x68	; 104
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 0a 02 	call	0x414	; 0x414 <LED_init>
 2e6:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= LED_init(&st_g_stopLed);
 2e8:	8b e6       	ldi	r24, 0x6B	; 107
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 0a 02 	call	0x414	; 0x414 <LED_init>
 2f0:	c8 2b       	or	r28, r24

	// Initialize and configure external interrupts for start and stop buttons
	en_a_appErrorStatus |= EXTI_interruptInit(&st_g_startInterrupt);
 2f2:	84 e6       	ldi	r24, 0x64	; 100
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 22 05 	call	0xa44	; 0xa44 <EXTI_interruptInit>
 2fa:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= EXTI_interruptInit(&st_g_stopInterrupt);
 2fc:	80 e6       	ldi	r24, 0x60	; 96
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 22 05 	call	0xa44	; 0xa44 <EXTI_interruptInit>
 304:	c8 2b       	or	r28, r24

	// Initialize and configure timers
	en_a_appErrorStatus |= TIMER_init();
 306:	0e 94 f5 05 	call	0xbea	; 0xbea <TIMER_init>
 30a:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= TIMER_setCallBack(TIMER0_OVF, APP_pwmRoutine);
 30c:	66 e8       	ldi	r22, 0x86	; 134
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 6d 06 	call	0xcda	; 0xcda <TIMER_setCallBack>
 316:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= TIMER_setCallBack(TIMER1_OVF, APP_overflowRoutine);
 318:	69 e4       	ldi	r22, 0x49	; 73
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 6d 06 	call	0xcda	; 0xcda <TIMER_setCallBack>
 322:	c8 2b       	or	r28, r24
	//en_a_appErrorStatus |= TIMER_preload(231, TIMER_TM0);

	// Enable global interrupts
	en_a_appErrorStatus |= GIE_enableGeneralInterrupt();
 324:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <GIE_enableGeneralInterrupt>
 328:	c8 2b       	or	r28, r24

	// Initialize the motor driver
	en_a_appErrorStatus |= MOTOR_driverInitialize();
 32a:	0e 94 90 02 	call	0x520	; 0x520 <MOTOR_driverInitialize>

	return en_a_appErrorStatus;
}
 32e:	8c 2b       	or	r24, r28
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <APP_temporaryStop>:
 * @return en_appErrorStatus representing the success or failure of the operation.
 *         - APP_OK: Operation successful.
 *         - APP_NOK: Operation failed.
 */
en_appErrorStatus APP_temporaryStop()
{
 334:	cf 93       	push	r28
    en_appErrorStatus en_a_appErrorStatus = APP_OK;

    // Turn off the currently active LED (if any)
    en_a_appErrorStatus |= LED_off(st_g_currentLed);
 336:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <st_g_currentLed>
 33a:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <st_g_currentLed+0x1>
 33e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LED_off>
 342:	c8 2f       	mov	r28, r24

    // Set the current LED to indicate the stop state
    st_g_currentLed = &st_g_stopLed;
 344:	8b e6       	ldi	r24, 0x6B	; 107
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <st_g_currentLed+0x1>
 34c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <st_g_currentLed>
    en_a_appErrorStatus |= LED_on(st_g_currentLed);
 350:	0e 94 35 02 	call	0x46a	; 0x46a <LED_on>
 354:	c8 2b       	or	r28, r24

    // Stop the car's motor direction
    en_a_appErrorStatus |= MOTOR_stopMotorDirection();
 356:	0e 94 ce 02 	call	0x59c	; 0x59c <MOTOR_stopMotorDirection>

    return en_a_appErrorStatus;
}
 35a:	8c 2b       	or	r24, r28
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <BUTTON_init>:
	else 
	{
		en_a_retFunction = BUTTON_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	1f 92       	push	r1
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	00 97       	sbiw	r24, 0x00	; 0
 36c:	e1 f0       	breq	.+56     	; 0x3a6 <BUTTON_init+0x46>
 36e:	fc 01       	movw	r30, r24
 370:	20 81       	ld	r18, Z
 372:	24 30       	cpi	r18, 0x04	; 4
 374:	d0 f4       	brcc	.+52     	; 0x3aa <BUTTON_init+0x4a>
 376:	91 81       	ldd	r25, Z+1	; 0x01
 378:	98 30       	cpi	r25, 0x08	; 8
 37a:	c8 f4       	brcc	.+50     	; 0x3ae <BUTTON_init+0x4e>
 37c:	82 2f       	mov	r24, r18
 37e:	83 70       	andi	r24, 0x03	; 3
 380:	29 81       	ldd	r18, Y+1	; 0x01
 382:	2c 7f       	andi	r18, 0xFC	; 252
 384:	28 2b       	or	r18, r24
 386:	97 70       	andi	r25, 0x07	; 7
 388:	99 0f       	add	r25, r25
 38a:	99 0f       	add	r25, r25
 38c:	23 7e       	andi	r18, 0xE3	; 227
 38e:	29 2b       	or	r18, r25
 390:	2f 79       	andi	r18, 0x9F	; 159
 392:	2f 77       	andi	r18, 0x7F	; 127
 394:	29 83       	std	Y+1, r18	; 0x01
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <DIO_pinInitialize>
 39e:	88 23       	and	r24, r24
 3a0:	39 f0       	breq	.+14     	; 0x3b0 <BUTTON_init+0x50>
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	05 c0       	rjmp	.+10     	; 0x3b0 <BUTTON_init+0x50>
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	03 c0       	rjmp	.+6      	; 0x3b0 <BUTTON_init+0x50>
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <BUTTON_init+0x50>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0f 90       	pop	r0
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <BUTTON_connectIPU>:
/*****************************************************************************/
/* port     : PORTA....PORTD                                                 */
/* pin      : PIN0....PIN7        						                     */
/*****************************************************************************/

en_buttonError BUTTON_connectIPU(st_button *st_a_butt){
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	1f 92       	push	r1
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
	en_buttonError en_a_retFunction = BUTTON_OK;
	if(st_a_butt != NULL && st_a_butt->port <= MAX_PORT_INDEX && st_a_butt->pin <= MAX_PIN_INDEX )
 3c2:	00 97       	sbiw	r24, 0x00	; 0
 3c4:	f1 f0       	breq	.+60     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 81       	ld	r18, Z
 3ca:	24 30       	cpi	r18, 0x04	; 4
 3cc:	e0 f4       	brcc	.+56     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3ce:	81 81       	ldd	r24, Z+1	; 0x01
 3d0:	88 30       	cpi	r24, 0x08	; 8
 3d2:	d8 f4       	brcc	.+54     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	{
		st_pinConfig st_a_buttonPin = {st_a_butt->port, st_a_butt->pin, DIO_DIRECTION_INPUT, DIO_HIGH,DIO_UNLOCK};
 3d4:	23 70       	andi	r18, 0x03	; 3
 3d6:	99 81       	ldd	r25, Y+1	; 0x01
 3d8:	9c 7f       	andi	r25, 0xFC	; 252
 3da:	29 2b       	or	r18, r25
 3dc:	87 70       	andi	r24, 0x07	; 7
 3de:	98 2f       	mov	r25, r24
 3e0:	99 0f       	add	r25, r25
 3e2:	99 0f       	add	r25, r25
 3e4:	82 2f       	mov	r24, r18
 3e6:	83 7e       	andi	r24, 0xE3	; 227
 3e8:	89 2b       	or	r24, r25
 3ea:	8f 7d       	andi	r24, 0xDF	; 223
 3ec:	80 64       	ori	r24, 0x40	; 64
 3ee:	8f 77       	andi	r24, 0x7F	; 127
 3f0:	89 83       	std	Y+1, r24	; 0x01
		if(DIO_setPinPullupResistor(&st_a_buttonPin) == DIO_OK)
 3f2:	ce 01       	movw	r24, r28
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	0e 94 94 04 	call	0x928	; 0x928 <DIO_setPinPullupResistor>
 3fa:	88 23       	and	r24, r24
 3fc:	39 f0       	breq	.+14     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		{
			en_a_retFunction = BUTTON_OK;
		}
		else 
		{
			en_a_retFunction = BUTTON_OP_FAILED;
 3fe:	82 e0       	ldi	r24, 0x02	; 2
/*****************************************************************************/

en_buttonError BUTTON_connectIPU(st_button *st_a_butt){
	en_buttonError en_a_retFunction = BUTTON_OK;
	if(st_a_butt != NULL && st_a_butt->port <= MAX_PORT_INDEX && st_a_butt->pin <= MAX_PIN_INDEX )
	{
 400:	05 c0       	rjmp	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			en_a_retFunction = BUTTON_OP_FAILED;
		}
	} 
	else 
	{
		en_a_retFunction = BUTTON_WRONG_INPUT;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	03 c0       	rjmp	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	01 c0       	rjmp	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 40c:	0f 90       	pop	r0
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <LED_init>:
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_ledError LED_init(st_leds *st_a_led)
{
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	1f 92       	push	r1
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 422:	fc 01       	movw	r30, r24
 424:	20 81       	ld	r18, Z
 426:	24 30       	cpi	r18, 0x04	; 4
 428:	b8 f4       	brcc	.+46     	; 0x458 <LED_init+0x44>
 42a:	21 81       	ldd	r18, Z+1	; 0x01
 42c:	28 30       	cpi	r18, 0x08	; 8
 42e:	b0 f4       	brcc	.+44     	; 0x45c <LED_init+0x48>
 430:	8c 01       	movw	r16, r24
		st_pinConfig st_a_ledPin = {st_a_led->port, st_a_led->pin, DIO_DIRECTION_OUTPUT, DIO_LOW};
 432:	80 81       	ld	r24, Z
 434:	83 70       	andi	r24, 0x03	; 3
 436:	27 70       	andi	r18, 0x07	; 7
 438:	22 0f       	add	r18, r18
 43a:	22 0f       	add	r18, r18
 43c:	28 2b       	or	r18, r24
 43e:	20 62       	ori	r18, 0x20	; 32
 440:	29 83       	std	Y+1, r18	; 0x01
		if (DIO_pinInitialize(&st_a_ledPin) == DIO_OK )
 442:	ce 01       	movw	r24, r28
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <DIO_pinInitialize>
 44a:	81 11       	cpse	r24, r1
 44c:	03 c0       	rjmp	.+6      	; 0x454 <LED_init+0x40>
		{
			st_a_led->state = 0;
 44e:	f8 01       	movw	r30, r16
 450:	12 82       	std	Z+2, r1	; 0x02
 452:	05 c0       	rjmp	.+10     	; 0x45e <LED_init+0x4a>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
 454:	82 e0       	ldi	r24, 0x02	; 2
**************************************************************************************************************************	
*/
en_ledError LED_init(st_leds *st_a_led)
{
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 456:	03 c0       	rjmp	.+6      	; 0x45e <LED_init+0x4a>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
		}
		} else {
		en_a_retFunction = LED_WRONG_INPUT;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	01 c0       	rjmp	.+2      	; 0x45e <LED_init+0x4a>
 45c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 45e:	0f 90       	pop	r0
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	08 95       	ret

0000046a <LED_on>:
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_ledError LED_on(st_leds *st_a_led)
{
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	1f 92       	push	r1
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
 478:	fc 01       	movw	r30, r24
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 47a:	80 81       	ld	r24, Z
 47c:	84 30       	cpi	r24, 0x04	; 4
 47e:	d0 f4       	brcc	.+52     	; 0x4b4 <LED_on+0x4a>
 480:	91 81       	ldd	r25, Z+1	; 0x01
 482:	98 30       	cpi	r25, 0x08	; 8
 484:	c8 f4       	brcc	.+50     	; 0x4b8 <LED_on+0x4e>
 486:	8f 01       	movw	r16, r30
		st_pinConfig st_a_ledPin = {st_a_led->port, st_a_led->pin, DIO_DIRECTION_OUTPUT, DIO_HIGH};
 488:	83 70       	andi	r24, 0x03	; 3
 48a:	97 70       	andi	r25, 0x07	; 7
 48c:	99 0f       	add	r25, r25
 48e:	99 0f       	add	r25, r25
 490:	98 2b       	or	r25, r24
 492:	90 62       	ori	r25, 0x20	; 32
 494:	90 64       	ori	r25, 0x40	; 64
 496:	99 83       	std	Y+1, r25	; 0x01
		if (DIO_setPinStatus(&st_a_ledPin, DIO_HIGH) == DIO_OK)
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	ce 01       	movw	r24, r28
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
 4a2:	81 11       	cpse	r24, r1
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <LED_on+0x46>
		{
			st_a_led->state = 2;
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	f8 01       	movw	r30, r16
 4aa:	82 83       	std	Z+2, r24	; 0x02
			en_a_retFunction = LED_OK;
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <LED_on+0x50>
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
 4b0:	82 e0       	ldi	r24, 0x02	; 2
**************************************************************************************************************************	
*/
en_ledError LED_on(st_leds *st_a_led)
{
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <LED_on+0x50>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
		}
		} else {
		en_a_retFunction = LED_WRONG_INPUT;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <LED_on+0x50>
 4b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 4ba:	0f 90       	pop	r0
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	08 95       	ret

000004c6 <LED_off>:
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_ledError LED_off(st_leds *st_a_led)
{
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	1f 92       	push	r1
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	fc 01       	movw	r30, r24
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 4d6:	80 81       	ld	r24, Z
 4d8:	84 30       	cpi	r24, 0x04	; 4
 4da:	c8 f4       	brcc	.+50     	; 0x50e <LED_off+0x48>
 4dc:	91 81       	ldd	r25, Z+1	; 0x01
 4de:	98 30       	cpi	r25, 0x08	; 8
 4e0:	c0 f4       	brcc	.+48     	; 0x512 <LED_off+0x4c>
 4e2:	8f 01       	movw	r16, r30
		st_pinConfig st_a_ledPin = {st_a_led->port, st_a_led->pin, DIO_DIRECTION_OUTPUT, DIO_LOW};
 4e4:	83 70       	andi	r24, 0x03	; 3
 4e6:	97 70       	andi	r25, 0x07	; 7
 4e8:	99 0f       	add	r25, r25
 4ea:	99 0f       	add	r25, r25
 4ec:	98 2b       	or	r25, r24
 4ee:	90 62       	ori	r25, 0x20	; 32
 4f0:	99 83       	std	Y+1, r25	; 0x01
		if (DIO_setPinStatus(&st_a_ledPin, DIO_LOW) == DIO_OK)
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	ce 01       	movw	r24, r28
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
 4fc:	81 11       	cpse	r24, r1
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <LED_off+0x44>
		{
			st_a_led->state = 1;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	f8 01       	movw	r30, r16
 504:	82 83       	std	Z+2, r24	; 0x02
			en_a_retFunction = LED_OK;
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	05 c0       	rjmp	.+10     	; 0x514 <LED_off+0x4e>
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
 50a:	82 e0       	ldi	r24, 0x02	; 2
**************************************************************************************************************************	
*/
en_ledError LED_off(st_leds *st_a_led)
{
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 50c:	03 c0       	rjmp	.+6      	; 0x514 <LED_off+0x4e>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
		}
		} else {
		en_a_retFunction = LED_WRONG_INPUT;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	01 c0       	rjmp	.+2      	; 0x514 <LED_off+0x4e>
 512:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 514:	0f 90       	pop	r0
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	08 95       	ret

00000520 <MOTOR_driverInitialize>:

    en_a_retFunction &= DIO_setPinStatus(&(st_g_rightMotorDirectionControl[0]), DIO_LOW);
    en_a_retFunction &= DIO_setPinStatus(&(st_g_rightMotorDirectionControl[1]), DIO_HIGH);

    return en_a_retFunction;
}
 520:	cf 93       	push	r28
 522:	89 e8       	ldi	r24, 0x89	; 137
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <DIO_pinInitialize>
 52a:	c8 2f       	mov	r28, r24
 52c:	8a e8       	ldi	r24, 0x8A	; 138
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <DIO_pinInitialize>
 534:	c8 2b       	or	r28, r24
 536:	87 e8       	ldi	r24, 0x87	; 135
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <DIO_pinInitialize>
 53e:	c8 2b       	or	r28, r24
 540:	88 e8       	ldi	r24, 0x88	; 136
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <DIO_pinInitialize>
 548:	8c 2b       	or	r24, r28
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <MOTOR_leftMotorForwardDirection>:
 54e:	cf 93       	push	r28
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	89 e8       	ldi	r24, 0x89	; 137
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
 55a:	c8 2f       	mov	r28, r24
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	8a e8       	ldi	r24, 0x8A	; 138
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
 566:	8c 2b       	or	r24, r28
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <MOTOR_leftMotorBackwardDirection>:
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	89 e8       	ldi	r24, 0x89	; 137
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	8a e8       	ldi	r24, 0x8A	; 138
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	08 95       	ret

00000584 <MOTOR_rightMotorForwardDirection>:
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	87 e8       	ldi	r24, 0x87	; 135
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	88 e8       	ldi	r24, 0x88	; 136
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	08 95       	ret

0000059c <MOTOR_stopMotorDirection>:
en_motorErrorStatus MOTOR_stopMotorDirection()
{
    en_motorErrorStatus   en_a_retFunction = MOTOR_OK;


    en_a_retFunction &= DIO_setPinStatus(&(st_g_leftMotorDirectionControl[0]), DIO_LOW);
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	89 e8       	ldi	r24, 0x89	; 137
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
    en_a_retFunction &= DIO_setPinStatus(&(st_g_leftMotorDirectionControl[1]), DIO_LOW);
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	8a e8       	ldi	r24, 0x8A	; 138
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
    en_a_retFunction &= DIO_setPinStatus(&(st_g_rightMotorDirectionControl[0]), DIO_LOW);
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	87 e8       	ldi	r24, 0x87	; 135
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
    en_a_retFunction &= DIO_setPinStatus(&(st_g_rightMotorDirectionControl[1]), DIO_LOW);
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	88 e8       	ldi	r24, 0x88	; 136
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>

    return en_a_retFunction;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	08 95       	ret

000005c8 <DIO_setPinDirection>:
	{
		en_a_retFunction = DIO_WRONG_INPUT;
	}

	return en_a_retFunction;
}
 5c8:	00 97       	sbiw	r24, 0x00	; 0
 5ca:	09 f4       	brne	.+2      	; 0x5ce <DIO_setPinDirection+0x6>
 5cc:	a5 c0       	rjmp	.+330    	; 0x718 <DIO_setPinDirection+0x150>
 5ce:	fc 01       	movw	r30, r24
 5d0:	20 81       	ld	r18, Z
 5d2:	22 23       	and	r18, r18
 5d4:	0c f4       	brge	.+2      	; 0x5d8 <DIO_setPinDirection+0x10>
 5d6:	a2 c0       	rjmp	.+324    	; 0x71c <DIO_setPinDirection+0x154>
 5d8:	32 2f       	mov	r19, r18
 5da:	33 70       	andi	r19, 0x03	; 3
 5dc:	31 30       	cpi	r19, 0x01	; 1
 5de:	69 f1       	breq	.+90     	; 0x63a <DIO_setPinDirection+0x72>
 5e0:	38 f0       	brcs	.+14     	; 0x5f0 <DIO_setPinDirection+0x28>
 5e2:	32 30       	cpi	r19, 0x02	; 2
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <DIO_setPinDirection+0x20>
 5e6:	4e c0       	rjmp	.+156    	; 0x684 <DIO_setPinDirection+0xbc>
 5e8:	33 30       	cpi	r19, 0x03	; 3
 5ea:	09 f4       	brne	.+2      	; 0x5ee <DIO_setPinDirection+0x26>
 5ec:	70 c0       	rjmp	.+224    	; 0x6ce <DIO_setPinDirection+0x106>
 5ee:	98 c0       	rjmp	.+304    	; 0x720 <DIO_setPinDirection+0x158>
 5f0:	25 fd       	sbrc	r18, 5
 5f2:	12 c0       	rjmp	.+36     	; 0x618 <DIO_setPinDirection+0x50>
 5f4:	3a b3       	in	r19, 0x1a	; 26
 5f6:	fc 01       	movw	r30, r24
 5f8:	20 81       	ld	r18, Z
 5fa:	26 95       	lsr	r18
 5fc:	26 95       	lsr	r18
 5fe:	27 70       	andi	r18, 0x07	; 7
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_setPinDirection+0x42>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	2a 95       	dec	r18
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_setPinDirection+0x3e>
 60e:	80 95       	com	r24
 610:	83 23       	and	r24, r19
 612:	8a bb       	out	0x1a, r24	; 26
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	08 95       	ret
 618:	3a b3       	in	r19, 0x1a	; 26
 61a:	fc 01       	movw	r30, r24
 61c:	20 81       	ld	r18, Z
 61e:	26 95       	lsr	r18
 620:	26 95       	lsr	r18
 622:	27 70       	andi	r18, 0x07	; 7
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_setPinDirection+0x66>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	2a 95       	dec	r18
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_setPinDirection+0x62>
 632:	83 2b       	or	r24, r19
 634:	8a bb       	out	0x1a, r24	; 26
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	08 95       	ret
 63a:	25 fd       	sbrc	r18, 5
 63c:	12 c0       	rjmp	.+36     	; 0x662 <DIO_setPinDirection+0x9a>
 63e:	37 b3       	in	r19, 0x17	; 23
 640:	fc 01       	movw	r30, r24
 642:	20 81       	ld	r18, Z
 644:	26 95       	lsr	r18
 646:	26 95       	lsr	r18
 648:	27 70       	andi	r18, 0x07	; 7
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <DIO_setPinDirection+0x8c>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	2a 95       	dec	r18
 656:	e2 f7       	brpl	.-8      	; 0x650 <DIO_setPinDirection+0x88>
 658:	80 95       	com	r24
 65a:	83 23       	and	r24, r19
 65c:	87 bb       	out	0x17, r24	; 23
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	08 95       	ret
 662:	37 b3       	in	r19, 0x17	; 23
 664:	fc 01       	movw	r30, r24
 666:	20 81       	ld	r18, Z
 668:	26 95       	lsr	r18
 66a:	26 95       	lsr	r18
 66c:	27 70       	andi	r18, 0x07	; 7
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_setPinDirection+0xb0>
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	2a 95       	dec	r18
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_setPinDirection+0xac>
 67c:	83 2b       	or	r24, r19
 67e:	87 bb       	out	0x17, r24	; 23
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	08 95       	ret
 684:	25 fd       	sbrc	r18, 5
 686:	12 c0       	rjmp	.+36     	; 0x6ac <DIO_setPinDirection+0xe4>
 688:	34 b3       	in	r19, 0x14	; 20
 68a:	fc 01       	movw	r30, r24
 68c:	20 81       	ld	r18, Z
 68e:	26 95       	lsr	r18
 690:	26 95       	lsr	r18
 692:	27 70       	andi	r18, 0x07	; 7
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_setPinDirection+0xd6>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	2a 95       	dec	r18
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_setPinDirection+0xd2>
 6a2:	80 95       	com	r24
 6a4:	83 23       	and	r24, r19
 6a6:	84 bb       	out	0x14, r24	; 20
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	08 95       	ret
 6ac:	34 b3       	in	r19, 0x14	; 20
 6ae:	fc 01       	movw	r30, r24
 6b0:	20 81       	ld	r18, Z
 6b2:	26 95       	lsr	r18
 6b4:	26 95       	lsr	r18
 6b6:	27 70       	andi	r18, 0x07	; 7
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_setPinDirection+0xfa>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	2a 95       	dec	r18
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_setPinDirection+0xf6>
 6c6:	83 2b       	or	r24, r19
 6c8:	84 bb       	out	0x14, r24	; 20
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	08 95       	ret
 6ce:	25 fd       	sbrc	r18, 5
 6d0:	12 c0       	rjmp	.+36     	; 0x6f6 <DIO_setPinDirection+0x12e>
 6d2:	31 b3       	in	r19, 0x11	; 17
 6d4:	fc 01       	movw	r30, r24
 6d6:	20 81       	ld	r18, Z
 6d8:	26 95       	lsr	r18
 6da:	26 95       	lsr	r18
 6dc:	27 70       	andi	r18, 0x07	; 7
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <DIO_setPinDirection+0x120>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	2a 95       	dec	r18
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <DIO_setPinDirection+0x11c>
 6ec:	80 95       	com	r24
 6ee:	83 23       	and	r24, r19
 6f0:	81 bb       	out	0x11, r24	; 17
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	08 95       	ret
 6f6:	31 b3       	in	r19, 0x11	; 17
 6f8:	fc 01       	movw	r30, r24
 6fa:	20 81       	ld	r18, Z
 6fc:	26 95       	lsr	r18
 6fe:	26 95       	lsr	r18
 700:	27 70       	andi	r18, 0x07	; 7
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_setPinDirection+0x144>
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	2a 95       	dec	r18
 70e:	e2 f7       	brpl	.-8      	; 0x708 <DIO_setPinDirection+0x140>
 710:	83 2b       	or	r24, r19
 712:	81 bb       	out	0x11, r24	; 17
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	08 95       	ret
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	08 95       	ret
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	08 95       	ret
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	08 95       	ret

00000724 <DIO_setPinStatus>:
 724:	00 97       	sbiw	r24, 0x00	; 0
 726:	09 f4       	brne	.+2      	; 0x72a <DIO_setPinStatus+0x6>
 728:	d9 c0       	rjmp	.+434    	; 0x8dc <__stack+0x7d>
 72a:	dc 01       	movw	r26, r24
 72c:	2c 91       	ld	r18, X
 72e:	22 23       	and	r18, r18
 730:	0c f4       	brge	.+2      	; 0x734 <DIO_setPinStatus+0x10>
 732:	d6 c0       	rjmp	.+428    	; 0x8e0 <__stack+0x81>
 734:	61 70       	andi	r22, 0x01	; 1
 736:	23 70       	andi	r18, 0x03	; 3
 738:	22 30       	cpi	r18, 0x02	; 2
 73a:	09 f4       	brne	.+2      	; 0x73e <DIO_setPinStatus+0x1a>
 73c:	69 c0       	rjmp	.+210    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 73e:	08 f0       	brcs	.+2      	; 0x742 <DIO_setPinStatus+0x1e>
 740:	9a c0       	rjmp	.+308    	; 0x876 <__stack+0x17>
 742:	21 30       	cpi	r18, 0x01	; 1
 744:	91 f1       	breq	.+100    	; 0x7aa <DIO_setPinStatus+0x86>
 746:	4a b3       	in	r20, 0x1a	; 26
 748:	2c 91       	ld	r18, X
 74a:	26 95       	lsr	r18
 74c:	26 95       	lsr	r18
 74e:	27 70       	andi	r18, 0x07	; 7
 750:	e2 2f       	mov	r30, r18
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	da 01       	movw	r26, r20
 756:	02 c0       	rjmp	.+4      	; 0x75c <DIO_setPinStatus+0x38>
 758:	b5 95       	asr	r27
 75a:	a7 95       	ror	r26
 75c:	2a 95       	dec	r18
 75e:	e2 f7       	brpl	.-8      	; 0x758 <DIO_setPinStatus+0x34>
 760:	a0 ff       	sbrs	r26, 0
 762:	c0 c0       	rjmp	.+384    	; 0x8e4 <__stack+0x85>
 764:	61 11       	cpse	r22, r1
 766:	11 c0       	rjmp	.+34     	; 0x78a <DIO_setPinStatus+0x66>
 768:	4b b3       	in	r20, 0x1b	; 27
 76a:	21 e0       	ldi	r18, 0x01	; 1
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_setPinStatus+0x50>
 770:	22 0f       	add	r18, r18
 772:	33 1f       	adc	r19, r19
 774:	ea 95       	dec	r30
 776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_setPinStatus+0x4c>
 778:	20 95       	com	r18
 77a:	24 23       	and	r18, r20
 77c:	2b bb       	out	0x1b, r18	; 27
 77e:	fc 01       	movw	r30, r24
 780:	20 81       	ld	r18, Z
 782:	2f 7b       	andi	r18, 0xBF	; 191
 784:	20 83       	st	Z, r18
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	08 95       	ret
 78a:	4b b3       	in	r20, 0x1b	; 27
 78c:	21 e0       	ldi	r18, 0x01	; 1
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_setPinStatus+0x72>
 792:	22 0f       	add	r18, r18
 794:	33 1f       	adc	r19, r19
 796:	ea 95       	dec	r30
 798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_setPinStatus+0x6e>
 79a:	24 2b       	or	r18, r20
 79c:	2b bb       	out	0x1b, r18	; 27
 79e:	dc 01       	movw	r26, r24
 7a0:	2c 91       	ld	r18, X
 7a2:	20 64       	ori	r18, 0x40	; 64
 7a4:	2c 93       	st	X, r18
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	08 95       	ret
 7aa:	47 b3       	in	r20, 0x17	; 23
 7ac:	fc 01       	movw	r30, r24
 7ae:	20 81       	ld	r18, Z
 7b0:	26 95       	lsr	r18
 7b2:	26 95       	lsr	r18
 7b4:	27 70       	andi	r18, 0x07	; 7
 7b6:	e2 2f       	mov	r30, r18
 7b8:	50 e0       	ldi	r21, 0x00	; 0
 7ba:	da 01       	movw	r26, r20
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <DIO_setPinStatus+0x9e>
 7be:	b5 95       	asr	r27
 7c0:	a7 95       	ror	r26
 7c2:	2a 95       	dec	r18
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <DIO_setPinStatus+0x9a>
 7c6:	a0 ff       	sbrs	r26, 0
 7c8:	8f c0       	rjmp	.+286    	; 0x8e8 <__stack+0x89>
 7ca:	61 11       	cpse	r22, r1
 7cc:	11 c0       	rjmp	.+34     	; 0x7f0 <DIO_setPinStatus+0xcc>
 7ce:	48 b3       	in	r20, 0x18	; 24
 7d0:	21 e0       	ldi	r18, 0x01	; 1
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_setPinStatus+0xb6>
 7d6:	22 0f       	add	r18, r18
 7d8:	33 1f       	adc	r19, r19
 7da:	ea 95       	dec	r30
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_setPinStatus+0xb2>
 7de:	20 95       	com	r18
 7e0:	24 23       	and	r18, r20
 7e2:	28 bb       	out	0x18, r18	; 24
 7e4:	fc 01       	movw	r30, r24
 7e6:	20 81       	ld	r18, Z
 7e8:	2f 7b       	andi	r18, 0xBF	; 191
 7ea:	20 83       	st	Z, r18
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	08 95       	ret
 7f0:	48 b3       	in	r20, 0x18	; 24
 7f2:	21 e0       	ldi	r18, 0x01	; 1
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_setPinStatus+0xd8>
 7f8:	22 0f       	add	r18, r18
 7fa:	33 1f       	adc	r19, r19
 7fc:	ea 95       	dec	r30
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_setPinStatus+0xd4>
 800:	24 2b       	or	r18, r20
 802:	28 bb       	out	0x18, r18	; 24
 804:	dc 01       	movw	r26, r24
 806:	2c 91       	ld	r18, X
 808:	20 64       	ori	r18, 0x40	; 64
 80a:	2c 93       	st	X, r18
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	08 95       	ret
 810:	44 b3       	in	r20, 0x14	; 20
 812:	fc 01       	movw	r30, r24
 814:	20 81       	ld	r18, Z
 816:	26 95       	lsr	r18
 818:	26 95       	lsr	r18
 81a:	27 70       	andi	r18, 0x07	; 7
 81c:	e2 2f       	mov	r30, r18
 81e:	50 e0       	ldi	r21, 0x00	; 0
 820:	da 01       	movw	r26, r20
 822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 824:	b5 95       	asr	r27
 826:	a7 95       	ror	r26
 828:	2a 95       	dec	r18
 82a:	e2 f7       	brpl	.-8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 82c:	a0 ff       	sbrs	r26, 0
 82e:	5e c0       	rjmp	.+188    	; 0x8ec <__stack+0x8d>
 830:	61 11       	cpse	r22, r1
 832:	11 c0       	rjmp	.+34     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 834:	45 b3       	in	r20, 0x15	; 21
 836:	21 e0       	ldi	r18, 0x01	; 1
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83c:	22 0f       	add	r18, r18
 83e:	33 1f       	adc	r19, r19
 840:	ea 95       	dec	r30
 842:	e2 f7       	brpl	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 844:	20 95       	com	r18
 846:	24 23       	and	r18, r20
 848:	25 bb       	out	0x15, r18	; 21
 84a:	fc 01       	movw	r30, r24
 84c:	20 81       	ld	r18, Z
 84e:	2f 7b       	andi	r18, 0xBF	; 191
 850:	20 83       	st	Z, r18
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	08 95       	ret
 856:	45 b3       	in	r20, 0x15	; 21
 858:	21 e0       	ldi	r18, 0x01	; 1
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	22 0f       	add	r18, r18
 860:	33 1f       	adc	r19, r19
 862:	ea 95       	dec	r30
 864:	e2 f7       	brpl	.-8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 866:	24 2b       	or	r18, r20
 868:	25 bb       	out	0x15, r18	; 21
 86a:	dc 01       	movw	r26, r24
 86c:	2c 91       	ld	r18, X
 86e:	20 64       	ori	r18, 0x40	; 64
 870:	2c 93       	st	X, r18
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	08 95       	ret
 876:	41 b3       	in	r20, 0x11	; 17
 878:	fc 01       	movw	r30, r24
 87a:	20 81       	ld	r18, Z
 87c:	26 95       	lsr	r18
 87e:	26 95       	lsr	r18
 880:	27 70       	andi	r18, 0x07	; 7
 882:	e2 2f       	mov	r30, r18
 884:	50 e0       	ldi	r21, 0x00	; 0
 886:	da 01       	movw	r26, r20
 888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
 88a:	b5 95       	asr	r27
 88c:	a7 95       	ror	r26
 88e:	2a 95       	dec	r18
 890:	e2 f7       	brpl	.-8      	; 0x88a <__stack+0x2b>
 892:	a0 ff       	sbrs	r26, 0
 894:	2d c0       	rjmp	.+90     	; 0x8f0 <__stack+0x91>
 896:	61 11       	cpse	r22, r1
 898:	11 c0       	rjmp	.+34     	; 0x8bc <__stack+0x5d>
 89a:	42 b3       	in	r20, 0x12	; 18
 89c:	21 e0       	ldi	r18, 0x01	; 1
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
 8a2:	22 0f       	add	r18, r18
 8a4:	33 1f       	adc	r19, r19
 8a6:	ea 95       	dec	r30
 8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
 8aa:	20 95       	com	r18
 8ac:	24 23       	and	r18, r20
 8ae:	22 bb       	out	0x12, r18	; 18
 8b0:	fc 01       	movw	r30, r24
 8b2:	20 81       	ld	r18, Z
 8b4:	2f 7b       	andi	r18, 0xBF	; 191
 8b6:	20 83       	st	Z, r18
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	08 95       	ret
 8bc:	42 b3       	in	r20, 0x12	; 18
 8be:	21 e0       	ldi	r18, 0x01	; 1
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <__stack+0x69>
 8c4:	22 0f       	add	r18, r18
 8c6:	33 1f       	adc	r19, r19
 8c8:	ea 95       	dec	r30
 8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <__stack+0x65>
 8cc:	24 2b       	or	r18, r20
 8ce:	22 bb       	out	0x12, r18	; 18
 8d0:	dc 01       	movw	r26, r24
 8d2:	2c 91       	ld	r18, X
 8d4:	20 64       	ori	r18, 0x40	; 64
 8d6:	2c 93       	st	X, r18
 8d8:	80 e0       	ldi	r24, 0x00	; 0
 8da:	08 95       	ret
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	08 95       	ret
 8e0:	82 e0       	ldi	r24, 0x02	; 2
 8e2:	08 95       	ret
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	08 95       	ret
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	08 95       	ret
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	08 95       	ret
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	08 95       	ret

000008f4 <DIO_pinInitialize>:
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
 8f8:	00 97       	sbiw	r24, 0x00	; 0
 8fa:	81 f0       	breq	.+32     	; 0x91c <DIO_pinInitialize+0x28>
 8fc:	fc 01       	movw	r30, r24
 8fe:	20 81       	ld	r18, Z
 900:	22 23       	and	r18, r18
 902:	74 f0       	brlt	.+28     	; 0x920 <DIO_pinInitialize+0x2c>
 904:	ec 01       	movw	r28, r24
 906:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <DIO_setPinDirection>
 90a:	68 81       	ld	r22, Y
 90c:	66 fb       	bst	r22, 6
 90e:	66 27       	eor	r22, r22
 910:	60 f9       	bld	r22, 0
 912:	ce 01       	movw	r24, r28
 914:	0e 94 92 03 	call	0x724	; 0x724 <DIO_setPinStatus>
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	03 c0       	rjmp	.+6      	; 0x922 <DIO_pinInitialize+0x2e>
 91c:	82 e0       	ldi	r24, 0x02	; 2
 91e:	01 c0       	rjmp	.+2      	; 0x922 <DIO_pinInitialize+0x2e>
 920:	82 e0       	ldi	r24, 0x02	; 2
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	08 95       	ret

00000928 <DIO_setPinPullupResistor>:
/* pin      : pin0 ..7       									              */
/******************************************************************************/
en_dioErrorStatus DIO_setPinPullupResistor(const st_pinConfig* st_a_pinConfig)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
	if (st_a_pinConfig != NULL)
 928:	00 97       	sbiw	r24, 0x00	; 0
 92a:	09 f4       	brne	.+2      	; 0x92e <DIO_setPinPullupResistor+0x6>
 92c:	7f c0       	rjmp	.+254    	; 0xa2c <DIO_setPinPullupResistor+0x104>
	{
		if (st_a_pinConfig->u8_g_reserved == DIO_UNLOCK)
 92e:	fc 01       	movw	r30, r24
 930:	20 81       	ld	r18, Z
 932:	22 23       	and	r18, r18
 934:	0c f4       	brge	.+2      	; 0x938 <DIO_setPinPullupResistor+0x10>
 936:	7c c0       	rjmp	.+248    	; 0xa30 <DIO_setPinPullupResistor+0x108>
		{
			switch (st_a_pinConfig->u8_g_port)
 938:	23 70       	andi	r18, 0x03	; 3
 93a:	22 30       	cpi	r18, 0x02	; 2
 93c:	e9 f1       	breq	.+122    	; 0x9b8 <DIO_setPinPullupResistor+0x90>
 93e:	08 f0       	brcs	.+2      	; 0x942 <DIO_setPinPullupResistor+0x1a>
 940:	58 c0       	rjmp	.+176    	; 0x9f2 <DIO_setPinPullupResistor+0xca>
 942:	21 30       	cpi	r18, 0x01	; 1
 944:	e1 f0       	breq	.+56     	; 0x97e <DIO_setPinPullupResistor+0x56>
			{
			case PORTA_INDEX:
				if (GET_BIT(DIO_DDRA, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
 946:	2a b3       	in	r18, 0x1a	; 26
 948:	80 81       	ld	r24, Z
 94a:	86 95       	lsr	r24
 94c:	86 95       	lsr	r24
 94e:	87 70       	andi	r24, 0x07	; 7
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	08 2e       	mov	r0, r24
 954:	02 c0       	rjmp	.+4      	; 0x95a <DIO_setPinPullupResistor+0x32>
 956:	35 95       	asr	r19
 958:	27 95       	ror	r18
 95a:	0a 94       	dec	r0
 95c:	e2 f7       	brpl	.-8      	; 0x956 <DIO_setPinPullupResistor+0x2e>
 95e:	20 fd       	sbrc	r18, 0
 960:	69 c0       	rjmp	.+210    	; 0xa34 <DIO_setPinPullupResistor+0x10c>
				{
					SET_BIT(DIO_PORTA, st_a_pinConfig->u8_g_pin);
 962:	4b b3       	in	r20, 0x1b	; 27
 964:	21 e0       	ldi	r18, 0x01	; 1
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	b9 01       	movw	r22, r18
 96a:	02 c0       	rjmp	.+4      	; 0x970 <DIO_setPinPullupResistor+0x48>
 96c:	66 0f       	add	r22, r22
 96e:	77 1f       	adc	r23, r23
 970:	8a 95       	dec	r24
 972:	e2 f7       	brpl	.-8      	; 0x96c <DIO_setPinPullupResistor+0x44>
 974:	cb 01       	movw	r24, r22
 976:	84 2b       	or	r24, r20
 978:	8b bb       	out	0x1b, r24	; 27
/* port     : port0..3												          */
/* pin      : pin0 ..7       									              */
/******************************************************************************/
en_dioErrorStatus DIO_setPinPullupResistor(const st_pinConfig* st_a_pinConfig)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	08 95       	ret
					en_a_retFunction = DIO_NOK;
				}
				break;

			case PORTB_INDEX:
				if (GET_BIT(DIO_DDRB, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
 97e:	27 b3       	in	r18, 0x17	; 23
 980:	fc 01       	movw	r30, r24
 982:	80 81       	ld	r24, Z
 984:	86 95       	lsr	r24
 986:	86 95       	lsr	r24
 988:	87 70       	andi	r24, 0x07	; 7
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	08 2e       	mov	r0, r24
 98e:	02 c0       	rjmp	.+4      	; 0x994 <DIO_setPinPullupResistor+0x6c>
 990:	35 95       	asr	r19
 992:	27 95       	ror	r18
 994:	0a 94       	dec	r0
 996:	e2 f7       	brpl	.-8      	; 0x990 <DIO_setPinPullupResistor+0x68>
 998:	20 fd       	sbrc	r18, 0
 99a:	4e c0       	rjmp	.+156    	; 0xa38 <DIO_setPinPullupResistor+0x110>
				{
					SET_BIT(DIO_PORTB, st_a_pinConfig->u8_g_pin);
 99c:	48 b3       	in	r20, 0x18	; 24
 99e:	21 e0       	ldi	r18, 0x01	; 1
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	b9 01       	movw	r22, r18
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <DIO_setPinPullupResistor+0x82>
 9a6:	66 0f       	add	r22, r22
 9a8:	77 1f       	adc	r23, r23
 9aa:	8a 95       	dec	r24
 9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <DIO_setPinPullupResistor+0x7e>
 9ae:	cb 01       	movw	r24, r22
 9b0:	84 2b       	or	r24, r20
 9b2:	88 bb       	out	0x18, r24	; 24
/* port     : port0..3												          */
/* pin      : pin0 ..7       									              */
/******************************************************************************/
en_dioErrorStatus DIO_setPinPullupResistor(const st_pinConfig* st_a_pinConfig)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	08 95       	ret
					en_a_retFunction = DIO_NOK;
				}
				break;

			case PORTC_INDEX:
				if (GET_BIT(DIO_DDRC, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
 9b8:	24 b3       	in	r18, 0x14	; 20
 9ba:	fc 01       	movw	r30, r24
 9bc:	80 81       	ld	r24, Z
 9be:	86 95       	lsr	r24
 9c0:	86 95       	lsr	r24
 9c2:	87 70       	andi	r24, 0x07	; 7
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	08 2e       	mov	r0, r24
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <DIO_setPinPullupResistor+0xa6>
 9ca:	35 95       	asr	r19
 9cc:	27 95       	ror	r18
 9ce:	0a 94       	dec	r0
 9d0:	e2 f7       	brpl	.-8      	; 0x9ca <DIO_setPinPullupResistor+0xa2>
 9d2:	20 fd       	sbrc	r18, 0
 9d4:	33 c0       	rjmp	.+102    	; 0xa3c <DIO_setPinPullupResistor+0x114>
				{
					SET_BIT(DIO_PORTC, st_a_pinConfig->u8_g_pin);
 9d6:	45 b3       	in	r20, 0x15	; 21
 9d8:	21 e0       	ldi	r18, 0x01	; 1
 9da:	30 e0       	ldi	r19, 0x00	; 0
 9dc:	b9 01       	movw	r22, r18
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <DIO_setPinPullupResistor+0xbc>
 9e0:	66 0f       	add	r22, r22
 9e2:	77 1f       	adc	r23, r23
 9e4:	8a 95       	dec	r24
 9e6:	e2 f7       	brpl	.-8      	; 0x9e0 <DIO_setPinPullupResistor+0xb8>
 9e8:	cb 01       	movw	r24, r22
 9ea:	84 2b       	or	r24, r20
 9ec:	85 bb       	out	0x15, r24	; 21
/* port     : port0..3												          */
/* pin      : pin0 ..7       									              */
/******************************************************************************/
en_dioErrorStatus DIO_setPinPullupResistor(const st_pinConfig* st_a_pinConfig)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	08 95       	ret
					en_a_retFunction = DIO_NOK;
				}
				break;

			case PORTD_INDEX:
				if (GET_BIT(DIO_DDRD, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
 9f2:	21 b3       	in	r18, 0x11	; 17
 9f4:	fc 01       	movw	r30, r24
 9f6:	80 81       	ld	r24, Z
 9f8:	86 95       	lsr	r24
 9fa:	86 95       	lsr	r24
 9fc:	87 70       	andi	r24, 0x07	; 7
 9fe:	30 e0       	ldi	r19, 0x00	; 0
 a00:	08 2e       	mov	r0, r24
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_setPinPullupResistor+0xe0>
 a04:	35 95       	asr	r19
 a06:	27 95       	ror	r18
 a08:	0a 94       	dec	r0
 a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_setPinPullupResistor+0xdc>
 a0c:	20 fd       	sbrc	r18, 0
 a0e:	18 c0       	rjmp	.+48     	; 0xa40 <DIO_setPinPullupResistor+0x118>
				{
					SET_BIT(DIO_PORTD, st_a_pinConfig->u8_g_pin);
 a10:	42 b3       	in	r20, 0x12	; 18
 a12:	21 e0       	ldi	r18, 0x01	; 1
 a14:	30 e0       	ldi	r19, 0x00	; 0
 a16:	b9 01       	movw	r22, r18
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <DIO_setPinPullupResistor+0xf6>
 a1a:	66 0f       	add	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	8a 95       	dec	r24
 a20:	e2 f7       	brpl	.-8      	; 0xa1a <DIO_setPinPullupResistor+0xf2>
 a22:	cb 01       	movw	r24, r22
 a24:	84 2b       	or	r24, r20
 a26:	82 bb       	out	0x12, r24	; 18
/* port     : port0..3												          */
/* pin      : pin0 ..7       									              */
/******************************************************************************/
en_dioErrorStatus DIO_setPinPullupResistor(const st_pinConfig* st_a_pinConfig)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 a28:	80 e0       	ldi	r24, 0x00	; 0
 a2a:	08 95       	ret
		}

	}
	else
	{
		en_a_retFunction = DIO_WRONG_INPUT;
 a2c:	82 e0       	ldi	r24, 0x02	; 2
 a2e:	08 95       	ret
				break;
			}
		}
		else  /* Wrong data casted to pinConfig struct */
		{
			en_a_retFunction = DIO_WRONG_INPUT;
 a30:	82 e0       	ldi	r24, 0x02	; 2
 a32:	08 95       	ret
				{
					SET_BIT(DIO_PORTA, st_a_pinConfig->u8_g_pin);
				}
				else
				{
					en_a_retFunction = DIO_NOK;
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	08 95       	ret
				{
					SET_BIT(DIO_PORTB, st_a_pinConfig->u8_g_pin);
				}
				else
				{
					en_a_retFunction = DIO_NOK;
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	08 95       	ret
				{
					SET_BIT(DIO_PORTC, st_a_pinConfig->u8_g_pin);
				}
				else
				{
					en_a_retFunction = DIO_NOK;
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	08 95       	ret
				{
					SET_BIT(DIO_PORTD, st_a_pinConfig->u8_g_pin);
				}
				else
				{
					en_a_retFunction = DIO_NOK;
 a40:	81 e0       	ldi	r24, 0x01	; 1
	{
		en_a_retFunction = DIO_WRONG_INPUT;
	}

	return en_a_retFunction;
}
 a42:	08 95       	ret

00000a44 <EXTI_interruptInit>:
			//if the user pass unknown source of external interrupt to the function
			u8_a_retFunction = EXTI_WRONG_DATA;
		}
	}
	return u8_a_retFunction;
}
 a44:	cf 93       	push	r28
 a46:	00 97       	sbiw	r24, 0x00	; 0
 a48:	09 f4       	brne	.+2      	; 0xa4c <EXTI_interruptInit+0x8>
 a4a:	72 c0       	rjmp	.+228    	; 0xb30 <EXTI_interruptInit+0xec>
 a4c:	fc 01       	movw	r30, r24
 a4e:	83 81       	ldd	r24, Z+3	; 0x03
 a50:	81 11       	cpse	r24, r1
 a52:	36 c0       	rjmp	.+108    	; 0xac0 <EXTI_interruptInit+0x7c>
 a54:	82 81       	ldd	r24, Z+2	; 0x02
 a56:	81 11       	cpse	r24, r1
 a58:	08 c0       	rjmp	.+16     	; 0xa6a <EXTI_interruptInit+0x26>
 a5a:	85 b7       	in	r24, 0x35	; 53
 a5c:	8e 7f       	andi	r24, 0xFE	; 254
 a5e:	85 bf       	out	0x35, r24	; 53
 a60:	85 b7       	in	r24, 0x35	; 53
 a62:	8d 7f       	andi	r24, 0xFD	; 253
 a64:	85 bf       	out	0x35, r24	; 53
 a66:	c0 e0       	ldi	r28, 0x00	; 0
 a68:	1f c0       	rjmp	.+62     	; 0xaa8 <EXTI_interruptInit+0x64>
 a6a:	81 30       	cpi	r24, 0x01	; 1
 a6c:	41 f4       	brne	.+16     	; 0xa7e <EXTI_interruptInit+0x3a>
 a6e:	85 b7       	in	r24, 0x35	; 53
 a70:	81 60       	ori	r24, 0x01	; 1
 a72:	85 bf       	out	0x35, r24	; 53
 a74:	85 b7       	in	r24, 0x35	; 53
 a76:	8d 7f       	andi	r24, 0xFD	; 253
 a78:	85 bf       	out	0x35, r24	; 53
 a7a:	c0 e0       	ldi	r28, 0x00	; 0
 a7c:	15 c0       	rjmp	.+42     	; 0xaa8 <EXTI_interruptInit+0x64>
 a7e:	83 30       	cpi	r24, 0x03	; 3
 a80:	41 f4       	brne	.+16     	; 0xa92 <EXTI_interruptInit+0x4e>
 a82:	85 b7       	in	r24, 0x35	; 53
 a84:	81 60       	ori	r24, 0x01	; 1
 a86:	85 bf       	out	0x35, r24	; 53
 a88:	85 b7       	in	r24, 0x35	; 53
 a8a:	82 60       	ori	r24, 0x02	; 2
 a8c:	85 bf       	out	0x35, r24	; 53
 a8e:	c0 e0       	ldi	r28, 0x00	; 0
 a90:	0b c0       	rjmp	.+22     	; 0xaa8 <EXTI_interruptInit+0x64>
 a92:	82 30       	cpi	r24, 0x02	; 2
 a94:	41 f4       	brne	.+16     	; 0xaa6 <EXTI_interruptInit+0x62>
 a96:	85 b7       	in	r24, 0x35	; 53
 a98:	8e 7f       	andi	r24, 0xFE	; 254
 a9a:	85 bf       	out	0x35, r24	; 53
 a9c:	85 b7       	in	r24, 0x35	; 53
 a9e:	82 60       	ori	r24, 0x02	; 2
 aa0:	85 bf       	out	0x35, r24	; 53
 aa2:	c0 e0       	ldi	r28, 0x00	; 0
 aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <EXTI_interruptInit+0x64>
 aa6:	c2 e0       	ldi	r28, 0x02	; 2
 aa8:	80 81       	ld	r24, Z
 aaa:	91 81       	ldd	r25, Z+1	; 0x01
 aac:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <v_gs_ptrfuncInt0+0x1>
 ab0:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <v_gs_ptrfuncInt0>
 ab4:	8b b7       	in	r24, 0x3b	; 59
 ab6:	80 64       	ori	r24, 0x40	; 64
 ab8:	8b bf       	out	0x3b, r24	; 59
 aba:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <GIE_enableGeneralInterrupt>
 abe:	3b c0       	rjmp	.+118    	; 0xb36 <EXTI_interruptInit+0xf2>
 ac0:	81 30       	cpi	r24, 0x01	; 1
 ac2:	c1 f5       	brne	.+112    	; 0xb34 <EXTI_interruptInit+0xf0>
 ac4:	82 81       	ldd	r24, Z+2	; 0x02
 ac6:	81 11       	cpse	r24, r1
 ac8:	08 c0       	rjmp	.+16     	; 0xada <EXTI_interruptInit+0x96>
 aca:	85 b7       	in	r24, 0x35	; 53
 acc:	8b 7f       	andi	r24, 0xFB	; 251
 ace:	85 bf       	out	0x35, r24	; 53
 ad0:	85 b7       	in	r24, 0x35	; 53
 ad2:	87 7f       	andi	r24, 0xF7	; 247
 ad4:	85 bf       	out	0x35, r24	; 53
 ad6:	c0 e0       	ldi	r28, 0x00	; 0
 ad8:	1f c0       	rjmp	.+62     	; 0xb18 <EXTI_interruptInit+0xd4>
 ada:	81 30       	cpi	r24, 0x01	; 1
 adc:	41 f4       	brne	.+16     	; 0xaee <EXTI_interruptInit+0xaa>
 ade:	85 b7       	in	r24, 0x35	; 53
 ae0:	84 60       	ori	r24, 0x04	; 4
 ae2:	85 bf       	out	0x35, r24	; 53
 ae4:	85 b7       	in	r24, 0x35	; 53
 ae6:	87 7f       	andi	r24, 0xF7	; 247
 ae8:	85 bf       	out	0x35, r24	; 53
 aea:	c0 e0       	ldi	r28, 0x00	; 0
 aec:	15 c0       	rjmp	.+42     	; 0xb18 <EXTI_interruptInit+0xd4>
 aee:	83 30       	cpi	r24, 0x03	; 3
 af0:	41 f4       	brne	.+16     	; 0xb02 <EXTI_interruptInit+0xbe>
 af2:	85 b7       	in	r24, 0x35	; 53
 af4:	84 60       	ori	r24, 0x04	; 4
 af6:	85 bf       	out	0x35, r24	; 53
 af8:	85 b7       	in	r24, 0x35	; 53
 afa:	88 60       	ori	r24, 0x08	; 8
 afc:	85 bf       	out	0x35, r24	; 53
 afe:	c0 e0       	ldi	r28, 0x00	; 0
 b00:	0b c0       	rjmp	.+22     	; 0xb18 <EXTI_interruptInit+0xd4>
 b02:	82 30       	cpi	r24, 0x02	; 2
 b04:	41 f4       	brne	.+16     	; 0xb16 <EXTI_interruptInit+0xd2>
 b06:	85 b7       	in	r24, 0x35	; 53
 b08:	8b 7f       	andi	r24, 0xFB	; 251
 b0a:	85 bf       	out	0x35, r24	; 53
 b0c:	85 b7       	in	r24, 0x35	; 53
 b0e:	88 60       	ori	r24, 0x08	; 8
 b10:	85 bf       	out	0x35, r24	; 53
 b12:	c0 e0       	ldi	r28, 0x00	; 0
 b14:	01 c0       	rjmp	.+2      	; 0xb18 <EXTI_interruptInit+0xd4>
 b16:	c2 e0       	ldi	r28, 0x02	; 2
 b18:	80 81       	ld	r24, Z
 b1a:	91 81       	ldd	r25, Z+1	; 0x01
 b1c:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <v_gs_ptrfuncInt1+0x1>
 b20:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <v_gs_ptrfuncInt1>
 b24:	8b b7       	in	r24, 0x3b	; 59
 b26:	80 68       	ori	r24, 0x80	; 128
 b28:	8b bf       	out	0x3b, r24	; 59
 b2a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <GIE_enableGeneralInterrupt>
 b2e:	03 c0       	rjmp	.+6      	; 0xb36 <EXTI_interruptInit+0xf2>
 b30:	c1 e0       	ldi	r28, 0x01	; 1
 b32:	01 c0       	rjmp	.+2      	; 0xb36 <EXTI_interruptInit+0xf2>
 b34:	c2 e0       	ldi	r28, 0x02	; 2
 b36:	8c 2f       	mov	r24, r28
 b38:	cf 91       	pop	r28
 b3a:	08 95       	ret

00000b3c <__vector_1>:

//INTERRUPT SERVICE ROUTINE FOR INT0
void __vector_1 (void){
 b3c:	1f 92       	push	r1
 b3e:	0f 92       	push	r0
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	0f 92       	push	r0
 b44:	11 24       	eor	r1, r1
 b46:	2f 93       	push	r18
 b48:	3f 93       	push	r19
 b4a:	4f 93       	push	r20
 b4c:	5f 93       	push	r21
 b4e:	6f 93       	push	r22
 b50:	7f 93       	push	r23
 b52:	8f 93       	push	r24
 b54:	9f 93       	push	r25
 b56:	af 93       	push	r26
 b58:	bf 93       	push	r27
 b5a:	ef 93       	push	r30
 b5c:	ff 93       	push	r31
	// if the pointer to callback function is not null call it
	if(v_gs_ptrfuncInt0 != NULL) 
 b5e:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <v_gs_ptrfuncInt0>
 b62:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <v_gs_ptrfuncInt0+0x1>
 b66:	30 97       	sbiw	r30, 0x00	; 0
 b68:	09 f0       	breq	.+2      	; 0xb6c <__vector_1+0x30>
	{
		v_gs_ptrfuncInt0();
 b6a:	09 95       	icall
	}
	else
	{
		// do nothing
	}
}
 b6c:	ff 91       	pop	r31
 b6e:	ef 91       	pop	r30
 b70:	bf 91       	pop	r27
 b72:	af 91       	pop	r26
 b74:	9f 91       	pop	r25
 b76:	8f 91       	pop	r24
 b78:	7f 91       	pop	r23
 b7a:	6f 91       	pop	r22
 b7c:	5f 91       	pop	r21
 b7e:	4f 91       	pop	r20
 b80:	3f 91       	pop	r19
 b82:	2f 91       	pop	r18
 b84:	0f 90       	pop	r0
 b86:	0f be       	out	0x3f, r0	; 63
 b88:	0f 90       	pop	r0
 b8a:	1f 90       	pop	r1
 b8c:	18 95       	reti

00000b8e <__vector_2>:
//INTERRUPT SERVICE ROUTINE FOR INT0
void __vector_2 (void){
 b8e:	1f 92       	push	r1
 b90:	0f 92       	push	r0
 b92:	0f b6       	in	r0, 0x3f	; 63
 b94:	0f 92       	push	r0
 b96:	11 24       	eor	r1, r1
 b98:	2f 93       	push	r18
 b9a:	3f 93       	push	r19
 b9c:	4f 93       	push	r20
 b9e:	5f 93       	push	r21
 ba0:	6f 93       	push	r22
 ba2:	7f 93       	push	r23
 ba4:	8f 93       	push	r24
 ba6:	9f 93       	push	r25
 ba8:	af 93       	push	r26
 baa:	bf 93       	push	r27
 bac:	ef 93       	push	r30
 bae:	ff 93       	push	r31
	// if the pointer to callback function is not null call it
	if(v_gs_ptrfuncInt1 != NULL) 
 bb0:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <v_gs_ptrfuncInt1>
 bb4:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <v_gs_ptrfuncInt1+0x1>
 bb8:	30 97       	sbiw	r30, 0x00	; 0
 bba:	09 f0       	breq	.+2      	; 0xbbe <__vector_2+0x30>
	{
		v_gs_ptrfuncInt1();
 bbc:	09 95       	icall
	}
	else
	{
		// do nothing
	}
}
 bbe:	ff 91       	pop	r31
 bc0:	ef 91       	pop	r30
 bc2:	bf 91       	pop	r27
 bc4:	af 91       	pop	r26
 bc6:	9f 91       	pop	r25
 bc8:	8f 91       	pop	r24
 bca:	7f 91       	pop	r23
 bcc:	6f 91       	pop	r22
 bce:	5f 91       	pop	r21
 bd0:	4f 91       	pop	r20
 bd2:	3f 91       	pop	r19
 bd4:	2f 91       	pop	r18
 bd6:	0f 90       	pop	r0
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	0f 90       	pop	r0
 bdc:	1f 90       	pop	r1
 bde:	18 95       	reti

00000be0 <GIE_enableGeneralInterrupt>:
/******************************************************************************/

en_gieErrorStatus GIE_enableGeneralInterrupt(void)
{
	en_gieErrorStatus u8_a_retFunction = GIE_OK;
	SET_BIT(SREG, GLOBAL_INTERRUPT_ENABLE_BIT);
 be0:	8f b7       	in	r24, 0x3f	; 63
 be2:	80 68       	ori	r24, 0x80	; 128
 be4:	8f bf       	out	0x3f, r24	; 63
	return u8_a_retFunction;
	
}
 be6:	80 e0       	ldi	r24, 0x00	; 0
 be8:	08 95       	ret

00000bea <TIMER_init>:
**************************************************************************************************************************	
*/

en_timerError TIMER_init(void) {
	en_timerError en_a_retFunction = TIMER_OK;
	TIMSK = 0x00;
 bea:	19 be       	out	0x39, r1	; 57
	TIFR  = 0x00;
 bec:	18 be       	out	0x38, r1	; 56
	TIMSK = (TIMER_0_OC_INTERRUPT << OCIE0) | (TIMER_0_OVF_INTERRUPT << TOIE0)
 bee:	85 e0       	ldi	r24, 0x05	; 5
 bf0:	89 bf       	out	0x39, r24	; 57
	| (TIMER_1_IC_INTERRUPT << TICIE1)
	| (TIMER_1_OCA_INTERRUPT << OCIE1A)
	| (TIMER_1_OCB_INTERRUPT << OCIE1B)
	| (TIMER_1_OVF_INTERRUPT << TOIE1);
	#if TIMER_0 == ENABLE
	TCCR0 = ((TCCR0 & 0x00) | TIMER_0_MODE);
 bf2:	83 b7       	in	r24, 0x33	; 51
 bf4:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 bf6:	12 be       	out	0x32, r1	; 50
	OCR0 = 0x00;
 bf8:	1c be       	out	0x3c, r1	; 60
	#endif
	#if TIMER_1 == ENABLE
	TCCR1A = ((TCCR1A & 0x00) | (TIMER_1_MODE & 0x03));
 bfa:	8f b5       	in	r24, 0x2f	; 47
 bfc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = ((TCCR1B & 0x00) | ((TIMER_1_MODE >> 2) << WGM12));
 bfe:	8e b5       	in	r24, 0x2e	; 46
 c00:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0x00;
 c02:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0x00;
 c04:	1c bc       	out	0x2c, r1	; 44
	OCR1AH = 0x00;
 c06:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0x00;
 c08:	1a bc       	out	0x2a, r1	; 42
	OCR1BH = 0x00;
 c0a:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0x00;
 c0c:	18 bc       	out	0x28, r1	; 40
	ICR1H  = 0x00;
 c0e:	17 bc       	out	0x27, r1	; 39
	ICR1L  = 0x00;
 c10:	16 bc       	out	0x26, r1	; 38
	#endif
	return en_a_retFunction;
}
 c12:	80 e0       	ldi	r24, 0x00	; 0
 c14:	08 95       	ret

00000c16 <TIMER_start>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3){
 c16:	83 30       	cpi	r24, 0x03	; 3
 c18:	88 f4       	brcc	.+34     	; 0xc3c <TIMER_start+0x26>
		switch (u8_a_timerNumber) {
 c1a:	88 23       	and	r24, r24
 c1c:	19 f0       	breq	.+6      	; 0xc24 <TIMER_start+0xe>
 c1e:	81 30       	cpi	r24, 0x01	; 1
 c20:	31 f0       	breq	.+12     	; 0xc2e <TIMER_start+0x18>
 c22:	0e c0       	rjmp	.+28     	; 0xc40 <TIMER_start+0x2a>
			case TIMER_TM0:
			TCCR0 |= (TIMER_0_CLK << CS00);
 c24:	83 b7       	in	r24, 0x33	; 51
 c26:	82 60       	ori	r24, 0x02	; 2
 c28:	83 bf       	out	0x33, r24	; 51
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 c2a:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			TCCR0 |= (TIMER_0_CLK << CS00);
			break;
 c2c:	08 95       	ret
			case TIMER_TM1:
			TCNT1H = 0x00;
 c2e:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0x00;
 c30:	1c bc       	out	0x2c, r1	; 44
			TCCR1B |= (TIMER_1_CLK << CS10);
 c32:	8e b5       	in	r24, 0x2e	; 46
 c34:	83 60       	ori	r24, 0x03	; 3
 c36:	8e bd       	out	0x2e, r24	; 46
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 c38:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case TIMER_TM1:
			TCNT1H = 0x00;
			TCNT1L = 0x00;
			TCCR1B |= (TIMER_1_CLK << CS10);
			break;
 c3a:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 c3c:	81 e0       	ldi	r24, 0x01	; 1
 c3e:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 c40:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 c42:	08 95       	ret

00000c44 <TIMER_stop>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3){
 c44:	83 30       	cpi	r24, 0x03	; 3
 c46:	88 f4       	brcc	.+34     	; 0xc6a <TIMER_stop+0x26>
		switch (u8_a_timerNumber) {
 c48:	88 23       	and	r24, r24
 c4a:	19 f0       	breq	.+6      	; 0xc52 <TIMER_stop+0xe>
 c4c:	81 30       	cpi	r24, 0x01	; 1
 c4e:	31 f0       	breq	.+12     	; 0xc5c <TIMER_stop+0x18>
 c50:	0e c0       	rjmp	.+28     	; 0xc6e <TIMER_stop+0x2a>
			case TIMER_TM0:
			TCCR0 &= 0xF8;
 c52:	83 b7       	in	r24, 0x33	; 51
 c54:	88 7f       	andi	r24, 0xF8	; 248
 c56:	83 bf       	out	0x33, r24	; 51
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 c58:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			TCCR0 &= 0xF8;
			break;
 c5a:	08 95       	ret
			case TIMER_TM1:
			TCCR1B &= 0xF8;
 c5c:	8e b5       	in	r24, 0x2e	; 46
 c5e:	88 7f       	andi	r24, 0xF8	; 248
 c60:	8e bd       	out	0x2e, r24	; 46
			TCNT1H = 0x00;
 c62:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0x00;
 c64:	1c bc       	out	0x2c, r1	; 44
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 c66:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case TIMER_TM1:
			TCCR1B &= 0xF8;
			TCNT1H = 0x00;
			TCNT1L = 0x00;
			break;
 c68:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 c6a:	81 e0       	ldi	r24, 0x01	; 1
 c6c:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 c6e:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 c70:	08 95       	ret

00000c72 <TIMER_read>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3 && u16_a_tTimerValue != NULL){
 c72:	83 30       	cpi	r24, 0x03	; 3
 c74:	d0 f4       	brcc	.+52     	; 0xcaa <TIMER_read+0x38>
 c76:	61 15       	cp	r22, r1
 c78:	71 05       	cpc	r23, r1
 c7a:	c9 f0       	breq	.+50     	; 0xcae <TIMER_read+0x3c>
		switch (u8_a_timerNumber) {
 c7c:	88 23       	and	r24, r24
 c7e:	19 f0       	breq	.+6      	; 0xc86 <TIMER_read+0x14>
 c80:	81 30       	cpi	r24, 0x01	; 1
 c82:	41 f0       	breq	.+16     	; 0xc94 <TIMER_read+0x22>
 c84:	16 c0       	rjmp	.+44     	; 0xcb2 <TIMER_read+0x40>
			case TIMER_TM0:
			*u16_a_tTimerValue = TCNT0;
 c86:	82 b7       	in	r24, 0x32	; 50
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	fb 01       	movw	r30, r22
 c8c:	91 83       	std	Z+1, r25	; 0x01
 c8e:	80 83       	st	Z, r24
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
 c90:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3 && u16_a_tTimerValue != NULL){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			*u16_a_tTimerValue = TCNT0;
			break;
 c92:	08 95       	ret
			case TIMER_TM1:
			*u16_a_tTimerValue = (TCNT1L | (TCNT1H << 8));
 c94:	2c b5       	in	r18, 0x2c	; 44
 c96:	8d b5       	in	r24, 0x2d	; 45
 c98:	90 e0       	ldi	r25, 0x00	; 0
 c9a:	98 2f       	mov	r25, r24
 c9c:	88 27       	eor	r24, r24
 c9e:	82 2b       	or	r24, r18
 ca0:	fb 01       	movw	r30, r22
 ca2:	91 83       	std	Z+1, r25	; 0x01
 ca4:	80 83       	st	Z, r24
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
 ca6:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_TM0:
			*u16_a_tTimerValue = TCNT0;
			break;
			case TIMER_TM1:
			*u16_a_tTimerValue = (TCNT1L | (TCNT1H << 8));
			break;
 ca8:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 caa:	81 e0       	ldi	r24, 0x01	; 1
 cac:	08 95       	ret
 cae:	81 e0       	ldi	r24, 0x01	; 1
 cb0:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
 cb2:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 cb4:	08 95       	ret

00000cb6 <TIMER_preload>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3){
 cb6:	63 30       	cpi	r22, 0x03	; 3
 cb8:	60 f4       	brcc	.+24     	; 0xcd2 <TIMER_preload+0x1c>
		switch (u8_a_timerNumber) {
 cba:	66 23       	and	r22, r22
 cbc:	19 f0       	breq	.+6      	; 0xcc4 <TIMER_preload+0xe>
 cbe:	61 30       	cpi	r22, 0x01	; 1
 cc0:	21 f0       	breq	.+8      	; 0xcca <TIMER_preload+0x14>
 cc2:	09 c0       	rjmp	.+18     	; 0xcd6 <TIMER_preload+0x20>
			case TIMER_TM0:
			TCNT0 = (u8) u16_a_value;
 cc4:	82 bf       	out	0x32, r24	; 50
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 cc6:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			TCNT0 = (u8) u16_a_value;
			break;
 cc8:	08 95       	ret
			case TIMER_TM1:
			TCNT1H = (u8) (u16_a_value >> 8);
 cca:	9d bd       	out	0x2d, r25	; 45
			TCNT1L = (u8) u16_a_value;
 ccc:	8c bd       	out	0x2c, r24	; 44
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 cce:	80 e0       	ldi	r24, 0x00	; 0
			TCNT0 = (u8) u16_a_value;
			break;
			case TIMER_TM1:
			TCNT1H = (u8) (u16_a_value >> 8);
			TCNT1L = (u8) u16_a_value;
			break;
 cd0:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 cd2:	81 e0       	ldi	r24, 0x01	; 1
 cd4:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 cd6:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 cd8:	08 95       	ret

00000cda <TIMER_setCallBack>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_setCallBack(u8 u8_a_timerInterruptNum, void (*v_a_ptr)(void)) {
	en_timerError en_a_retFunction = TIMER_OK;
	if ( NULL == v_a_ptr)
 cda:	61 15       	cp	r22, r1
 cdc:	71 05       	cpc	r23, r1
 cde:	61 f0       	breq	.+24     	; 0xcf8 <TIMER_setCallBack+0x1e>
	{
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	else
	{
		if (u8_a_timerInterruptNum >= 0 && u8_a_timerInterruptNum < 2) 
 ce0:	82 30       	cpi	r24, 0x02	; 2
 ce2:	60 f4       	brcc	.+24     	; 0xcfc <TIMER_setCallBack+0x22>
		{
			v_g_callbackFunc[u8_a_timerInterruptNum] = v_a_ptr;
 ce4:	e8 2f       	mov	r30, r24
 ce6:	f0 e0       	ldi	r31, 0x00	; 0
 ce8:	ee 0f       	add	r30, r30
 cea:	ff 1f       	adc	r31, r31
 cec:	ea 56       	subi	r30, 0x6A	; 106
 cee:	ff 4f       	sbci	r31, 0xFF	; 255
 cf0:	71 83       	std	Z+1, r23	; 0x01
 cf2:	60 83       	st	Z, r22
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_setCallBack(u8 u8_a_timerInterruptNum, void (*v_a_ptr)(void)) {
	en_timerError en_a_retFunction = TIMER_OK;
 cf4:	80 e0       	ldi	r24, 0x00	; 0
 cf6:	08 95       	ret
	if ( NULL == v_a_ptr)
	{
		en_a_retFunction = TIMER_WRONG_INPUT;
 cf8:	81 e0       	ldi	r24, 0x01	; 1
 cfa:	08 95       	ret
		if (u8_a_timerInterruptNum >= 0 && u8_a_timerInterruptNum < 2) 
		{
			v_g_callbackFunc[u8_a_timerInterruptNum] = v_a_ptr;
		} 
		else {
			en_a_retFunction = TIMER_WRONG_INPUT;
 cfc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return en_a_retFunction ;
}
 cfe:	08 95       	ret

00000d00 <__vector_9>:
//TIMER interrupt vectors(ISR Handlers)


/*        timer1 overflow            */
void __vector_9  (void) __attribute__ ((signal, used));                           
void __vector_9(void) {
 d00:	1f 92       	push	r1
 d02:	0f 92       	push	r0
 d04:	0f b6       	in	r0, 0x3f	; 63
 d06:	0f 92       	push	r0
 d08:	11 24       	eor	r1, r1
 d0a:	2f 93       	push	r18
 d0c:	3f 93       	push	r19
 d0e:	4f 93       	push	r20
 d10:	5f 93       	push	r21
 d12:	6f 93       	push	r22
 d14:	7f 93       	push	r23
 d16:	8f 93       	push	r24
 d18:	9f 93       	push	r25
 d1a:	af 93       	push	r26
 d1c:	bf 93       	push	r27
 d1e:	ef 93       	push	r30
 d20:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER1_OVF] != NULL){
 d22:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <v_g_callbackFunc>
 d26:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <v_g_callbackFunc+0x1>
 d2a:	30 97       	sbiw	r30, 0x00	; 0
 d2c:	09 f0       	breq	.+2      	; 0xd30 <__vector_9+0x30>
		v_g_callbackFunc[TIMER1_OVF]();
 d2e:	09 95       	icall
	} else {
		
	}
}
 d30:	ff 91       	pop	r31
 d32:	ef 91       	pop	r30
 d34:	bf 91       	pop	r27
 d36:	af 91       	pop	r26
 d38:	9f 91       	pop	r25
 d3a:	8f 91       	pop	r24
 d3c:	7f 91       	pop	r23
 d3e:	6f 91       	pop	r22
 d40:	5f 91       	pop	r21
 d42:	4f 91       	pop	r20
 d44:	3f 91       	pop	r19
 d46:	2f 91       	pop	r18
 d48:	0f 90       	pop	r0
 d4a:	0f be       	out	0x3f, r0	; 63
 d4c:	0f 90       	pop	r0
 d4e:	1f 90       	pop	r1
 d50:	18 95       	reti

00000d52 <__vector_11>:

/*        timer0 overflow            */
void __vector_11 (void) __attribute__ ((signal, used));                           
void __vector_11(void) {
 d52:	1f 92       	push	r1
 d54:	0f 92       	push	r0
 d56:	0f b6       	in	r0, 0x3f	; 63
 d58:	0f 92       	push	r0
 d5a:	11 24       	eor	r1, r1
 d5c:	2f 93       	push	r18
 d5e:	3f 93       	push	r19
 d60:	4f 93       	push	r20
 d62:	5f 93       	push	r21
 d64:	6f 93       	push	r22
 d66:	7f 93       	push	r23
 d68:	8f 93       	push	r24
 d6a:	9f 93       	push	r25
 d6c:	af 93       	push	r26
 d6e:	bf 93       	push	r27
 d70:	ef 93       	push	r30
 d72:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER0_OVF] != NULL){
 d74:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <v_g_callbackFunc+0x2>
 d78:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <v_g_callbackFunc+0x3>
 d7c:	30 97       	sbiw	r30, 0x00	; 0
 d7e:	09 f0       	breq	.+2      	; 0xd82 <__vector_11+0x30>
	    v_g_callbackFunc[TIMER0_OVF]();
 d80:	09 95       	icall
	} else {
		
	}
 d82:	ff 91       	pop	r31
 d84:	ef 91       	pop	r30
 d86:	bf 91       	pop	r27
 d88:	af 91       	pop	r26
 d8a:	9f 91       	pop	r25
 d8c:	8f 91       	pop	r24
 d8e:	7f 91       	pop	r23
 d90:	6f 91       	pop	r22
 d92:	5f 91       	pop	r21
 d94:	4f 91       	pop	r20
 d96:	3f 91       	pop	r19
 d98:	2f 91       	pop	r18
 d9a:	0f 90       	pop	r0
 d9c:	0f be       	out	0x3f, r0	; 63
 d9e:	0f 90       	pop	r0
 da0:	1f 90       	pop	r1
 da2:	18 95       	reti

00000da4 <main>:

/************************************************************/
int main(void)
{
	// Initialize the application
	APP_init();
 da4:	0e 94 4b 01 	call	0x296	; 0x296 <APP_init>
	
    while (1) 
    {
		// Check if the car system is ON
		if(en_g_carStatus == SYSTEM_ON)
 da8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <en_g_carStatus>
 dac:	81 11       	cpse	r24, r1
 dae:	fc cf       	rjmp	.-8      	; 0xda8 <main+0x4>
		{
			// Check if the half-second stop is not active
			if(u8_g_halfSecondStop != 1)
 db0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <u8_g_halfSecondStop>
 db4:	81 30       	cpi	r24, 0x01	; 1
 db6:	81 f0       	breq	.+32     	; 0xdd8 <main+0x34>
			{
				// Execute the function specified by the current sequence number
				st_g_systemSequence[u8_g_sequenceNumber].ptr_g_Function();
 db8:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <u8_g_sequenceNumber>
 dbc:	90 e0       	ldi	r25, 0x00	; 0
 dbe:	fc 01       	movw	r30, r24
 dc0:	ee 0f       	add	r30, r30
 dc2:	ff 1f       	adc	r31, r31
 dc4:	8e 0f       	add	r24, r30
 dc6:	9f 1f       	adc	r25, r31
 dc8:	fc 01       	movw	r30, r24
 dca:	e7 58       	subi	r30, 0x87	; 135
 dcc:	ff 4f       	sbci	r31, 0xFF	; 255
 dce:	01 90       	ld	r0, Z+
 dd0:	f0 81       	ld	r31, Z
 dd2:	e0 2d       	mov	r30, r0
 dd4:	09 95       	icall
 dd6:	e8 cf       	rjmp	.-48     	; 0xda8 <main+0x4>
			}
			else
			{
				// Temporarily stop the car
				APP_temporaryStop();
 dd8:	0e 94 9a 01 	call	0x334	; 0x334 <APP_temporaryStop>
 ddc:	e5 cf       	rjmp	.-54     	; 0xda8 <main+0x4>

00000dde <_exit>:
 dde:	f8 94       	cli

00000de0 <__stop_program>:
 de0:	ff cf       	rjmp	.-2      	; 0xde0 <__stop_program>
