
4WD-Car-Sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000092a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000092a  000009be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080007e  0080007e  000009dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002782  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de7  00000000  00000000  0000342a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ae  00000000  00000000  00004211  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007f0  00000000  00000000  000059c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e21  00000000  00000000  000061b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022a2  00000000  00000000  00006fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00009273  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_1>
   8:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 27 03 	jmp	0x64e	; 0x64e <__vector_4>
  14:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <__vector_5>
  18:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__vector_6>
  1c:	0c 94 a2 03 	jmp	0x744	; 0x744 <__vector_7>
  20:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_8>
  24:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_9>
  28:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__vector_10>
  2c:	0c 94 46 04 	jmp	0x88c	; 0x88c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 04 	call	0x8de	; 0x8de <main>
  8a:	0c 94 93 04 	jmp	0x926	; 0x926 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_longestSide>:
		
	en_a_appErrorStatus |= GIE_enableGeneralInterrupt();
	en_a_appErrorStatus |= MOTOR_driverInitialize();
		
	return  en_a_appErrorStatus ;
}
  92:	cf 93       	push	r28
  94:	80 e8       	ldi	r24, 0x80	; 128
  96:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <u8_g_pwmDutyCycle>
  9a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <st_g_currentLed>
  9e:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <st_g_currentLed+0x1>
  a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LED_off>
  a6:	c8 2f       	mov	r28, r24
  a8:	89 e6       	ldi	r24, 0x69	; 105
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <st_g_currentLed+0x1>
  b0:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <st_g_currentLed>
  b4:	0e 94 b0 00 	call	0x160	; 0x160 <LED_on>
  b8:	c8 2b       	or	r28, r24
  ba:	0e 94 09 01 	call	0x212	; 0x212 <MOTOR_leftMotorForwardDirection>
  be:	c8 2b       	or	r28, r24
  c0:	0e 94 24 01 	call	0x248	; 0x248 <MOTOR_rightMotorForwardDirection>
  c4:	8c 2b       	or	r24, r28
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <APP_shortestSide>:
  ca:	cf 93       	push	r28
  cc:	8d e4       	ldi	r24, 0x4D	; 77
  ce:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <u8_g_pwmDutyCycle>
  d2:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <st_g_currentLed>
  d6:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <st_g_currentLed+0x1>
  da:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LED_off>
  de:	c8 2f       	mov	r28, r24
  e0:	86 e6       	ldi	r24, 0x66	; 102
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <st_g_currentLed+0x1>
  e8:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <st_g_currentLed>
  ec:	0e 94 b0 00 	call	0x160	; 0x160 <LED_on>
  f0:	c8 2b       	or	r28, r24
  f2:	0e 94 09 01 	call	0x212	; 0x212 <MOTOR_leftMotorForwardDirection>
  f6:	c8 2b       	or	r28, r24
  f8:	0e 94 24 01 	call	0x248	; 0x248 <MOTOR_rightMotorForwardDirection>
  fc:	8c 2b       	or	r24, r28
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <APP_rotate>:
 102:	cf 93       	push	r28
 104:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <st_g_currentLed>
 108:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <st_g_currentLed+0x1>
 10c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LED_off>
 110:	c8 2f       	mov	r28, r24
 112:	80 e6       	ldi	r24, 0x60	; 96
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <st_g_currentLed+0x1>
 11a:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <st_g_currentLed>
 11e:	0e 94 b0 00 	call	0x160	; 0x160 <LED_on>
 122:	c8 2b       	or	r28, r24
 124:	0e 94 18 01 	call	0x230	; 0x230 <MOTOR_leftMotorBackwardDirection>
 128:	c8 2b       	or	r28, r24
 12a:	0e 94 24 01 	call	0x248	; 0x248 <MOTOR_rightMotorForwardDirection>
 12e:	8c 2b       	or	r24, r28
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <APP_temporaryStop>:
	return en_a_appErrorStatus;
}
/******************************************************************/
/*stop car for half second*/
en_appErrorStatus APP_temporaryStop()
{
 134:	cf 93       	push	r28
	en_appErrorStatus en_a_appErrorStatus = APP_OK;
	
	en_a_appErrorStatus |= LED_off(st_g_currentLed);
 136:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <st_g_currentLed>
 13a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <st_g_currentLed+0x1>
 13e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LED_off>
 142:	c8 2f       	mov	r28, r24
	st_g_currentLed    = &st_g_stopLed;
 144:	83 e6       	ldi	r24, 0x63	; 99
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <st_g_currentLed+0x1>
 14c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <st_g_currentLed>
	en_a_appErrorStatus |= LED_on(st_g_currentLed);
 150:	0e 94 b0 00 	call	0x160	; 0x160 <LED_on>
 154:	c8 2b       	or	r28, r24
	
	en_a_appErrorStatus |= MOTOR_stopMotorDirection();
 156:	0e 94 30 01 	call	0x260	; 0x260 <MOTOR_stopMotorDirection>
	return en_a_appErrorStatus;	
}
 15a:	8c 2b       	or	r24, r28
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <LED_on>:
		en_a_retFunction = LED_WRONG_INPUT;
	}
	return en_a_retFunction;
}
en_ledError LED_on(st_leds *st_a_led)
{
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	1f 92       	push	r1
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	fc 01       	movw	r30, r24
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 170:	80 81       	ld	r24, Z
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	c8 f4       	brcc	.+50     	; 0x1a8 <LED_on+0x48>
 176:	91 81       	ldd	r25, Z+1	; 0x01
 178:	98 30       	cpi	r25, 0x08	; 8
 17a:	c0 f4       	brcc	.+48     	; 0x1ac <LED_on+0x4c>
 17c:	8f 01       	movw	r16, r30
		st_pinConfig st_a_ledPin = {st_a_led->port, st_a_led->pin, DIO_DIRECTION_OUTPUT, DIO_HIGH};
 17e:	83 70       	andi	r24, 0x03	; 3
 180:	97 70       	andi	r25, 0x07	; 7
 182:	99 0f       	add	r25, r25
 184:	99 0f       	add	r25, r25
 186:	98 2b       	or	r25, r24
 188:	90 64       	ori	r25, 0x40	; 64
 18a:	99 83       	std	Y+1, r25	; 0x01
		if (DIO_setPinStatus(&st_a_ledPin, DIO_HIGH) == DIO_OK)
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	ce 01       	movw	r24, r28
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
 196:	81 11       	cpse	r24, r1
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <LED_on+0x44>
		{
			st_a_led->state = 2;
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	f8 01       	movw	r30, r16
 19e:	82 83       	std	Z+2, r24	; 0x02
			en_a_retFunction = LED_OK;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <LED_on+0x4e>
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
	return en_a_retFunction;
}
en_ledError LED_on(st_leds *st_a_led)
{
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <LED_on+0x4e>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
		}
		} else {
		en_a_retFunction = LED_WRONG_INPUT;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <LED_on+0x4e>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 1ae:	0f 90       	pop	r0
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <LED_off>:
en_ledError LED_off(st_leds *st_a_led)
{
 1ba:	0f 93       	push	r16
 1bc:	1f 93       	push	r17
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	1f 92       	push	r1
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	fc 01       	movw	r30, r24
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 1ca:	80 81       	ld	r24, Z
 1cc:	84 30       	cpi	r24, 0x04	; 4
 1ce:	c0 f4       	brcc	.+48     	; 0x200 <LED_off+0x46>
 1d0:	91 81       	ldd	r25, Z+1	; 0x01
 1d2:	98 30       	cpi	r25, 0x08	; 8
 1d4:	b8 f4       	brcc	.+46     	; 0x204 <LED_off+0x4a>
 1d6:	8f 01       	movw	r16, r30
		st_pinConfig st_a_ledPin = {st_a_led->port, st_a_led->pin, DIO_DIRECTION_OUTPUT, DIO_LOW};
 1d8:	83 70       	andi	r24, 0x03	; 3
 1da:	97 70       	andi	r25, 0x07	; 7
 1dc:	99 0f       	add	r25, r25
 1de:	99 0f       	add	r25, r25
 1e0:	98 2b       	or	r25, r24
 1e2:	99 83       	std	Y+1, r25	; 0x01
		if (DIO_setPinStatus(&st_a_ledPin, DIO_LOW) == DIO_OK)
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
 1ee:	81 11       	cpse	r24, r1
 1f0:	05 c0       	rjmp	.+10     	; 0x1fc <LED_off+0x42>
		{
			st_a_led->state = 1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	f8 01       	movw	r30, r16
 1f6:	82 83       	std	Z+2, r24	; 0x02
			en_a_retFunction = LED_OK;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <LED_off+0x4c>
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
 1fc:	82 e0       	ldi	r24, 0x02	; 2
	return en_a_retFunction;
}
en_ledError LED_off(st_leds *st_a_led)
{
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <LED_off+0x4c>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
		}
		} else {
		en_a_retFunction = LED_WRONG_INPUT;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	01 c0       	rjmp	.+2      	; 0x206 <LED_off+0x4c>
 204:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 206:	0f 90       	pop	r0
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <MOTOR_leftMotorForwardDirection>:

    en_a_retFunction &= DIO_setPinStatus(&(st_g_rightMotorDirectionControl[0]), DIO_LOW);
    en_a_retFunction &= DIO_setPinStatus(&(st_g_rightMotorDirectionControl[1]), DIO_HIGH);

    return en_a_retFunction;
}
 212:	cf 93       	push	r28
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	8c e7       	ldi	r24, 0x7C	; 124
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
 21e:	c8 2f       	mov	r28, r24
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	8d e7       	ldi	r24, 0x7D	; 125
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
 22a:	8c 2b       	or	r24, r28
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <MOTOR_leftMotorBackwardDirection>:
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	8c e7       	ldi	r24, 0x7C	; 124
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	8d e7       	ldi	r24, 0x7D	; 125
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret

00000248 <MOTOR_rightMotorForwardDirection>:
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	8a e7       	ldi	r24, 0x7A	; 122
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	8b e7       	ldi	r24, 0x7B	; 123
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	08 95       	ret

00000260 <MOTOR_stopMotorDirection>:
en_motorErrorStatus MOTOR_stopMotorDirection()
{
    en_motorErrorStatus   en_a_retFunction = MOTOR_OK;


    en_a_retFunction &= DIO_setPinStatus(&(st_g_leftMotorDirectionControl[0]), DIO_HIGH);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	8c e7       	ldi	r24, 0x7C	; 124
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
    en_a_retFunction &= DIO_setPinStatus(&(st_g_leftMotorDirectionControl[1]), DIO_HIGH);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	8d e7       	ldi	r24, 0x7D	; 125
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
    en_a_retFunction &= DIO_setPinStatus(&(st_g_rightMotorDirectionControl[0]), DIO_HIGH);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	8a e7       	ldi	r24, 0x7A	; 122
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
    en_a_retFunction &= DIO_setPinStatus(&(st_g_rightMotorDirectionControl[1]), DIO_HIGH);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	8b e7       	ldi	r24, 0x7B	; 123
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>

    return en_a_retFunction;
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret

0000028c <DIO_setPinDirection>:
	else
	{
		en_a_retFunction = DIO_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	09 f4       	brne	.+2      	; 0x292 <DIO_setPinDirection+0x6>
 290:	a0 c0       	rjmp	.+320    	; 0x3d2 <DIO_setPinDirection+0x146>
 292:	fc 01       	movw	r30, r24
 294:	20 81       	ld	r18, Z
 296:	22 23       	and	r18, r18
 298:	0c f4       	brge	.+2      	; 0x29c <DIO_setPinDirection+0x10>
 29a:	9d c0       	rjmp	.+314    	; 0x3d6 <DIO_setPinDirection+0x14a>
 29c:	32 2f       	mov	r19, r18
 29e:	33 70       	andi	r19, 0x03	; 3
 2a0:	32 30       	cpi	r19, 0x02	; 2
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <DIO_setPinDirection+0x1a>
 2a4:	4c c0       	rjmp	.+152    	; 0x33e <DIO_setPinDirection+0xb2>
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <DIO_setPinDirection+0x1e>
 2a8:	6f c0       	rjmp	.+222    	; 0x388 <DIO_setPinDirection+0xfc>
 2aa:	31 30       	cpi	r19, 0x01	; 1
 2ac:	19 f1       	breq	.+70     	; 0x2f4 <DIO_setPinDirection+0x68>
 2ae:	25 ff       	sbrs	r18, 5
 2b0:	10 c0       	rjmp	.+32     	; 0x2d2 <DIO_setPinDirection+0x46>
 2b2:	3a b3       	in	r19, 0x1a	; 26
 2b4:	26 95       	lsr	r18
 2b6:	26 95       	lsr	r18
 2b8:	27 70       	andi	r18, 0x07	; 7
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_setPinDirection+0x38>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	2a 95       	dec	r18
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_setPinDirection+0x34>
 2c8:	80 95       	com	r24
 2ca:	83 23       	and	r24, r19
 2cc:	8a bb       	out	0x1a, r24	; 26
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 95       	ret
 2d2:	3a b3       	in	r19, 0x1a	; 26
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 81       	ld	r18, Z
 2d8:	26 95       	lsr	r18
 2da:	26 95       	lsr	r18
 2dc:	27 70       	andi	r18, 0x07	; 7
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_setPinDirection+0x5c>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	2a 95       	dec	r18
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_setPinDirection+0x58>
 2ec:	83 2b       	or	r24, r19
 2ee:	8a bb       	out	0x1a, r24	; 26
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	08 95       	ret
 2f4:	25 ff       	sbrs	r18, 5
 2f6:	12 c0       	rjmp	.+36     	; 0x31c <DIO_setPinDirection+0x90>
 2f8:	37 b3       	in	r19, 0x17	; 23
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 81       	ld	r18, Z
 2fe:	26 95       	lsr	r18
 300:	26 95       	lsr	r18
 302:	27 70       	andi	r18, 0x07	; 7
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_setPinDirection+0x82>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	2a 95       	dec	r18
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_setPinDirection+0x7e>
 312:	80 95       	com	r24
 314:	83 23       	and	r24, r19
 316:	87 bb       	out	0x17, r24	; 23
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	08 95       	ret
 31c:	37 b3       	in	r19, 0x17	; 23
 31e:	fc 01       	movw	r30, r24
 320:	20 81       	ld	r18, Z
 322:	26 95       	lsr	r18
 324:	26 95       	lsr	r18
 326:	27 70       	andi	r18, 0x07	; 7
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_setPinDirection+0xa6>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	2a 95       	dec	r18
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_setPinDirection+0xa2>
 336:	83 2b       	or	r24, r19
 338:	87 bb       	out	0x17, r24	; 23
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	08 95       	ret
 33e:	25 ff       	sbrs	r18, 5
 340:	12 c0       	rjmp	.+36     	; 0x366 <DIO_setPinDirection+0xda>
 342:	34 b3       	in	r19, 0x14	; 20
 344:	fc 01       	movw	r30, r24
 346:	20 81       	ld	r18, Z
 348:	26 95       	lsr	r18
 34a:	26 95       	lsr	r18
 34c:	27 70       	andi	r18, 0x07	; 7
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_setPinDirection+0xcc>
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	2a 95       	dec	r18
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_setPinDirection+0xc8>
 35c:	80 95       	com	r24
 35e:	83 23       	and	r24, r19
 360:	84 bb       	out	0x14, r24	; 20
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	08 95       	ret
 366:	34 b3       	in	r19, 0x14	; 20
 368:	fc 01       	movw	r30, r24
 36a:	20 81       	ld	r18, Z
 36c:	26 95       	lsr	r18
 36e:	26 95       	lsr	r18
 370:	27 70       	andi	r18, 0x07	; 7
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_setPinDirection+0xf0>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	2a 95       	dec	r18
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_setPinDirection+0xec>
 380:	83 2b       	or	r24, r19
 382:	84 bb       	out	0x14, r24	; 20
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	08 95       	ret
 388:	25 ff       	sbrs	r18, 5
 38a:	12 c0       	rjmp	.+36     	; 0x3b0 <DIO_setPinDirection+0x124>
 38c:	31 b3       	in	r19, 0x11	; 17
 38e:	fc 01       	movw	r30, r24
 390:	20 81       	ld	r18, Z
 392:	26 95       	lsr	r18
 394:	26 95       	lsr	r18
 396:	27 70       	andi	r18, 0x07	; 7
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_setPinDirection+0x116>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	2a 95       	dec	r18
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_setPinDirection+0x112>
 3a6:	80 95       	com	r24
 3a8:	83 23       	and	r24, r19
 3aa:	81 bb       	out	0x11, r24	; 17
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 95       	ret
 3b0:	31 b3       	in	r19, 0x11	; 17
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 81       	ld	r18, Z
 3b6:	26 95       	lsr	r18
 3b8:	26 95       	lsr	r18
 3ba:	27 70       	andi	r18, 0x07	; 7
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_setPinDirection+0x13a>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	2a 95       	dec	r18
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_setPinDirection+0x136>
 3ca:	83 2b       	or	r24, r19
 3cc:	81 bb       	out	0x11, r24	; 17
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	08 95       	ret
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	08 95       	ret

000003da <DIO_setPinStatus>:
/* logic    : 0 or 1 if direction = 0                                         */
/******************************************************************************/
en_dioErrorStatus DIO_setPinStatus(st_pinConfig* st_a_pinConfig, en_bitLogic en_a_bitLogic)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
	if (st_a_pinConfig != NULL)
 3da:	00 97       	sbiw	r24, 0x00	; 0
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <DIO_setPinStatus+0x6>
 3de:	d9 c0       	rjmp	.+434    	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
	{
		if (st_a_pinConfig->u8_g_reserved == DIO_UNLOCK)
 3e0:	dc 01       	movw	r26, r24
 3e2:	2c 91       	ld	r18, X
 3e4:	22 23       	and	r18, r18
 3e6:	0c f4       	brge	.+2      	; 0x3ea <DIO_setPinStatus+0x10>
 3e8:	d6 c0       	rjmp	.+428    	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
		{

			en_a_bitLogic &= 1;
 3ea:	61 70       	andi	r22, 0x01	; 1

			switch (st_a_pinConfig->u8_g_port)
 3ec:	23 70       	andi	r18, 0x03	; 3
 3ee:	22 30       	cpi	r18, 0x02	; 2
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <DIO_setPinStatus+0x1a>
 3f2:	69 c0       	rjmp	.+210    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 3f4:	08 f0       	brcs	.+2      	; 0x3f8 <DIO_setPinStatus+0x1e>
 3f6:	9a c0       	rjmp	.+308    	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 3f8:	21 30       	cpi	r18, 0x01	; 1
 3fa:	91 f1       	breq	.+100    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
			{
			case PORTA_INDEX:
				if (GET_BIT(DIO_DDRA, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
 3fc:	4a b3       	in	r20, 0x1a	; 26
 3fe:	2c 91       	ld	r18, X
 400:	26 95       	lsr	r18
 402:	26 95       	lsr	r18
 404:	27 70       	andi	r18, 0x07	; 7
 406:	e2 2f       	mov	r30, r18
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	da 01       	movw	r26, r20
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	b5 95       	asr	r27
 410:	a7 95       	ror	r26
 412:	2a 95       	dec	r18
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	a0 fd       	sbrc	r26, 0
 418:	c0 c0       	rjmp	.+384    	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
				{
					en_a_retFunction = DIO_NOK;
				}
				else
				{
					if (en_a_bitLogic == DIO_LOW)
 41a:	61 11       	cpse	r22, r1
 41c:	11 c0       	rjmp	.+34     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
					{
						CLR_BIT(DIO_PORTA, st_a_pinConfig->u8_g_pin);
 41e:	4b b3       	in	r20, 0x1b	; 27
 420:	21 e0       	ldi	r18, 0x01	; 1
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	ea 95       	dec	r30
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	20 95       	com	r18
 430:	24 23       	and	r18, r20
 432:	2b bb       	out	0x1b, r18	; 27
						st_a_pinConfig->u8_g_logic = DIO_LOW;
 434:	fc 01       	movw	r30, r24
 436:	20 81       	ld	r18, Z
 438:	2f 7b       	andi	r18, 0xBF	; 191
 43a:	20 83       	st	Z, r18
/* pin      : pin0 ..7       									              */
/* logic    : 0 or 1 if direction = 0                                         */
/******************************************************************************/
en_dioErrorStatus DIO_setPinStatus(st_pinConfig* st_a_pinConfig, en_bitLogic en_a_bitLogic)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
						CLR_BIT(DIO_PORTA, st_a_pinConfig->u8_g_pin);
						st_a_pinConfig->u8_g_logic = DIO_LOW;
					}
					else
					{
						SET_BIT(DIO_PORTA, st_a_pinConfig->u8_g_pin);
 440:	4b b3       	in	r20, 0x1b	; 27
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	ea 95       	dec	r30
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	24 2b       	or	r18, r20
 452:	2b bb       	out	0x1b, r18	; 27
						st_a_pinConfig->u8_g_logic = DIO_HIGH;
 454:	dc 01       	movw	r26, r24
 456:	2c 91       	ld	r18, X
 458:	20 64       	ori	r18, 0x40	; 64
 45a:	2c 93       	st	X, r18
/* pin      : pin0 ..7       									              */
/* logic    : 0 or 1 if direction = 0                                         */
/******************************************************************************/
en_dioErrorStatus DIO_setPinStatus(st_pinConfig* st_a_pinConfig, en_bitLogic en_a_bitLogic)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	08 95       	ret
					}
				}
				break;

			case PORTB_INDEX:
				if (GET_BIT(DIO_DDRB, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
 460:	47 b3       	in	r20, 0x17	; 23
 462:	fc 01       	movw	r30, r24
 464:	20 81       	ld	r18, Z
 466:	26 95       	lsr	r18
 468:	26 95       	lsr	r18
 46a:	27 70       	andi	r18, 0x07	; 7
 46c:	e2 2f       	mov	r30, r18
 46e:	50 e0       	ldi	r21, 0x00	; 0
 470:	da 01       	movw	r26, r20
 472:	02 c0       	rjmp	.+4      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 474:	b5 95       	asr	r27
 476:	a7 95       	ror	r26
 478:	2a 95       	dec	r18
 47a:	e2 f7       	brpl	.-8      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 47c:	a0 fd       	sbrc	r26, 0
 47e:	8f c0       	rjmp	.+286    	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
				{
					en_a_retFunction = DIO_NOK;
				}
				else
				{
					if (en_a_bitLogic == DIO_LOW)
 480:	61 11       	cpse	r22, r1
 482:	11 c0       	rjmp	.+34     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
					{
						CLR_BIT(DIO_PORTB, st_a_pinConfig->u8_g_pin);
 484:	48 b3       	in	r20, 0x18	; 24
 486:	21 e0       	ldi	r18, 0x01	; 1
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48c:	22 0f       	add	r18, r18
 48e:	33 1f       	adc	r19, r19
 490:	ea 95       	dec	r30
 492:	e2 f7       	brpl	.-8      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 494:	20 95       	com	r18
 496:	24 23       	and	r18, r20
 498:	28 bb       	out	0x18, r18	; 24
						st_a_pinConfig->u8_g_logic = DIO_LOW;
 49a:	fc 01       	movw	r30, r24
 49c:	20 81       	ld	r18, Z
 49e:	2f 7b       	andi	r18, 0xBF	; 191
 4a0:	20 83       	st	Z, r18
/* pin      : pin0 ..7       									              */
/* logic    : 0 or 1 if direction = 0                                         */
/******************************************************************************/
en_dioErrorStatus DIO_setPinStatus(st_pinConfig* st_a_pinConfig, en_bitLogic en_a_bitLogic)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	08 95       	ret
						CLR_BIT(DIO_PORTB, st_a_pinConfig->u8_g_pin);
						st_a_pinConfig->u8_g_logic = DIO_LOW;
					}
					else
					{
						SET_BIT(DIO_PORTB, st_a_pinConfig->u8_g_pin);
 4a6:	48 b3       	in	r20, 0x18	; 24
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ae:	22 0f       	add	r18, r18
 4b0:	33 1f       	adc	r19, r19
 4b2:	ea 95       	dec	r30
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	24 2b       	or	r18, r20
 4b8:	28 bb       	out	0x18, r18	; 24
						st_a_pinConfig->u8_g_logic = DIO_HIGH;
 4ba:	dc 01       	movw	r26, r24
 4bc:	2c 91       	ld	r18, X
 4be:	20 64       	ori	r18, 0x40	; 64
 4c0:	2c 93       	st	X, r18
/* pin      : pin0 ..7       									              */
/* logic    : 0 or 1 if direction = 0                                         */
/******************************************************************************/
en_dioErrorStatus DIO_setPinStatus(st_pinConfig* st_a_pinConfig, en_bitLogic en_a_bitLogic)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	08 95       	ret
					}
				}
				break;

			case PORTC_INDEX:
				if (GET_BIT(DIO_DDRC, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
 4c6:	44 b3       	in	r20, 0x14	; 20
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 81       	ld	r18, Z
 4cc:	26 95       	lsr	r18
 4ce:	26 95       	lsr	r18
 4d0:	27 70       	andi	r18, 0x07	; 7
 4d2:	e2 2f       	mov	r30, r18
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	da 01       	movw	r26, r20
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4da:	b5 95       	asr	r27
 4dc:	a7 95       	ror	r26
 4de:	2a 95       	dec	r18
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4e2:	a0 fd       	sbrc	r26, 0
 4e4:	5e c0       	rjmp	.+188    	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
				{
					en_a_retFunction = DIO_NOK;
				}
				else
				{
					if (en_a_bitLogic == DIO_LOW)
 4e6:	61 11       	cpse	r22, r1
 4e8:	11 c0       	rjmp	.+34     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
					{
						CLR_BIT(DIO_PORTC, st_a_pinConfig->u8_g_pin);
 4ea:	45 b3       	in	r20, 0x15	; 21
 4ec:	21 e0       	ldi	r18, 0x01	; 1
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4f2:	22 0f       	add	r18, r18
 4f4:	33 1f       	adc	r19, r19
 4f6:	ea 95       	dec	r30
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4fa:	20 95       	com	r18
 4fc:	24 23       	and	r18, r20
 4fe:	25 bb       	out	0x15, r18	; 21
						st_a_pinConfig->u8_g_logic = DIO_LOW;
 500:	fc 01       	movw	r30, r24
 502:	20 81       	ld	r18, Z
 504:	2f 7b       	andi	r18, 0xBF	; 191
 506:	20 83       	st	Z, r18
/* pin      : pin0 ..7       									              */
/* logic    : 0 or 1 if direction = 0                                         */
/******************************************************************************/
en_dioErrorStatus DIO_setPinStatus(st_pinConfig* st_a_pinConfig, en_bitLogic en_a_bitLogic)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	08 95       	ret
						CLR_BIT(DIO_PORTC, st_a_pinConfig->u8_g_pin);
						st_a_pinConfig->u8_g_logic = DIO_LOW;
					}
					else
					{
						SET_BIT(DIO_PORTC, st_a_pinConfig->u8_g_pin);
 50c:	45 b3       	in	r20, 0x15	; 21
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 514:	22 0f       	add	r18, r18
 516:	33 1f       	adc	r19, r19
 518:	ea 95       	dec	r30
 51a:	e2 f7       	brpl	.-8      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 51c:	24 2b       	or	r18, r20
 51e:	25 bb       	out	0x15, r18	; 21
						st_a_pinConfig->u8_g_logic = DIO_HIGH;
 520:	dc 01       	movw	r26, r24
 522:	2c 91       	ld	r18, X
 524:	20 64       	ori	r18, 0x40	; 64
 526:	2c 93       	st	X, r18
/* pin      : pin0 ..7       									              */
/* logic    : 0 or 1 if direction = 0                                         */
/******************************************************************************/
en_dioErrorStatus DIO_setPinStatus(st_pinConfig* st_a_pinConfig, en_bitLogic en_a_bitLogic)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
					}
				}
				break;

			case PORTD_INDEX:
				if (GET_BIT(DIO_DDRD, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
 52c:	41 b3       	in	r20, 0x11	; 17
 52e:	fc 01       	movw	r30, r24
 530:	20 81       	ld	r18, Z
 532:	26 95       	lsr	r18
 534:	26 95       	lsr	r18
 536:	27 70       	andi	r18, 0x07	; 7
 538:	e2 2f       	mov	r30, r18
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	da 01       	movw	r26, r20
 53e:	02 c0       	rjmp	.+4      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 540:	b5 95       	asr	r27
 542:	a7 95       	ror	r26
 544:	2a 95       	dec	r18
 546:	e2 f7       	brpl	.-8      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 548:	a0 fd       	sbrc	r26, 0
 54a:	2d c0       	rjmp	.+90     	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
				{
					en_a_retFunction = DIO_NOK;
				}
				else
				{
					if (en_a_bitLogic == DIO_LOW)
 54c:	61 11       	cpse	r22, r1
 54e:	11 c0       	rjmp	.+34     	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
					{
						CLR_BIT(DIO_PORTD, st_a_pinConfig->u8_g_pin);
 550:	42 b3       	in	r20, 0x12	; 18
 552:	21 e0       	ldi	r18, 0x01	; 1
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 558:	22 0f       	add	r18, r18
 55a:	33 1f       	adc	r19, r19
 55c:	ea 95       	dec	r30
 55e:	e2 f7       	brpl	.-8      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
 560:	20 95       	com	r18
 562:	24 23       	and	r18, r20
 564:	22 bb       	out	0x12, r18	; 18
						st_a_pinConfig->u8_g_logic = DIO_LOW;
 566:	fc 01       	movw	r30, r24
 568:	20 81       	ld	r18, Z
 56a:	2f 7b       	andi	r18, 0xBF	; 191
 56c:	20 83       	st	Z, r18
/* pin      : pin0 ..7       									              */
/* logic    : 0 or 1 if direction = 0                                         */
/******************************************************************************/
en_dioErrorStatus DIO_setPinStatus(st_pinConfig* st_a_pinConfig, en_bitLogic en_a_bitLogic)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	08 95       	ret
						CLR_BIT(DIO_PORTD, st_a_pinConfig->u8_g_pin);
						st_a_pinConfig->u8_g_logic = DIO_LOW;
					}
					else
					{
						SET_BIT(DIO_PORTD, st_a_pinConfig->u8_g_pin);
 572:	42 b3       	in	r20, 0x12	; 18
 574:	21 e0       	ldi	r18, 0x01	; 1
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
 57a:	22 0f       	add	r18, r18
 57c:	33 1f       	adc	r19, r19
 57e:	ea 95       	dec	r30
 580:	e2 f7       	brpl	.-8      	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 582:	24 2b       	or	r18, r20
 584:	22 bb       	out	0x12, r18	; 18
						st_a_pinConfig->u8_g_logic = DIO_HIGH;
 586:	dc 01       	movw	r26, r24
 588:	2c 91       	ld	r18, X
 58a:	20 64       	ori	r18, 0x40	; 64
 58c:	2c 93       	st	X, r18
/* pin      : pin0 ..7       									              */
/* logic    : 0 or 1 if direction = 0                                         */
/******************************************************************************/
en_dioErrorStatus DIO_setPinStatus(st_pinConfig* st_a_pinConfig, en_bitLogic en_a_bitLogic)
{
	en_dioErrorStatus en_a_retFunction = DIO_OK;
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	08 95       	ret
			en_a_retFunction = DIO_WRONG_INPUT;
		}
	}
	else
	{
		en_a_retFunction = DIO_WRONG_INPUT;
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	08 95       	ret
				break;
			}
		}
		else  /* Wrong data casted to pinConfig struct */
		{
			en_a_retFunction = DIO_WRONG_INPUT;
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	08 95       	ret
			switch (st_a_pinConfig->u8_g_port)
			{
			case PORTA_INDEX:
				if (GET_BIT(DIO_DDRA, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
				{
					en_a_retFunction = DIO_NOK;
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	08 95       	ret
				break;

			case PORTB_INDEX:
				if (GET_BIT(DIO_DDRB, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
				{
					en_a_retFunction = DIO_NOK;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	08 95       	ret
				break;

			case PORTC_INDEX:
				if (GET_BIT(DIO_DDRC, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
				{
					en_a_retFunction = DIO_NOK;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	08 95       	ret
				break;

			case PORTD_INDEX:
				if (GET_BIT(DIO_DDRD, st_a_pinConfig->u8_g_pin) == DIO_DIRECTION_INPUT)
				{
					en_a_retFunction = DIO_NOK;
 5a6:	81 e0       	ldi	r24, 0x01	; 1
		en_a_retFunction = DIO_WRONG_INPUT;
	}

	return en_a_retFunction;

}
 5a8:	08 95       	ret

000005aa <__vector_1>:
	}
	return u8_a_retFunction;
}


void __vector_1 (void){
 5aa:	1f 92       	push	r1
 5ac:	0f 92       	push	r0
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	0f 92       	push	r0
 5b2:	11 24       	eor	r1, r1
 5b4:	2f 93       	push	r18
 5b6:	3f 93       	push	r19
 5b8:	4f 93       	push	r20
 5ba:	5f 93       	push	r21
 5bc:	6f 93       	push	r22
 5be:	7f 93       	push	r23
 5c0:	8f 93       	push	r24
 5c2:	9f 93       	push	r25
 5c4:	af 93       	push	r26
 5c6:	bf 93       	push	r27
 5c8:	ef 93       	push	r30
 5ca:	ff 93       	push	r31
	if(v_gs_ptrfuncInt0 != NULL) 
 5cc:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <v_gs_ptrfuncInt0>
 5d0:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <v_gs_ptrfuncInt0+0x1>
 5d4:	30 97       	sbiw	r30, 0x00	; 0
 5d6:	09 f0       	breq	.+2      	; 0x5da <__vector_1+0x30>
	{
		v_gs_ptrfuncInt0();
 5d8:	09 95       	icall
	}
	else
	{
		// do nothing
	}
}
 5da:	ff 91       	pop	r31
 5dc:	ef 91       	pop	r30
 5de:	bf 91       	pop	r27
 5e0:	af 91       	pop	r26
 5e2:	9f 91       	pop	r25
 5e4:	8f 91       	pop	r24
 5e6:	7f 91       	pop	r23
 5e8:	6f 91       	pop	r22
 5ea:	5f 91       	pop	r21
 5ec:	4f 91       	pop	r20
 5ee:	3f 91       	pop	r19
 5f0:	2f 91       	pop	r18
 5f2:	0f 90       	pop	r0
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	0f 90       	pop	r0
 5f8:	1f 90       	pop	r1
 5fa:	18 95       	reti

000005fc <__vector_2>:
void __vector_2 (void){
 5fc:	1f 92       	push	r1
 5fe:	0f 92       	push	r0
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	0f 92       	push	r0
 604:	11 24       	eor	r1, r1
 606:	2f 93       	push	r18
 608:	3f 93       	push	r19
 60a:	4f 93       	push	r20
 60c:	5f 93       	push	r21
 60e:	6f 93       	push	r22
 610:	7f 93       	push	r23
 612:	8f 93       	push	r24
 614:	9f 93       	push	r25
 616:	af 93       	push	r26
 618:	bf 93       	push	r27
 61a:	ef 93       	push	r30
 61c:	ff 93       	push	r31
	if(v_gs_ptrfuncInt1 != NULL) 
 61e:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <v_gs_ptrfuncInt1>
 622:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <v_gs_ptrfuncInt1+0x1>
 626:	30 97       	sbiw	r30, 0x00	; 0
 628:	09 f0       	breq	.+2      	; 0x62c <__vector_2+0x30>
	{
		v_gs_ptrfuncInt1();
 62a:	09 95       	icall
	}
	else
	{
		// do nothing
	}
}
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0f be       	out	0x3f, r0	; 63
 648:	0f 90       	pop	r0
 64a:	1f 90       	pop	r1
 64c:	18 95       	reti

0000064e <__vector_4>:
			*u16_a_frequency =  (u16) ((d64)((d64)F_CPU / (d64)prescaler)   / (d64) Period);
			*u16_a_timeOn = (u16) ( ( (d64)prescaler / (d64)((d64)F_CPU / 1000000.0) ) * Ton);
	}
	return en_a_retFunction;
}
void __vector_4(void) {
 64e:	1f 92       	push	r1
 650:	0f 92       	push	r0
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	0f 92       	push	r0
 656:	11 24       	eor	r1, r1
 658:	2f 93       	push	r18
 65a:	3f 93       	push	r19
 65c:	4f 93       	push	r20
 65e:	5f 93       	push	r21
 660:	6f 93       	push	r22
 662:	7f 93       	push	r23
 664:	8f 93       	push	r24
 666:	9f 93       	push	r25
 668:	af 93       	push	r26
 66a:	bf 93       	push	r27
 66c:	ef 93       	push	r30
 66e:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER2_COMP] != NULL)
 670:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <v_g_callbackFunc>
 674:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <v_g_callbackFunc+0x1>
 678:	30 97       	sbiw	r30, 0x00	; 0
 67a:	09 f0       	breq	.+2      	; 0x67e <__vector_4+0x30>
	v_g_callbackFunc[TIMER2_COMP]();
 67c:	09 95       	icall
}
 67e:	ff 91       	pop	r31
 680:	ef 91       	pop	r30
 682:	bf 91       	pop	r27
 684:	af 91       	pop	r26
 686:	9f 91       	pop	r25
 688:	8f 91       	pop	r24
 68a:	7f 91       	pop	r23
 68c:	6f 91       	pop	r22
 68e:	5f 91       	pop	r21
 690:	4f 91       	pop	r20
 692:	3f 91       	pop	r19
 694:	2f 91       	pop	r18
 696:	0f 90       	pop	r0
 698:	0f be       	out	0x3f, r0	; 63
 69a:	0f 90       	pop	r0
 69c:	1f 90       	pop	r1
 69e:	18 95       	reti

000006a0 <__vector_5>:
void __vector_5(void) {
 6a0:	1f 92       	push	r1
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	2f 93       	push	r18
 6ac:	3f 93       	push	r19
 6ae:	4f 93       	push	r20
 6b0:	5f 93       	push	r21
 6b2:	6f 93       	push	r22
 6b4:	7f 93       	push	r23
 6b6:	8f 93       	push	r24
 6b8:	9f 93       	push	r25
 6ba:	af 93       	push	r26
 6bc:	bf 93       	push	r27
 6be:	ef 93       	push	r30
 6c0:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER2_OVF] != NULL)
 6c2:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <v_g_callbackFunc+0x2>
 6c6:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <v_g_callbackFunc+0x3>
 6ca:	30 97       	sbiw	r30, 0x00	; 0
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <__vector_5+0x30>
	v_g_callbackFunc[TIMER2_OVF]();
 6ce:	09 95       	icall
}
 6d0:	ff 91       	pop	r31
 6d2:	ef 91       	pop	r30
 6d4:	bf 91       	pop	r27
 6d6:	af 91       	pop	r26
 6d8:	9f 91       	pop	r25
 6da:	8f 91       	pop	r24
 6dc:	7f 91       	pop	r23
 6de:	6f 91       	pop	r22
 6e0:	5f 91       	pop	r21
 6e2:	4f 91       	pop	r20
 6e4:	3f 91       	pop	r19
 6e6:	2f 91       	pop	r18
 6e8:	0f 90       	pop	r0
 6ea:	0f be       	out	0x3f, r0	; 63
 6ec:	0f 90       	pop	r0
 6ee:	1f 90       	pop	r1
 6f0:	18 95       	reti

000006f2 <__vector_6>:
void __vector_6(void) {
 6f2:	1f 92       	push	r1
 6f4:	0f 92       	push	r0
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	0f 92       	push	r0
 6fa:	11 24       	eor	r1, r1
 6fc:	2f 93       	push	r18
 6fe:	3f 93       	push	r19
 700:	4f 93       	push	r20
 702:	5f 93       	push	r21
 704:	6f 93       	push	r22
 706:	7f 93       	push	r23
 708:	8f 93       	push	r24
 70a:	9f 93       	push	r25
 70c:	af 93       	push	r26
 70e:	bf 93       	push	r27
 710:	ef 93       	push	r30
 712:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER1_CAPT] != NULL)
 714:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <v_g_callbackFunc+0x4>
 718:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <v_g_callbackFunc+0x5>
 71c:	30 97       	sbiw	r30, 0x00	; 0
 71e:	09 f0       	breq	.+2      	; 0x722 <__vector_6+0x30>
	v_g_callbackFunc[TIMER1_CAPT]();
 720:	09 95       	icall

}
 722:	ff 91       	pop	r31
 724:	ef 91       	pop	r30
 726:	bf 91       	pop	r27
 728:	af 91       	pop	r26
 72a:	9f 91       	pop	r25
 72c:	8f 91       	pop	r24
 72e:	7f 91       	pop	r23
 730:	6f 91       	pop	r22
 732:	5f 91       	pop	r21
 734:	4f 91       	pop	r20
 736:	3f 91       	pop	r19
 738:	2f 91       	pop	r18
 73a:	0f 90       	pop	r0
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	0f 90       	pop	r0
 740:	1f 90       	pop	r1
 742:	18 95       	reti

00000744 <__vector_7>:
void __vector_7(void) {
 744:	1f 92       	push	r1
 746:	0f 92       	push	r0
 748:	0f b6       	in	r0, 0x3f	; 63
 74a:	0f 92       	push	r0
 74c:	11 24       	eor	r1, r1
 74e:	2f 93       	push	r18
 750:	3f 93       	push	r19
 752:	4f 93       	push	r20
 754:	5f 93       	push	r21
 756:	6f 93       	push	r22
 758:	7f 93       	push	r23
 75a:	8f 93       	push	r24
 75c:	9f 93       	push	r25
 75e:	af 93       	push	r26
 760:	bf 93       	push	r27
 762:	ef 93       	push	r30
 764:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER1_COMPA] != NULL)
 766:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <v_g_callbackFunc+0x6>
 76a:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <v_g_callbackFunc+0x7>
 76e:	30 97       	sbiw	r30, 0x00	; 0
 770:	09 f0       	breq	.+2      	; 0x774 <__vector_7+0x30>
	v_g_callbackFunc[TIMER1_COMPA]();
 772:	09 95       	icall
}
 774:	ff 91       	pop	r31
 776:	ef 91       	pop	r30
 778:	bf 91       	pop	r27
 77a:	af 91       	pop	r26
 77c:	9f 91       	pop	r25
 77e:	8f 91       	pop	r24
 780:	7f 91       	pop	r23
 782:	6f 91       	pop	r22
 784:	5f 91       	pop	r21
 786:	4f 91       	pop	r20
 788:	3f 91       	pop	r19
 78a:	2f 91       	pop	r18
 78c:	0f 90       	pop	r0
 78e:	0f be       	out	0x3f, r0	; 63
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <__vector_8>:
void __vector_8(void) {
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	2f 93       	push	r18
 7a2:	3f 93       	push	r19
 7a4:	4f 93       	push	r20
 7a6:	5f 93       	push	r21
 7a8:	6f 93       	push	r22
 7aa:	7f 93       	push	r23
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	af 93       	push	r26
 7b2:	bf 93       	push	r27
 7b4:	ef 93       	push	r30
 7b6:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER1_COMPB] != NULL)
 7b8:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <v_g_callbackFunc+0x8>
 7bc:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <v_g_callbackFunc+0x9>
 7c0:	30 97       	sbiw	r30, 0x00	; 0
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <__vector_8+0x30>
	v_g_callbackFunc[TIMER1_COMPB]();
 7c4:	09 95       	icall
}
 7c6:	ff 91       	pop	r31
 7c8:	ef 91       	pop	r30
 7ca:	bf 91       	pop	r27
 7cc:	af 91       	pop	r26
 7ce:	9f 91       	pop	r25
 7d0:	8f 91       	pop	r24
 7d2:	7f 91       	pop	r23
 7d4:	6f 91       	pop	r22
 7d6:	5f 91       	pop	r21
 7d8:	4f 91       	pop	r20
 7da:	3f 91       	pop	r19
 7dc:	2f 91       	pop	r18
 7de:	0f 90       	pop	r0
 7e0:	0f be       	out	0x3f, r0	; 63
 7e2:	0f 90       	pop	r0
 7e4:	1f 90       	pop	r1
 7e6:	18 95       	reti

000007e8 <__vector_9>:
void __vector_9(void) {
 7e8:	1f 92       	push	r1
 7ea:	0f 92       	push	r0
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	0f 92       	push	r0
 7f0:	11 24       	eor	r1, r1
 7f2:	2f 93       	push	r18
 7f4:	3f 93       	push	r19
 7f6:	4f 93       	push	r20
 7f8:	5f 93       	push	r21
 7fa:	6f 93       	push	r22
 7fc:	7f 93       	push	r23
 7fe:	8f 93       	push	r24
 800:	9f 93       	push	r25
 802:	af 93       	push	r26
 804:	bf 93       	push	r27
 806:	ef 93       	push	r30
 808:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER1_OVF] != NULL)
 80a:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <v_g_callbackFunc+0xa>
 80e:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <v_g_callbackFunc+0xb>
 812:	30 97       	sbiw	r30, 0x00	; 0
 814:	09 f0       	breq	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	v_g_callbackFunc[TIMER1_OVF]();
 816:	09 95       	icall
}
 818:	ff 91       	pop	r31
 81a:	ef 91       	pop	r30
 81c:	bf 91       	pop	r27
 81e:	af 91       	pop	r26
 820:	9f 91       	pop	r25
 822:	8f 91       	pop	r24
 824:	7f 91       	pop	r23
 826:	6f 91       	pop	r22
 828:	5f 91       	pop	r21
 82a:	4f 91       	pop	r20
 82c:	3f 91       	pop	r19
 82e:	2f 91       	pop	r18
 830:	0f 90       	pop	r0
 832:	0f be       	out	0x3f, r0	; 63
 834:	0f 90       	pop	r0
 836:	1f 90       	pop	r1
 838:	18 95       	reti

0000083a <__vector_10>:
void __vector_10(void) {
 83a:	1f 92       	push	r1
 83c:	0f 92       	push	r0
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	0f 92       	push	r0
 842:	11 24       	eor	r1, r1
 844:	2f 93       	push	r18
 846:	3f 93       	push	r19
 848:	4f 93       	push	r20
 84a:	5f 93       	push	r21
 84c:	6f 93       	push	r22
 84e:	7f 93       	push	r23
 850:	8f 93       	push	r24
 852:	9f 93       	push	r25
 854:	af 93       	push	r26
 856:	bf 93       	push	r27
 858:	ef 93       	push	r30
 85a:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER0_COMP] != NULL)
 85c:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <v_g_callbackFunc+0xc>
 860:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <v_g_callbackFunc+0xd>
 864:	30 97       	sbiw	r30, 0x00	; 0
 866:	09 f0       	breq	.+2      	; 0x86a <__stack+0xb>
	v_g_callbackFunc[TIMER0_COMP]();
 868:	09 95       	icall
}
 86a:	ff 91       	pop	r31
 86c:	ef 91       	pop	r30
 86e:	bf 91       	pop	r27
 870:	af 91       	pop	r26
 872:	9f 91       	pop	r25
 874:	8f 91       	pop	r24
 876:	7f 91       	pop	r23
 878:	6f 91       	pop	r22
 87a:	5f 91       	pop	r21
 87c:	4f 91       	pop	r20
 87e:	3f 91       	pop	r19
 880:	2f 91       	pop	r18
 882:	0f 90       	pop	r0
 884:	0f be       	out	0x3f, r0	; 63
 886:	0f 90       	pop	r0
 888:	1f 90       	pop	r1
 88a:	18 95       	reti

0000088c <__vector_11>:
void __vector_11(void) {
 88c:	1f 92       	push	r1
 88e:	0f 92       	push	r0
 890:	0f b6       	in	r0, 0x3f	; 63
 892:	0f 92       	push	r0
 894:	11 24       	eor	r1, r1
 896:	2f 93       	push	r18
 898:	3f 93       	push	r19
 89a:	4f 93       	push	r20
 89c:	5f 93       	push	r21
 89e:	6f 93       	push	r22
 8a0:	7f 93       	push	r23
 8a2:	8f 93       	push	r24
 8a4:	9f 93       	push	r25
 8a6:	af 93       	push	r26
 8a8:	bf 93       	push	r27
 8aa:	ef 93       	push	r30
 8ac:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER0_OVF] != NULL)
 8ae:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <v_g_callbackFunc+0xe>
 8b2:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <v_g_callbackFunc+0xf>
 8b6:	30 97       	sbiw	r30, 0x00	; 0
 8b8:	09 f0       	breq	.+2      	; 0x8bc <__vector_11+0x30>
	v_g_callbackFunc[TIMER0_OVF]();
 8ba:	09 95       	icall
 8bc:	ff 91       	pop	r31
 8be:	ef 91       	pop	r30
 8c0:	bf 91       	pop	r27
 8c2:	af 91       	pop	r26
 8c4:	9f 91       	pop	r25
 8c6:	8f 91       	pop	r24
 8c8:	7f 91       	pop	r23
 8ca:	6f 91       	pop	r22
 8cc:	5f 91       	pop	r21
 8ce:	4f 91       	pop	r20
 8d0:	3f 91       	pop	r19
 8d2:	2f 91       	pop	r18
 8d4:	0f 90       	pop	r0
 8d6:	0f be       	out	0x3f, r0	; 63
 8d8:	0f 90       	pop	r0
 8da:	1f 90       	pop	r1
 8dc:	18 95       	reti

000008de <main>:
extern u8 u8_g_sequenceNumber;

/************************************************************/
int main(void)
{
	DIO_setPinDirection((st_pinConfig*){PORTC_INDEX,DIO_PIN7,DIO_DIRECTION_OUTPUT,DIO_HIGH,DIO_UNLOCK});
 8de:	82 e0       	ldi	r24, 0x02	; 2
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 46 01 	call	0x28c	; 0x28c <DIO_setPinDirection>
	DIO_setPinStatus((st_pinConfig*){PORTC_INDEX,DIO_PIN7,DIO_DIRECTION_OUTPUT,DIO_HIGH,DIO_UNLOCK},DIO_HIGH);
 8e6:	61 e0       	ldi	r22, 0x01	; 1
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 ed 01 	call	0x3da	; 0x3da <DIO_setPinStatus>
	LED_on(&led);
	
	APP_init();*/
    while (1) 
    {
		if(en_g_carStatus == SYSTEM_ON)
 8f0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <en_g_carStatus>
 8f4:	81 11       	cpse	r24, r1
 8f6:	fc cf       	rjmp	.-8      	; 0x8f0 <main+0x12>
		{
			if(u8_g_halfSecondStop != 1)
 8f8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 8fc:	81 30       	cpi	r24, 0x01	; 1
 8fe:	81 f0       	breq	.+32     	; 0x920 <main+0x42>
			{
				st_g_systemSequence[u8_g_sequenceNumber].ptr_g_Function();
 900:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <u8_g_sequenceNumber>
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	fc 01       	movw	r30, r24
 908:	ee 0f       	add	r30, r30
 90a:	ff 1f       	adc	r31, r31
 90c:	8e 0f       	add	r24, r30
 90e:	9f 1f       	adc	r25, r31
 910:	fc 01       	movw	r30, r24
 912:	e4 59       	subi	r30, 0x94	; 148
 914:	ff 4f       	sbci	r31, 0xFF	; 255
 916:	01 90       	ld	r0, Z+
 918:	f0 81       	ld	r31, Z
 91a:	e0 2d       	mov	r30, r0
 91c:	09 95       	icall
 91e:	e8 cf       	rjmp	.-48     	; 0x8f0 <main+0x12>
			}
			else
			{
				APP_temporaryStop();
 920:	0e 94 9a 00 	call	0x134	; 0x134 <APP_temporaryStop>
 924:	e5 cf       	rjmp	.-54     	; 0x8f0 <main+0x12>

00000926 <_exit>:
 926:	f8 94       	cli

00000928 <__stop_program>:
 928:	ff cf       	rjmp	.-2      	; 0x928 <__stop_program>
