
4WD-Car-Sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00000cc2  00000d56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080008c  0080008c  00000d82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000db4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000277b  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f37  00000000  00000000  000037bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015a1  00000000  00000000  000046f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005dc  00000000  00000000  00005c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e8f  00000000  00000000  00006270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a66  00000000  00000000  000070ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00008b65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_1>
   8:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 39       	cpi	r26, 0x9C	; 156
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 42 06 	call	0xc84	; 0xc84 <main>
  8a:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_overflowRoutine>:
/********************** FUNCTIONS DEFINITIONS ***************************************/

void APP_overflowRoutine()
{
	static i8 i8_gs_overFlowCounter = 0;
	TIMER_preload(3035,TIMER_TM1); 
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	8b ed       	ldi	r24, 0xDB	; 219
  96:	9b e0       	ldi	r25, 0x0B	; 11
  98:	0e 94 cb 05 	call	0xb96	; 0xb96 <TIMER_preload>
	if (en_g_carStatus == SYSTEM_ON)
  9c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <en_g_carStatus>
  a0:	81 11       	cpse	r24, r1
  a2:	2c c0       	rjmp	.+88     	; 0xfc <APP_overflowRoutine+0x6a>
	{
		i8_gs_overFlowCounter++;
  a4:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <i8_gs_overFlowCounter.1788>
  a8:	2f 5f       	subi	r18, 0xFF	; 255
  aa:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <i8_gs_overFlowCounter.1788>
		if(st_g_systemSequence[u8_g_sequenceNumber].period == i8_gs_overFlowCounter)
  ae:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <u8_g_sequenceNumber>
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fc 01       	movw	r30, r24
  b6:	ee 0f       	add	r30, r30
  b8:	ff 1f       	adc	r31, r31
  ba:	e8 0f       	add	r30, r24
  bc:	f9 1f       	adc	r31, r25
  be:	e7 58       	subi	r30, 0x87	; 135
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	42 81       	ldd	r20, Z+2	; 0x02
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	02 2e       	mov	r0, r18
  c8:	00 0c       	add	r0, r0
  ca:	33 0b       	sbc	r19, r19
  cc:	42 17       	cp	r20, r18
  ce:	53 07       	cpc	r21, r19
  d0:	91 f4       	brne	.+36     	; 0xf6 <APP_overflowRoutine+0x64>
		{
			i8_gs_overFlowCounter=-1;
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <i8_gs_overFlowCounter.1788>
			u8_g_sequenceNumber = (u8_g_sequenceNumber + 1) % SEQUENCE_MAX_NUMBER;
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	83 70       	andi	r24, 0x03	; 3
  dc:	90 78       	andi	r25, 0x80	; 128
  de:	99 23       	and	r25, r25
  e0:	24 f4       	brge	.+8      	; 0xea <APP_overflowRoutine+0x58>
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	8c 6f       	ori	r24, 0xFC	; 252
  e6:	9f 6f       	ori	r25, 0xFF	; 255
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <u8_g_sequenceNumber>
			u8_g_halfSecondStop = 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <u8_g_halfSecondStop>
  f4:	08 95       	ret
		}
		else
		{
			u8_g_halfSecondStop = 0;
  f6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <u8_g_halfSecondStop>
  fa:	08 95       	ret
		}
	}
	else if(en_g_carStatus == START_PRESSED)
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	29 f4       	brne	.+10     	; 0x10a <APP_overflowRoutine+0x78>
	{
		i8_gs_overFlowCounter=-1;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <i8_gs_overFlowCounter.1788>
		en_g_carStatus = SYSTEM_ON;
 106:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <en_g_carStatus>
 10a:	08 95       	ret

0000010c <APP_pwmRoutine>:
 */
void APP_pwmRoutine()
{
	static u8 u8_a_flag = 0;			// Static flag to keep track of the PWM signal state
	// Check the current state of the PWM signal
	if(u8_a_flag == 0){
 10c:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 110:	81 11       	cpse	r24, r1
 112:	14 c0       	rjmp	.+40     	; 0x13c <APP_pwmRoutine+0x30>
		// If the signal is currently low, set it to high and update Timer0 preload value
		DIO_setPinStatus(&st_g_pwmSignalPin, DIO_HIGH);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	88 e7       	ldi	r24, 0x78	; 120
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
		TIMER_preload(255 - u8_g_pwmDutyCycle,TIMER_TM0);
 11e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <u8_g_pwmDutyCycle>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	a9 01       	movw	r20, r18
 12a:	49 1b       	sub	r20, r25
 12c:	51 09       	sbc	r21, r1
 12e:	ca 01       	movw	r24, r20
 130:	0e 94 cb 05 	call	0xb96	; 0xb96 <TIMER_preload>
		u8_a_flag = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 13a:	08 95       	ret
		} else if(u8_a_flag == 1){
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	69 f4       	brne	.+26     	; 0x15a <APP_pwmRoutine+0x4e>
		// If the signal is currently high, set it to low and update Timer0 preload value
		DIO_setPinStatus(&st_g_pwmSignalPin, DIO_LOW);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	88 e7       	ldi	r24, 0x78	; 120
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
		TIMER_preload(u8_g_pwmDutyCycle,TIMER_TM0);
 14a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <u8_g_pwmDutyCycle>
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 cb 05 	call	0xb96	; 0xb96 <TIMER_preload>
		u8_a_flag = 0;
 156:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
 15a:	08 95       	ret

0000015c <APP_systemStart>:
 * and turns it on to indicate that the start button has been pressed. If the system is currently
 * in the OFF state, it starts Timer0 and Timer1, sets the system status to START_PRESSED, and
 * resumes Timer1 with the last recorded value. If the system is already in the ON state, it does nothing.
 */
void APP_systemStart()
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <APP_systemStart+0x6>
 162:	1f 92       	push	r1
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
    // Create an LED object for indication
    st_leds led = {PORTC_INDEX, DIO_PIN0};
 168:	19 82       	std	Y+1, r1	; 0x01
 16a:	1a 82       	std	Y+2, r1	; 0x02
 16c:	1b 82       	std	Y+3, r1	; 0x03
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	89 83       	std	Y+1, r24	; 0x01
    LED_init(&led);
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	0e 94 08 02 	call	0x410	; 0x410 <LED_init>

    // Turn on the LED to indicate the start button press
    LED_on(&led);
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>

    // Check if the system is currently OFF
    if (en_g_carStatus == SYSTEM_OFF)
 182:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <en_g_carStatus>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	79 f4       	brne	.+30     	; 0x1a8 <APP_systemStart+0x4c>
    {
        // Start Timer0 and Timer1
        TIMER_start(TIMER_TM0);
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER_start>
        TIMER_start(TIMER_TM1);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TIMER_start>

        // Set the system status to START_PRESSED
        en_g_carStatus = START_PRESSED;
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <en_g_carStatus>

        // Resume Timer1 with the last recorded value
        TIMER_preload(TIMER_TM1, u16_g_timerLastValue);
 19c:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <u16_g_timerLastValue>
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 cb 05 	call	0xb96	; 0xb96 <TIMER_preload>
    }
    // If the system is already ON, do nothing
}
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <APP_systemStop>:
void APP_systemStop()
{
    en_appErrorStatus en_a_appErrorStatus = APP_OK;

    // Read the last recorded value of Timer1
    TIMER_read(TIMER_TM1, &u16_g_timerLastValue);
 1b4:	6e e8       	ldi	r22, 0x8E	; 142
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 a9 05 	call	0xb52	; 0xb52 <TIMER_read>

    // Stop both Timer0 and Timer1
    TIMER_stop(TIMER_TM0);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 92 05 	call	0xb24	; 0xb24 <TIMER_stop>
    TIMER_stop(TIMER_TM1);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 92 05 	call	0xb24	; 0xb24 <TIMER_stop>

    // Stop the car's motor direction
    MOTOR_stopMotorDirection();
 1ca:	0e 94 cc 02 	call	0x598	; 0x598 <MOTOR_stopMotorDirection>

    // Set the system status to SYSTEM_OFF
    en_g_carStatus = SYSTEM_OFF;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <en_g_carStatus>

    // Turn off the currently active LED (if any) and set it to indicate the stop state
    en_a_appErrorStatus |= LED_off(st_g_currentLed);
 1d4:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <st_g_currentLed>
 1d8:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <st_g_currentLed+0x1>
 1dc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LED_off>
    st_g_currentLed = &st_g_stopLed;
 1e0:	8b e6       	ldi	r24, 0x6B	; 107
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <st_g_currentLed+0x1>
 1e8:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <st_g_currentLed>
    en_a_appErrorStatus |= LED_on(st_g_currentLed);
 1ec:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
 1f0:	08 95       	ret

000001f2 <APP_longestSide>:
 * @return en_appErrorStatus representing the success or failure of the operation.
 *         - APP_OK: Operation successful.
 *         - APP_NOK: Operation failed.
 */
en_appErrorStatus APP_longestSide()
{
 1f2:	cf 93       	push	r28
    u8_g_pwmDutyCycle = 128; // Set the PWM duty cycle to default
 1f4:	80 e8       	ldi	r24, 0x80	; 128
 1f6:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <u8_g_pwmDutyCycle>
    en_appErrorStatus en_a_appErrorStatus = APP_OK;

    // Turn off the currently active LED (if any)
    en_a_appErrorStatus |= LED_off(st_g_currentLed);
 1fa:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <st_g_currentLed>
 1fe:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <st_g_currentLed+0x1>
 202:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LED_off>
 206:	c8 2f       	mov	r28, r24

    // Set the current LED to indicate movement along the longest side
    st_g_currentLed = &st_g_longSideLed;
 208:	81 e7       	ldi	r24, 0x71	; 113
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <st_g_currentLed+0x1>
 210:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <st_g_currentLed>
    en_a_appErrorStatus |= LED_on(st_g_currentLed);
 214:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
 218:	c8 2b       	or	r28, r24

    // Configure the left and right motors for forward direction
    en_a_appErrorStatus |= MOTOR_leftMotorForwardDirection();
 21a:	0e 94 a5 02 	call	0x54a	; 0x54a <MOTOR_leftMotorForwardDirection>
 21e:	c8 2b       	or	r28, r24
    en_a_appErrorStatus |= MOTOR_rightMotorForwardDirection();
 220:	0e 94 c0 02 	call	0x580	; 0x580 <MOTOR_rightMotorForwardDirection>

    return en_a_appErrorStatus;
}
 224:	8c 2b       	or	r24, r28
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <APP_shortestSide>:
 * @return en_appErrorStatus representing the success or failure of the operation.
 *         - APP_OK: Operation successful.
 *         - APP_NOK: Operation failed.
 */
en_appErrorStatus APP_shortestSide()
{
 22a:	cf 93       	push	r28
    u8_g_pwmDutyCycle = 77; // Set the PWM duty cycle for shorter movement
 22c:	8d e4       	ldi	r24, 0x4D	; 77
 22e:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <u8_g_pwmDutyCycle>
    en_appErrorStatus en_a_appErrorStatus = APP_OK;

    // Turn off the currently active LED (if any)
    en_a_appErrorStatus |= LED_off(st_g_currentLed);
 232:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <st_g_currentLed>
 236:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <st_g_currentLed+0x1>
 23a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LED_off>
 23e:	c8 2f       	mov	r28, r24

    // Set the current LED to indicate movement along the shortest side
    st_g_currentLed = &st_g_shortSideLed;
 240:	8e e6       	ldi	r24, 0x6E	; 110
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <st_g_currentLed+0x1>
 248:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <st_g_currentLed>
    en_a_appErrorStatus |= LED_on(st_g_currentLed);
 24c:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
 250:	c8 2b       	or	r28, r24

    // Configure the left and right motors for forward direction
    en_a_appErrorStatus |= MOTOR_leftMotorForwardDirection();
 252:	0e 94 a5 02 	call	0x54a	; 0x54a <MOTOR_leftMotorForwardDirection>
 256:	c8 2b       	or	r28, r24
    en_a_appErrorStatus |= MOTOR_rightMotorForwardDirection();
 258:	0e 94 c0 02 	call	0x580	; 0x580 <MOTOR_rightMotorForwardDirection>

    return en_a_appErrorStatus;
}
 25c:	8c 2b       	or	r24, r28
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <APP_rotate>:
 * @return en_appErrorStatus representing the success or failure of the operation.
 *         - APP_OK: Operation successful.
 *         - APP_NOK: Operation failed.
 */
en_appErrorStatus APP_rotate()
{
 262:	cf 93       	push	r28
    en_appErrorStatus en_a_appErrorStatus = APP_OK;

    // Turn off the currently active LED (if any)
    en_a_appErrorStatus |= LED_off(st_g_currentLed);
 264:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <st_g_currentLed>
 268:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <st_g_currentLed+0x1>
 26c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LED_off>
 270:	c8 2f       	mov	r28, r24

    // Set the current LED to indicate rotation
    st_g_currentLed = &st_g_rotateLed;
 272:	88 e6       	ldi	r24, 0x68	; 104
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <st_g_currentLed+0x1>
 27a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <st_g_currentLed>
    en_a_appErrorStatus |= LED_on(st_g_currentLed);
 27e:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
 282:	c8 2b       	or	r28, r24

    // Configure the motors for rotation (left motor backward and right motor forward)
    en_a_appErrorStatus |= MOTOR_leftMotorBackwardDirection();
 284:	0e 94 b4 02 	call	0x568	; 0x568 <MOTOR_leftMotorBackwardDirection>
 288:	c8 2b       	or	r28, r24
    en_a_appErrorStatus |= MOTOR_rightMotorForwardDirection();
 28a:	0e 94 c0 02 	call	0x580	; 0x580 <MOTOR_rightMotorForwardDirection>

    return en_a_appErrorStatus;
}
 28e:	8c 2b       	or	r24, r28
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <APP_init>:
 * @return en_appErrorStatus representing the success or failure of the initialization.
 *         - APP_OK: Initialization successful.
 *         - APP_NOK: Initialization failed.
 */
en_appErrorStatus APP_init()
{
 294:	cf 93       	push	r28
	en_appErrorStatus en_a_appErrorStatus = APP_OK;

	// Set the direction of the PWM signal pin
	en_a_appErrorStatus |= DIO_setPinDirection(&st_g_pwmSignalPin);
 296:	88 e7       	ldi	r24, 0x78	; 120
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <DIO_setPinDirection>
 29e:	c8 2f       	mov	r28, r24

	// Initialize and connect the start and stop buttons
	en_a_appErrorStatus |= BUTTON_init(&st_g_startButton);
 2a0:	86 e7       	ldi	r24, 0x76	; 118
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 b5 01 	call	0x36a	; 0x36a <BUTTON_init>
 2a8:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= BUTTON_init(&st_g_stopButton);
 2aa:	84 e7       	ldi	r24, 0x74	; 116
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 b5 01 	call	0x36a	; 0x36a <BUTTON_init>
 2b2:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= BUTTON_connectIPU(&st_g_startButton);
 2b4:	86 e7       	ldi	r24, 0x76	; 118
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <BUTTON_connectIPU>
 2bc:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= BUTTON_connectIPU(&st_g_stopButton);
 2be:	84 e7       	ldi	r24, 0x74	; 116
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <BUTTON_connectIPU>
 2c6:	c8 2b       	or	r28, r24

	// Initialize the LEDs
	en_a_appErrorStatus |= LED_init(&st_g_longSideLed);
 2c8:	81 e7       	ldi	r24, 0x71	; 113
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 08 02 	call	0x410	; 0x410 <LED_init>
 2d0:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= LED_init(&st_g_shortSideLed);
 2d2:	8e e6       	ldi	r24, 0x6E	; 110
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 08 02 	call	0x410	; 0x410 <LED_init>
 2da:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= LED_init(&st_g_rotateLed);
 2dc:	88 e6       	ldi	r24, 0x68	; 104
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 08 02 	call	0x410	; 0x410 <LED_init>
 2e4:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= LED_init(&st_g_stopLed);
 2e6:	8b e6       	ldi	r24, 0x6B	; 107
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 08 02 	call	0x410	; 0x410 <LED_init>
 2ee:	c8 2b       	or	r28, r24

	// Initialize and configure external interrupts for start and stop buttons
	en_a_appErrorStatus |= EXTI_interruptInit(&st_g_startInterrupt);
 2f0:	84 e6       	ldi	r24, 0x64	; 100
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 92 04 	call	0x924	; 0x924 <EXTI_interruptInit>
 2f8:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= EXTI_interruptInit(&st_g_stopInterrupt);
 2fa:	80 e6       	ldi	r24, 0x60	; 96
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 92 04 	call	0x924	; 0x924 <EXTI_interruptInit>
 302:	c8 2b       	or	r28, r24

	// Initialize and configure timers
	en_a_appErrorStatus |= TIMER_init();
 304:	0e 94 65 05 	call	0xaca	; 0xaca <TIMER_init>
 308:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= TIMER_setCallBack(TIMER0_OVF, APP_pwmRoutine);
 30a:	66 e8       	ldi	r22, 0x86	; 134
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 dd 05 	call	0xbba	; 0xbba <TIMER_setCallBack>
 314:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= TIMER_setCallBack(TIMER1_OVF, APP_overflowRoutine);
 316:	69 e4       	ldi	r22, 0x49	; 73
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 dd 05 	call	0xbba	; 0xbba <TIMER_setCallBack>
 320:	c8 2b       	or	r28, r24
	en_a_appErrorStatus |= TIMER_preload(231, TIMER_TM0);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	87 ee       	ldi	r24, 0xE7	; 231
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 cb 05 	call	0xb96	; 0xb96 <TIMER_preload>
 32c:	c8 2b       	or	r28, r24

	// Enable global interrupts
	en_a_appErrorStatus |= GIE_enableGeneralInterrupt();
 32e:	0e 94 60 05 	call	0xac0	; 0xac0 <GIE_enableGeneralInterrupt>
 332:	c8 2b       	or	r28, r24

	// Initialize the motor driver
	en_a_appErrorStatus |= MOTOR_driverInitialize();
 334:	0e 94 8e 02 	call	0x51c	; 0x51c <MOTOR_driverInitialize>

	return en_a_appErrorStatus;
}
 338:	8c 2b       	or	r24, r28
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <APP_temporaryStop>:
 * @return en_appErrorStatus representing the success or failure of the operation.
 *         - APP_OK: Operation successful.
 *         - APP_NOK: Operation failed.
 */
en_appErrorStatus APP_temporaryStop()
{
 33e:	cf 93       	push	r28
    en_appErrorStatus en_a_appErrorStatus = APP_OK;

    // Turn off the currently active LED (if any)
    en_a_appErrorStatus |= LED_off(st_g_currentLed);
 340:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <st_g_currentLed>
 344:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <st_g_currentLed+0x1>
 348:	0e 94 61 02 	call	0x4c2	; 0x4c2 <LED_off>
 34c:	c8 2f       	mov	r28, r24

    // Set the current LED to indicate the stop state
    st_g_currentLed = &st_g_stopLed;
 34e:	8b e6       	ldi	r24, 0x6B	; 107
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <st_g_currentLed+0x1>
 356:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <st_g_currentLed>
    en_a_appErrorStatus |= LED_on(st_g_currentLed);
 35a:	0e 94 33 02 	call	0x466	; 0x466 <LED_on>
 35e:	c8 2b       	or	r28, r24

    // Stop the car's motor direction
    en_a_appErrorStatus |= MOTOR_stopMotorDirection();
 360:	0e 94 cc 02 	call	0x598	; 0x598 <MOTOR_stopMotorDirection>

    return en_a_appErrorStatus;
}
 364:	8c 2b       	or	r24, r28
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <BUTTON_init>:
		}
		} else {
		en_a_retFunction = BUTTON_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	1f 92       	push	r1
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	fc 01       	movw	r30, r24
 376:	90 81       	ld	r25, Z
 378:	94 30       	cpi	r25, 0x04	; 4
 37a:	c0 f4       	brcc	.+48     	; 0x3ac <BUTTON_init+0x42>
 37c:	21 81       	ldd	r18, Z+1	; 0x01
 37e:	28 30       	cpi	r18, 0x08	; 8
 380:	b8 f4       	brcc	.+46     	; 0x3b0 <BUTTON_init+0x46>
 382:	89 2f       	mov	r24, r25
 384:	83 70       	andi	r24, 0x03	; 3
 386:	99 81       	ldd	r25, Y+1	; 0x01
 388:	9c 7f       	andi	r25, 0xFC	; 252
 38a:	98 2b       	or	r25, r24
 38c:	27 70       	andi	r18, 0x07	; 7
 38e:	22 0f       	add	r18, r18
 390:	22 0f       	add	r18, r18
 392:	93 7e       	andi	r25, 0xE3	; 227
 394:	92 2b       	or	r25, r18
 396:	9f 79       	andi	r25, 0x9F	; 159
 398:	9f 77       	andi	r25, 0x7F	; 127
 39a:	99 83       	std	Y+1, r25	; 0x01
 39c:	ce 01       	movw	r24, r28
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_pinInitialize>
 3a4:	88 23       	and	r24, r24
 3a6:	29 f0       	breq	.+10     	; 0x3b2 <BUTTON_init+0x48>
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <BUTTON_init+0x48>
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <BUTTON_init+0x48>
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0f 90       	pop	r0
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <BUTTON_connectIPU>:

en_buttonError BUTTON_connectIPU(st_button *st_a_butt){
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	1f 92       	push	r1
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	fc 01       	movw	r30, r24
	en_buttonError en_a_retFunction = BUTTON_OK;
	if(st_a_butt->port <= MAX_PORT_INDEX && st_a_butt->pin <= MAX_PIN_INDEX ){
 3c6:	90 81       	ld	r25, Z
 3c8:	94 30       	cpi	r25, 0x04	; 4
 3ca:	d8 f4       	brcc	.+54     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3cc:	81 81       	ldd	r24, Z+1	; 0x01
 3ce:	88 30       	cpi	r24, 0x08	; 8
 3d0:	d0 f4       	brcc	.+52     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		st_pinConfig st_a_buttonPin = {st_a_butt->port, st_a_butt->pin, DIO_DIRECTION_INPUT, DIO_HIGH,DIO_UNLOCK};
 3d2:	93 70       	andi	r25, 0x03	; 3
 3d4:	29 81       	ldd	r18, Y+1	; 0x01
 3d6:	2c 7f       	andi	r18, 0xFC	; 252
 3d8:	29 2b       	or	r18, r25
 3da:	87 70       	andi	r24, 0x07	; 7
 3dc:	98 2f       	mov	r25, r24
 3de:	99 0f       	add	r25, r25
 3e0:	99 0f       	add	r25, r25
 3e2:	82 2f       	mov	r24, r18
 3e4:	83 7e       	andi	r24, 0xE3	; 227
 3e6:	89 2b       	or	r24, r25
 3e8:	8f 7d       	andi	r24, 0xDF	; 223
 3ea:	80 64       	ori	r24, 0x40	; 64
 3ec:	8f 77       	andi	r24, 0x7F	; 127
 3ee:	89 83       	std	Y+1, r24	; 0x01
		if(DIO_setPinStatus(&st_a_buttonPin, DIO_HIGH) == DIO_OK){
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	ce 01       	movw	r24, r28
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 3fa:	88 23       	and	r24, r24
 3fc:	29 f0       	breq	.+10     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			en_a_retFunction = BUTTON_OK;
			} else {
			en_a_retFunction = BUTTON_OP_FAILED;
 3fe:	82 e0       	ldi	r24, 0x02	; 2
	return en_a_retFunction;
}

en_buttonError BUTTON_connectIPU(st_button *st_a_butt){
	en_buttonError en_a_retFunction = BUTTON_OK;
	if(st_a_butt->port <= MAX_PORT_INDEX && st_a_butt->pin <= MAX_PIN_INDEX ){
 400:	03 c0       	rjmp	.+6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
			en_a_retFunction = BUTTON_OK;
			} else {
			en_a_retFunction = BUTTON_OP_FAILED;
		}
		} else {
		en_a_retFunction = BUTTON_WRONG_INPUT;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	01 c0       	rjmp	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 408:	0f 90       	pop	r0
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <LED_init>:
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_ledError LED_init(st_leds *st_a_led)
{
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	1f 92       	push	r1
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 41e:	fc 01       	movw	r30, r24
 420:	20 81       	ld	r18, Z
 422:	24 30       	cpi	r18, 0x04	; 4
 424:	b8 f4       	brcc	.+46     	; 0x454 <LED_init+0x44>
 426:	21 81       	ldd	r18, Z+1	; 0x01
 428:	28 30       	cpi	r18, 0x08	; 8
 42a:	b0 f4       	brcc	.+44     	; 0x458 <LED_init+0x48>
 42c:	8c 01       	movw	r16, r24
		st_pinConfig st_a_ledPin = {st_a_led->port, st_a_led->pin, DIO_DIRECTION_OUTPUT, DIO_LOW};
 42e:	80 81       	ld	r24, Z
 430:	83 70       	andi	r24, 0x03	; 3
 432:	27 70       	andi	r18, 0x07	; 7
 434:	22 0f       	add	r18, r18
 436:	22 0f       	add	r18, r18
 438:	28 2b       	or	r18, r24
 43a:	20 62       	ori	r18, 0x20	; 32
 43c:	29 83       	std	Y+1, r18	; 0x01
		if (DIO_pinInitialize(&st_a_ledPin) == DIO_OK )
 43e:	ce 01       	movw	r24, r28
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_pinInitialize>
 446:	81 11       	cpse	r24, r1
 448:	03 c0       	rjmp	.+6      	; 0x450 <LED_init+0x40>
		{
			st_a_led->state = 0;
 44a:	f8 01       	movw	r30, r16
 44c:	12 82       	std	Z+2, r1	; 0x02
 44e:	05 c0       	rjmp	.+10     	; 0x45a <LED_init+0x4a>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
 450:	82 e0       	ldi	r24, 0x02	; 2
**************************************************************************************************************************	
*/
en_ledError LED_init(st_leds *st_a_led)
{
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 452:	03 c0       	rjmp	.+6      	; 0x45a <LED_init+0x4a>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
		}
		} else {
		en_a_retFunction = LED_WRONG_INPUT;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	01 c0       	rjmp	.+2      	; 0x45a <LED_init+0x4a>
 458:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 45a:	0f 90       	pop	r0
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	08 95       	ret

00000466 <LED_on>:
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_ledError LED_on(st_leds *st_a_led)
{
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	1f 92       	push	r1
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	fc 01       	movw	r30, r24
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 476:	80 81       	ld	r24, Z
 478:	84 30       	cpi	r24, 0x04	; 4
 47a:	d0 f4       	brcc	.+52     	; 0x4b0 <LED_on+0x4a>
 47c:	91 81       	ldd	r25, Z+1	; 0x01
 47e:	98 30       	cpi	r25, 0x08	; 8
 480:	c8 f4       	brcc	.+50     	; 0x4b4 <LED_on+0x4e>
 482:	8f 01       	movw	r16, r30
		st_pinConfig st_a_ledPin = {st_a_led->port, st_a_led->pin, DIO_DIRECTION_OUTPUT, DIO_HIGH};
 484:	83 70       	andi	r24, 0x03	; 3
 486:	97 70       	andi	r25, 0x07	; 7
 488:	99 0f       	add	r25, r25
 48a:	99 0f       	add	r25, r25
 48c:	98 2b       	or	r25, r24
 48e:	90 62       	ori	r25, 0x20	; 32
 490:	90 64       	ori	r25, 0x40	; 64
 492:	99 83       	std	Y+1, r25	; 0x01
		if (DIO_setPinStatus(&st_a_ledPin, DIO_HIGH) == DIO_OK)
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 49e:	81 11       	cpse	r24, r1
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <LED_on+0x46>
		{
			st_a_led->state = 2;
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	f8 01       	movw	r30, r16
 4a6:	82 83       	std	Z+2, r24	; 0x02
			en_a_retFunction = LED_OK;
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <LED_on+0x50>
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
 4ac:	82 e0       	ldi	r24, 0x02	; 2
**************************************************************************************************************************	
*/
en_ledError LED_on(st_leds *st_a_led)
{
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <LED_on+0x50>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
		}
		} else {
		en_a_retFunction = LED_WRONG_INPUT;
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <LED_on+0x50>
 4b4:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 4b6:	0f 90       	pop	r0
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	08 95       	ret

000004c2 <LED_off>:
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_ledError LED_off(st_leds *st_a_led)
{
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	1f 92       	push	r1
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	fc 01       	movw	r30, r24
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 4d2:	80 81       	ld	r24, Z
 4d4:	84 30       	cpi	r24, 0x04	; 4
 4d6:	c8 f4       	brcc	.+50     	; 0x50a <LED_off+0x48>
 4d8:	91 81       	ldd	r25, Z+1	; 0x01
 4da:	98 30       	cpi	r25, 0x08	; 8
 4dc:	c0 f4       	brcc	.+48     	; 0x50e <LED_off+0x4c>
 4de:	8f 01       	movw	r16, r30
		st_pinConfig st_a_ledPin = {st_a_led->port, st_a_led->pin, DIO_DIRECTION_OUTPUT, DIO_LOW};
 4e0:	83 70       	andi	r24, 0x03	; 3
 4e2:	97 70       	andi	r25, 0x07	; 7
 4e4:	99 0f       	add	r25, r25
 4e6:	99 0f       	add	r25, r25
 4e8:	98 2b       	or	r25, r24
 4ea:	90 62       	ori	r25, 0x20	; 32
 4ec:	99 83       	std	Y+1, r25	; 0x01
		if (DIO_setPinStatus(&st_a_ledPin, DIO_LOW) == DIO_OK)
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	ce 01       	movw	r24, r28
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 4f8:	81 11       	cpse	r24, r1
 4fa:	05 c0       	rjmp	.+10     	; 0x506 <LED_off+0x44>
		{
			st_a_led->state = 1;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	f8 01       	movw	r30, r16
 500:	82 83       	std	Z+2, r24	; 0x02
			en_a_retFunction = LED_OK;
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	05 c0       	rjmp	.+10     	; 0x510 <LED_off+0x4e>
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
 506:	82 e0       	ldi	r24, 0x02	; 2
**************************************************************************************************************************	
*/
en_ledError LED_off(st_leds *st_a_led)
{
	en_ledError en_a_retFunction = LED_OK;
	if(st_a_led->port < 4 && st_a_led->pin < 8){
 508:	03 c0       	rjmp	.+6      	; 0x510 <LED_off+0x4e>
			en_a_retFunction = LED_OK;
			} else {
			en_a_retFunction = LED_OPERATION_FAILED;
		}
		} else {
		en_a_retFunction = LED_WRONG_INPUT;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	01 c0       	rjmp	.+2      	; 0x510 <LED_off+0x4e>
 50e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_retFunction;
}
 510:	0f 90       	pop	r0
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	1f 91       	pop	r17
 518:	0f 91       	pop	r16
 51a:	08 95       	ret

0000051c <MOTOR_driverInitialize>:
 51c:	cf 93       	push	r28
 51e:	89 e8       	ldi	r24, 0x89	; 137
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_pinInitialize>
 526:	c8 2f       	mov	r28, r24
 528:	8a e8       	ldi	r24, 0x8A	; 138
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_pinInitialize>
 530:	c8 2b       	or	r28, r24
 532:	87 e8       	ldi	r24, 0x87	; 135
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_pinInitialize>
 53a:	c8 2b       	or	r28, r24
 53c:	88 e8       	ldi	r24, 0x88	; 136
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_pinInitialize>
 544:	8c 2b       	or	r24, r28
 546:	cf 91       	pop	r28
 548:	08 95       	ret

0000054a <MOTOR_leftMotorForwardDirection>:
 54a:	cf 93       	push	r28
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	89 e8       	ldi	r24, 0x89	; 137
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 556:	c8 2f       	mov	r28, r24
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	8a e8       	ldi	r24, 0x8A	; 138
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 562:	8c 2b       	or	r24, r28
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <MOTOR_leftMotorBackwardDirection>:
 568:	60 e0       	ldi	r22, 0x00	; 0
 56a:	89 e8       	ldi	r24, 0x89	; 137
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	8a e8       	ldi	r24, 0x8A	; 138
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	08 95       	ret

00000580 <MOTOR_rightMotorForwardDirection>:
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	87 e8       	ldi	r24, 0x87	; 135
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	88 e8       	ldi	r24, 0x88	; 136
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	08 95       	ret

00000598 <MOTOR_stopMotorDirection>:
 598:	61 e0       	ldi	r22, 0x01	; 1
 59a:	89 e8       	ldi	r24, 0x89	; 137
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	8a e8       	ldi	r24, 0x8A	; 138
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 5ac:	61 e0       	ldi	r22, 0x01	; 1
 5ae:	87 e8       	ldi	r24, 0x87	; 135
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	88 e8       	ldi	r24, 0x88	; 136
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret

000005c4 <DIO_setPinDirection>:
 5c4:	00 97       	sbiw	r24, 0x00	; 0
 5c6:	09 f4       	brne	.+2      	; 0x5ca <DIO_setPinDirection+0x6>
 5c8:	a5 c0       	rjmp	.+330    	; 0x714 <DIO_setPinDirection+0x150>
 5ca:	fc 01       	movw	r30, r24
 5cc:	20 81       	ld	r18, Z
 5ce:	22 23       	and	r18, r18
 5d0:	0c f4       	brge	.+2      	; 0x5d4 <DIO_setPinDirection+0x10>
 5d2:	a2 c0       	rjmp	.+324    	; 0x718 <DIO_setPinDirection+0x154>
 5d4:	32 2f       	mov	r19, r18
 5d6:	33 70       	andi	r19, 0x03	; 3
 5d8:	31 30       	cpi	r19, 0x01	; 1
 5da:	69 f1       	breq	.+90     	; 0x636 <DIO_setPinDirection+0x72>
 5dc:	38 f0       	brcs	.+14     	; 0x5ec <DIO_setPinDirection+0x28>
 5de:	32 30       	cpi	r19, 0x02	; 2
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <DIO_setPinDirection+0x20>
 5e2:	4e c0       	rjmp	.+156    	; 0x680 <DIO_setPinDirection+0xbc>
 5e4:	33 30       	cpi	r19, 0x03	; 3
 5e6:	09 f4       	brne	.+2      	; 0x5ea <DIO_setPinDirection+0x26>
 5e8:	70 c0       	rjmp	.+224    	; 0x6ca <DIO_setPinDirection+0x106>
 5ea:	98 c0       	rjmp	.+304    	; 0x71c <DIO_setPinDirection+0x158>
 5ec:	25 fd       	sbrc	r18, 5
 5ee:	12 c0       	rjmp	.+36     	; 0x614 <DIO_setPinDirection+0x50>
 5f0:	3a b3       	in	r19, 0x1a	; 26
 5f2:	fc 01       	movw	r30, r24
 5f4:	20 81       	ld	r18, Z
 5f6:	26 95       	lsr	r18
 5f8:	26 95       	lsr	r18
 5fa:	27 70       	andi	r18, 0x07	; 7
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_setPinDirection+0x42>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	2a 95       	dec	r18
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_setPinDirection+0x3e>
 60a:	80 95       	com	r24
 60c:	83 23       	and	r24, r19
 60e:	8a bb       	out	0x1a, r24	; 26
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	08 95       	ret
 614:	3a b3       	in	r19, 0x1a	; 26
 616:	fc 01       	movw	r30, r24
 618:	20 81       	ld	r18, Z
 61a:	26 95       	lsr	r18
 61c:	26 95       	lsr	r18
 61e:	27 70       	andi	r18, 0x07	; 7
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_setPinDirection+0x66>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	2a 95       	dec	r18
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_setPinDirection+0x62>
 62e:	83 2b       	or	r24, r19
 630:	8a bb       	out	0x1a, r24	; 26
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	08 95       	ret
 636:	25 fd       	sbrc	r18, 5
 638:	12 c0       	rjmp	.+36     	; 0x65e <DIO_setPinDirection+0x9a>
 63a:	37 b3       	in	r19, 0x17	; 23
 63c:	fc 01       	movw	r30, r24
 63e:	20 81       	ld	r18, Z
 640:	26 95       	lsr	r18
 642:	26 95       	lsr	r18
 644:	27 70       	andi	r18, 0x07	; 7
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_setPinDirection+0x8c>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	2a 95       	dec	r18
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_setPinDirection+0x88>
 654:	80 95       	com	r24
 656:	83 23       	and	r24, r19
 658:	87 bb       	out	0x17, r24	; 23
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	08 95       	ret
 65e:	37 b3       	in	r19, 0x17	; 23
 660:	fc 01       	movw	r30, r24
 662:	20 81       	ld	r18, Z
 664:	26 95       	lsr	r18
 666:	26 95       	lsr	r18
 668:	27 70       	andi	r18, 0x07	; 7
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_setPinDirection+0xb0>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	2a 95       	dec	r18
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_setPinDirection+0xac>
 678:	83 2b       	or	r24, r19
 67a:	87 bb       	out	0x17, r24	; 23
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	08 95       	ret
 680:	25 fd       	sbrc	r18, 5
 682:	12 c0       	rjmp	.+36     	; 0x6a8 <DIO_setPinDirection+0xe4>
 684:	34 b3       	in	r19, 0x14	; 20
 686:	fc 01       	movw	r30, r24
 688:	20 81       	ld	r18, Z
 68a:	26 95       	lsr	r18
 68c:	26 95       	lsr	r18
 68e:	27 70       	andi	r18, 0x07	; 7
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <DIO_setPinDirection+0xd6>
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	2a 95       	dec	r18
 69c:	e2 f7       	brpl	.-8      	; 0x696 <DIO_setPinDirection+0xd2>
 69e:	80 95       	com	r24
 6a0:	83 23       	and	r24, r19
 6a2:	84 bb       	out	0x14, r24	; 20
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	08 95       	ret
 6a8:	34 b3       	in	r19, 0x14	; 20
 6aa:	fc 01       	movw	r30, r24
 6ac:	20 81       	ld	r18, Z
 6ae:	26 95       	lsr	r18
 6b0:	26 95       	lsr	r18
 6b2:	27 70       	andi	r18, 0x07	; 7
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_setPinDirection+0xfa>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	2a 95       	dec	r18
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_setPinDirection+0xf6>
 6c2:	83 2b       	or	r24, r19
 6c4:	84 bb       	out	0x14, r24	; 20
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	08 95       	ret
 6ca:	25 fd       	sbrc	r18, 5
 6cc:	12 c0       	rjmp	.+36     	; 0x6f2 <DIO_setPinDirection+0x12e>
 6ce:	31 b3       	in	r19, 0x11	; 17
 6d0:	fc 01       	movw	r30, r24
 6d2:	20 81       	ld	r18, Z
 6d4:	26 95       	lsr	r18
 6d6:	26 95       	lsr	r18
 6d8:	27 70       	andi	r18, 0x07	; 7
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_setPinDirection+0x120>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	2a 95       	dec	r18
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_setPinDirection+0x11c>
 6e8:	80 95       	com	r24
 6ea:	83 23       	and	r24, r19
 6ec:	81 bb       	out	0x11, r24	; 17
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	08 95       	ret
 6f2:	31 b3       	in	r19, 0x11	; 17
 6f4:	fc 01       	movw	r30, r24
 6f6:	20 81       	ld	r18, Z
 6f8:	26 95       	lsr	r18
 6fa:	26 95       	lsr	r18
 6fc:	27 70       	andi	r18, 0x07	; 7
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_setPinDirection+0x144>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	2a 95       	dec	r18
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_setPinDirection+0x140>
 70c:	83 2b       	or	r24, r19
 70e:	81 bb       	out	0x11, r24	; 17
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	08 95       	ret
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	08 95       	ret
 718:	82 e0       	ldi	r24, 0x02	; 2
 71a:	08 95       	ret
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	08 95       	ret

00000720 <DIO_setPinStatus>:
 720:	00 97       	sbiw	r24, 0x00	; 0
 722:	09 f4       	brne	.+2      	; 0x726 <DIO_setPinStatus+0x6>
 724:	d9 c0       	rjmp	.+434    	; 0x8d8 <__stack+0x79>
 726:	dc 01       	movw	r26, r24
 728:	2c 91       	ld	r18, X
 72a:	22 23       	and	r18, r18
 72c:	0c f4       	brge	.+2      	; 0x730 <DIO_setPinStatus+0x10>
 72e:	d6 c0       	rjmp	.+428    	; 0x8dc <__stack+0x7d>
 730:	61 70       	andi	r22, 0x01	; 1
 732:	23 70       	andi	r18, 0x03	; 3
 734:	22 30       	cpi	r18, 0x02	; 2
 736:	09 f4       	brne	.+2      	; 0x73a <DIO_setPinStatus+0x1a>
 738:	69 c0       	rjmp	.+210    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 73a:	08 f0       	brcs	.+2      	; 0x73e <DIO_setPinStatus+0x1e>
 73c:	9a c0       	rjmp	.+308    	; 0x872 <__stack+0x13>
 73e:	21 30       	cpi	r18, 0x01	; 1
 740:	91 f1       	breq	.+100    	; 0x7a6 <DIO_setPinStatus+0x86>
 742:	4a b3       	in	r20, 0x1a	; 26
 744:	2c 91       	ld	r18, X
 746:	26 95       	lsr	r18
 748:	26 95       	lsr	r18
 74a:	27 70       	andi	r18, 0x07	; 7
 74c:	e2 2f       	mov	r30, r18
 74e:	50 e0       	ldi	r21, 0x00	; 0
 750:	da 01       	movw	r26, r20
 752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_setPinStatus+0x38>
 754:	b5 95       	asr	r27
 756:	a7 95       	ror	r26
 758:	2a 95       	dec	r18
 75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_setPinStatus+0x34>
 75c:	a0 ff       	sbrs	r26, 0
 75e:	c0 c0       	rjmp	.+384    	; 0x8e0 <__stack+0x81>
 760:	61 11       	cpse	r22, r1
 762:	11 c0       	rjmp	.+34     	; 0x786 <DIO_setPinStatus+0x66>
 764:	4b b3       	in	r20, 0x1b	; 27
 766:	21 e0       	ldi	r18, 0x01	; 1
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_setPinStatus+0x50>
 76c:	22 0f       	add	r18, r18
 76e:	33 1f       	adc	r19, r19
 770:	ea 95       	dec	r30
 772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_setPinStatus+0x4c>
 774:	20 95       	com	r18
 776:	24 23       	and	r18, r20
 778:	2b bb       	out	0x1b, r18	; 27
 77a:	fc 01       	movw	r30, r24
 77c:	20 81       	ld	r18, Z
 77e:	2f 7b       	andi	r18, 0xBF	; 191
 780:	20 83       	st	Z, r18
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	08 95       	ret
 786:	4b b3       	in	r20, 0x1b	; 27
 788:	21 e0       	ldi	r18, 0x01	; 1
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_setPinStatus+0x72>
 78e:	22 0f       	add	r18, r18
 790:	33 1f       	adc	r19, r19
 792:	ea 95       	dec	r30
 794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_setPinStatus+0x6e>
 796:	24 2b       	or	r18, r20
 798:	2b bb       	out	0x1b, r18	; 27
 79a:	dc 01       	movw	r26, r24
 79c:	2c 91       	ld	r18, X
 79e:	20 64       	ori	r18, 0x40	; 64
 7a0:	2c 93       	st	X, r18
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	08 95       	ret
 7a6:	47 b3       	in	r20, 0x17	; 23
 7a8:	fc 01       	movw	r30, r24
 7aa:	20 81       	ld	r18, Z
 7ac:	26 95       	lsr	r18
 7ae:	26 95       	lsr	r18
 7b0:	27 70       	andi	r18, 0x07	; 7
 7b2:	e2 2f       	mov	r30, r18
 7b4:	50 e0       	ldi	r21, 0x00	; 0
 7b6:	da 01       	movw	r26, r20
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_setPinStatus+0x9e>
 7ba:	b5 95       	asr	r27
 7bc:	a7 95       	ror	r26
 7be:	2a 95       	dec	r18
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_setPinStatus+0x9a>
 7c2:	a0 ff       	sbrs	r26, 0
 7c4:	8f c0       	rjmp	.+286    	; 0x8e4 <__stack+0x85>
 7c6:	61 11       	cpse	r22, r1
 7c8:	11 c0       	rjmp	.+34     	; 0x7ec <DIO_setPinStatus+0xcc>
 7ca:	48 b3       	in	r20, 0x18	; 24
 7cc:	21 e0       	ldi	r18, 0x01	; 1
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_setPinStatus+0xb6>
 7d2:	22 0f       	add	r18, r18
 7d4:	33 1f       	adc	r19, r19
 7d6:	ea 95       	dec	r30
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_setPinStatus+0xb2>
 7da:	20 95       	com	r18
 7dc:	24 23       	and	r18, r20
 7de:	28 bb       	out	0x18, r18	; 24
 7e0:	fc 01       	movw	r30, r24
 7e2:	20 81       	ld	r18, Z
 7e4:	2f 7b       	andi	r18, 0xBF	; 191
 7e6:	20 83       	st	Z, r18
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	08 95       	ret
 7ec:	48 b3       	in	r20, 0x18	; 24
 7ee:	21 e0       	ldi	r18, 0x01	; 1
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_setPinStatus+0xd8>
 7f4:	22 0f       	add	r18, r18
 7f6:	33 1f       	adc	r19, r19
 7f8:	ea 95       	dec	r30
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_setPinStatus+0xd4>
 7fc:	24 2b       	or	r18, r20
 7fe:	28 bb       	out	0x18, r18	; 24
 800:	dc 01       	movw	r26, r24
 802:	2c 91       	ld	r18, X
 804:	20 64       	ori	r18, 0x40	; 64
 806:	2c 93       	st	X, r18
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	08 95       	ret
 80c:	44 b3       	in	r20, 0x14	; 20
 80e:	fc 01       	movw	r30, r24
 810:	20 81       	ld	r18, Z
 812:	26 95       	lsr	r18
 814:	26 95       	lsr	r18
 816:	27 70       	andi	r18, 0x07	; 7
 818:	e2 2f       	mov	r30, r18
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	da 01       	movw	r26, r20
 81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 820:	b5 95       	asr	r27
 822:	a7 95       	ror	r26
 824:	2a 95       	dec	r18
 826:	e2 f7       	brpl	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 828:	a0 ff       	sbrs	r26, 0
 82a:	5e c0       	rjmp	.+188    	; 0x8e8 <__stack+0x89>
 82c:	61 11       	cpse	r22, r1
 82e:	11 c0       	rjmp	.+34     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 830:	45 b3       	in	r20, 0x15	; 21
 832:	21 e0       	ldi	r18, 0x01	; 1
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 838:	22 0f       	add	r18, r18
 83a:	33 1f       	adc	r19, r19
 83c:	ea 95       	dec	r30
 83e:	e2 f7       	brpl	.-8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 840:	20 95       	com	r18
 842:	24 23       	and	r18, r20
 844:	25 bb       	out	0x15, r18	; 21
 846:	fc 01       	movw	r30, r24
 848:	20 81       	ld	r18, Z
 84a:	2f 7b       	andi	r18, 0xBF	; 191
 84c:	20 83       	st	Z, r18
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	08 95       	ret
 852:	45 b3       	in	r20, 0x15	; 21
 854:	21 e0       	ldi	r18, 0x01	; 1
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	02 c0       	rjmp	.+4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 85a:	22 0f       	add	r18, r18
 85c:	33 1f       	adc	r19, r19
 85e:	ea 95       	dec	r30
 860:	e2 f7       	brpl	.-8      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 862:	24 2b       	or	r18, r20
 864:	25 bb       	out	0x15, r18	; 21
 866:	dc 01       	movw	r26, r24
 868:	2c 91       	ld	r18, X
 86a:	20 64       	ori	r18, 0x40	; 64
 86c:	2c 93       	st	X, r18
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	08 95       	ret
 872:	41 b3       	in	r20, 0x11	; 17
 874:	fc 01       	movw	r30, r24
 876:	20 81       	ld	r18, Z
 878:	26 95       	lsr	r18
 87a:	26 95       	lsr	r18
 87c:	27 70       	andi	r18, 0x07	; 7
 87e:	e2 2f       	mov	r30, r18
 880:	50 e0       	ldi	r21, 0x00	; 0
 882:	da 01       	movw	r26, r20
 884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
 886:	b5 95       	asr	r27
 888:	a7 95       	ror	r26
 88a:	2a 95       	dec	r18
 88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
 88e:	a0 ff       	sbrs	r26, 0
 890:	2d c0       	rjmp	.+90     	; 0x8ec <__stack+0x8d>
 892:	61 11       	cpse	r22, r1
 894:	11 c0       	rjmp	.+34     	; 0x8b8 <__stack+0x59>
 896:	42 b3       	in	r20, 0x12	; 18
 898:	21 e0       	ldi	r18, 0x01	; 1
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
 89e:	22 0f       	add	r18, r18
 8a0:	33 1f       	adc	r19, r19
 8a2:	ea 95       	dec	r30
 8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
 8a6:	20 95       	com	r18
 8a8:	24 23       	and	r18, r20
 8aa:	22 bb       	out	0x12, r18	; 18
 8ac:	fc 01       	movw	r30, r24
 8ae:	20 81       	ld	r18, Z
 8b0:	2f 7b       	andi	r18, 0xBF	; 191
 8b2:	20 83       	st	Z, r18
 8b4:	80 e0       	ldi	r24, 0x00	; 0
 8b6:	08 95       	ret
 8b8:	42 b3       	in	r20, 0x12	; 18
 8ba:	21 e0       	ldi	r18, 0x01	; 1
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__stack+0x65>
 8c0:	22 0f       	add	r18, r18
 8c2:	33 1f       	adc	r19, r19
 8c4:	ea 95       	dec	r30
 8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <__stack+0x61>
 8c8:	24 2b       	or	r18, r20
 8ca:	22 bb       	out	0x12, r18	; 18
 8cc:	dc 01       	movw	r26, r24
 8ce:	2c 91       	ld	r18, X
 8d0:	20 64       	ori	r18, 0x40	; 64
 8d2:	2c 93       	st	X, r18
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	08 95       	ret
 8d8:	82 e0       	ldi	r24, 0x02	; 2
 8da:	08 95       	ret
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	08 95       	ret
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	08 95       	ret
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	08 95       	ret
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	08 95       	ret
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	08 95       	ret

000008f0 <DIO_pinInitialize>:
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	00 97       	sbiw	r24, 0x00	; 0
 8f6:	81 f0       	breq	.+32     	; 0x918 <DIO_pinInitialize+0x28>
 8f8:	fc 01       	movw	r30, r24
 8fa:	20 81       	ld	r18, Z
 8fc:	22 23       	and	r18, r18
 8fe:	74 f0       	brlt	.+28     	; 0x91c <DIO_pinInitialize+0x2c>
 900:	ec 01       	movw	r28, r24
 902:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <DIO_setPinDirection>
 906:	68 81       	ld	r22, Y
 908:	66 fb       	bst	r22, 6
 90a:	66 27       	eor	r22, r22
 90c:	60 f9       	bld	r22, 0
 90e:	ce 01       	movw	r24, r28
 910:	0e 94 90 03 	call	0x720	; 0x720 <DIO_setPinStatus>
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	03 c0       	rjmp	.+6      	; 0x91e <DIO_pinInitialize+0x2e>
 918:	82 e0       	ldi	r24, 0x02	; 2
 91a:	01 c0       	rjmp	.+2      	; 0x91e <DIO_pinInitialize+0x2e>
 91c:	82 e0       	ldi	r24, 0x02	; 2
 91e:	df 91       	pop	r29
 920:	cf 91       	pop	r28
 922:	08 95       	ret

00000924 <EXTI_interruptInit>:
 924:	cf 93       	push	r28
 926:	00 97       	sbiw	r24, 0x00	; 0
 928:	09 f4       	brne	.+2      	; 0x92c <EXTI_interruptInit+0x8>
 92a:	72 c0       	rjmp	.+228    	; 0xa10 <EXTI_interruptInit+0xec>
 92c:	fc 01       	movw	r30, r24
 92e:	83 81       	ldd	r24, Z+3	; 0x03
 930:	81 11       	cpse	r24, r1
 932:	36 c0       	rjmp	.+108    	; 0x9a0 <EXTI_interruptInit+0x7c>
 934:	82 81       	ldd	r24, Z+2	; 0x02
 936:	81 11       	cpse	r24, r1
 938:	08 c0       	rjmp	.+16     	; 0x94a <EXTI_interruptInit+0x26>
 93a:	85 b7       	in	r24, 0x35	; 53
 93c:	8e 7f       	andi	r24, 0xFE	; 254
 93e:	85 bf       	out	0x35, r24	; 53
 940:	85 b7       	in	r24, 0x35	; 53
 942:	8d 7f       	andi	r24, 0xFD	; 253
 944:	85 bf       	out	0x35, r24	; 53
 946:	c0 e0       	ldi	r28, 0x00	; 0
 948:	1f c0       	rjmp	.+62     	; 0x988 <EXTI_interruptInit+0x64>
 94a:	81 30       	cpi	r24, 0x01	; 1
 94c:	41 f4       	brne	.+16     	; 0x95e <EXTI_interruptInit+0x3a>
 94e:	85 b7       	in	r24, 0x35	; 53
 950:	81 60       	ori	r24, 0x01	; 1
 952:	85 bf       	out	0x35, r24	; 53
 954:	85 b7       	in	r24, 0x35	; 53
 956:	8d 7f       	andi	r24, 0xFD	; 253
 958:	85 bf       	out	0x35, r24	; 53
 95a:	c0 e0       	ldi	r28, 0x00	; 0
 95c:	15 c0       	rjmp	.+42     	; 0x988 <EXTI_interruptInit+0x64>
 95e:	83 30       	cpi	r24, 0x03	; 3
 960:	41 f4       	brne	.+16     	; 0x972 <EXTI_interruptInit+0x4e>
 962:	85 b7       	in	r24, 0x35	; 53
 964:	81 60       	ori	r24, 0x01	; 1
 966:	85 bf       	out	0x35, r24	; 53
 968:	85 b7       	in	r24, 0x35	; 53
 96a:	82 60       	ori	r24, 0x02	; 2
 96c:	85 bf       	out	0x35, r24	; 53
 96e:	c0 e0       	ldi	r28, 0x00	; 0
 970:	0b c0       	rjmp	.+22     	; 0x988 <EXTI_interruptInit+0x64>
 972:	82 30       	cpi	r24, 0x02	; 2
 974:	41 f4       	brne	.+16     	; 0x986 <EXTI_interruptInit+0x62>
 976:	85 b7       	in	r24, 0x35	; 53
 978:	8e 7f       	andi	r24, 0xFE	; 254
 97a:	85 bf       	out	0x35, r24	; 53
 97c:	85 b7       	in	r24, 0x35	; 53
 97e:	82 60       	ori	r24, 0x02	; 2
 980:	85 bf       	out	0x35, r24	; 53
 982:	c0 e0       	ldi	r28, 0x00	; 0
 984:	01 c0       	rjmp	.+2      	; 0x988 <EXTI_interruptInit+0x64>
 986:	c2 e0       	ldi	r28, 0x02	; 2
 988:	80 81       	ld	r24, Z
 98a:	91 81       	ldd	r25, Z+1	; 0x01
 98c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <v_gs_ptrfuncInt0+0x1>
 990:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <v_gs_ptrfuncInt0>
 994:	8b b7       	in	r24, 0x3b	; 59
 996:	80 64       	ori	r24, 0x40	; 64
 998:	8b bf       	out	0x3b, r24	; 59
 99a:	0e 94 60 05 	call	0xac0	; 0xac0 <GIE_enableGeneralInterrupt>
 99e:	3b c0       	rjmp	.+118    	; 0xa16 <EXTI_interruptInit+0xf2>
 9a0:	81 30       	cpi	r24, 0x01	; 1
 9a2:	c1 f5       	brne	.+112    	; 0xa14 <EXTI_interruptInit+0xf0>
 9a4:	82 81       	ldd	r24, Z+2	; 0x02
 9a6:	81 11       	cpse	r24, r1
 9a8:	08 c0       	rjmp	.+16     	; 0x9ba <EXTI_interruptInit+0x96>
 9aa:	85 b7       	in	r24, 0x35	; 53
 9ac:	8b 7f       	andi	r24, 0xFB	; 251
 9ae:	85 bf       	out	0x35, r24	; 53
 9b0:	85 b7       	in	r24, 0x35	; 53
 9b2:	87 7f       	andi	r24, 0xF7	; 247
 9b4:	85 bf       	out	0x35, r24	; 53
 9b6:	c0 e0       	ldi	r28, 0x00	; 0
 9b8:	1f c0       	rjmp	.+62     	; 0x9f8 <EXTI_interruptInit+0xd4>
 9ba:	81 30       	cpi	r24, 0x01	; 1
 9bc:	41 f4       	brne	.+16     	; 0x9ce <EXTI_interruptInit+0xaa>
 9be:	85 b7       	in	r24, 0x35	; 53
 9c0:	84 60       	ori	r24, 0x04	; 4
 9c2:	85 bf       	out	0x35, r24	; 53
 9c4:	85 b7       	in	r24, 0x35	; 53
 9c6:	87 7f       	andi	r24, 0xF7	; 247
 9c8:	85 bf       	out	0x35, r24	; 53
 9ca:	c0 e0       	ldi	r28, 0x00	; 0
 9cc:	15 c0       	rjmp	.+42     	; 0x9f8 <EXTI_interruptInit+0xd4>
 9ce:	83 30       	cpi	r24, 0x03	; 3
 9d0:	41 f4       	brne	.+16     	; 0x9e2 <EXTI_interruptInit+0xbe>
 9d2:	85 b7       	in	r24, 0x35	; 53
 9d4:	84 60       	ori	r24, 0x04	; 4
 9d6:	85 bf       	out	0x35, r24	; 53
 9d8:	85 b7       	in	r24, 0x35	; 53
 9da:	88 60       	ori	r24, 0x08	; 8
 9dc:	85 bf       	out	0x35, r24	; 53
 9de:	c0 e0       	ldi	r28, 0x00	; 0
 9e0:	0b c0       	rjmp	.+22     	; 0x9f8 <EXTI_interruptInit+0xd4>
 9e2:	82 30       	cpi	r24, 0x02	; 2
 9e4:	41 f4       	brne	.+16     	; 0x9f6 <EXTI_interruptInit+0xd2>
 9e6:	85 b7       	in	r24, 0x35	; 53
 9e8:	8b 7f       	andi	r24, 0xFB	; 251
 9ea:	85 bf       	out	0x35, r24	; 53
 9ec:	85 b7       	in	r24, 0x35	; 53
 9ee:	88 60       	ori	r24, 0x08	; 8
 9f0:	85 bf       	out	0x35, r24	; 53
 9f2:	c0 e0       	ldi	r28, 0x00	; 0
 9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <EXTI_interruptInit+0xd4>
 9f6:	c2 e0       	ldi	r28, 0x02	; 2
 9f8:	80 81       	ld	r24, Z
 9fa:	91 81       	ldd	r25, Z+1	; 0x01
 9fc:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <v_gs_ptrfuncInt1+0x1>
 a00:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <v_gs_ptrfuncInt1>
 a04:	8b b7       	in	r24, 0x3b	; 59
 a06:	80 68       	ori	r24, 0x80	; 128
 a08:	8b bf       	out	0x3b, r24	; 59
 a0a:	0e 94 60 05 	call	0xac0	; 0xac0 <GIE_enableGeneralInterrupt>
 a0e:	03 c0       	rjmp	.+6      	; 0xa16 <EXTI_interruptInit+0xf2>
 a10:	c1 e0       	ldi	r28, 0x01	; 1
 a12:	01 c0       	rjmp	.+2      	; 0xa16 <EXTI_interruptInit+0xf2>
 a14:	c2 e0       	ldi	r28, 0x02	; 2
 a16:	8c 2f       	mov	r24, r28
 a18:	cf 91       	pop	r28
 a1a:	08 95       	ret

00000a1c <__vector_1>:
 a1c:	1f 92       	push	r1
 a1e:	0f 92       	push	r0
 a20:	0f b6       	in	r0, 0x3f	; 63
 a22:	0f 92       	push	r0
 a24:	11 24       	eor	r1, r1
 a26:	2f 93       	push	r18
 a28:	3f 93       	push	r19
 a2a:	4f 93       	push	r20
 a2c:	5f 93       	push	r21
 a2e:	6f 93       	push	r22
 a30:	7f 93       	push	r23
 a32:	8f 93       	push	r24
 a34:	9f 93       	push	r25
 a36:	af 93       	push	r26
 a38:	bf 93       	push	r27
 a3a:	ef 93       	push	r30
 a3c:	ff 93       	push	r31
 a3e:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <v_gs_ptrfuncInt0>
 a42:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <v_gs_ptrfuncInt0+0x1>
 a46:	30 97       	sbiw	r30, 0x00	; 0
 a48:	09 f0       	breq	.+2      	; 0xa4c <__vector_1+0x30>
 a4a:	09 95       	icall
 a4c:	ff 91       	pop	r31
 a4e:	ef 91       	pop	r30
 a50:	bf 91       	pop	r27
 a52:	af 91       	pop	r26
 a54:	9f 91       	pop	r25
 a56:	8f 91       	pop	r24
 a58:	7f 91       	pop	r23
 a5a:	6f 91       	pop	r22
 a5c:	5f 91       	pop	r21
 a5e:	4f 91       	pop	r20
 a60:	3f 91       	pop	r19
 a62:	2f 91       	pop	r18
 a64:	0f 90       	pop	r0
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	0f 90       	pop	r0
 a6a:	1f 90       	pop	r1
 a6c:	18 95       	reti

00000a6e <__vector_2>:
 a6e:	1f 92       	push	r1
 a70:	0f 92       	push	r0
 a72:	0f b6       	in	r0, 0x3f	; 63
 a74:	0f 92       	push	r0
 a76:	11 24       	eor	r1, r1
 a78:	2f 93       	push	r18
 a7a:	3f 93       	push	r19
 a7c:	4f 93       	push	r20
 a7e:	5f 93       	push	r21
 a80:	6f 93       	push	r22
 a82:	7f 93       	push	r23
 a84:	8f 93       	push	r24
 a86:	9f 93       	push	r25
 a88:	af 93       	push	r26
 a8a:	bf 93       	push	r27
 a8c:	ef 93       	push	r30
 a8e:	ff 93       	push	r31
 a90:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <v_gs_ptrfuncInt1>
 a94:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <v_gs_ptrfuncInt1+0x1>
 a98:	30 97       	sbiw	r30, 0x00	; 0
 a9a:	09 f0       	breq	.+2      	; 0xa9e <__vector_2+0x30>
 a9c:	09 95       	icall
 a9e:	ff 91       	pop	r31
 aa0:	ef 91       	pop	r30
 aa2:	bf 91       	pop	r27
 aa4:	af 91       	pop	r26
 aa6:	9f 91       	pop	r25
 aa8:	8f 91       	pop	r24
 aaa:	7f 91       	pop	r23
 aac:	6f 91       	pop	r22
 aae:	5f 91       	pop	r21
 ab0:	4f 91       	pop	r20
 ab2:	3f 91       	pop	r19
 ab4:	2f 91       	pop	r18
 ab6:	0f 90       	pop	r0
 ab8:	0f be       	out	0x3f, r0	; 63
 aba:	0f 90       	pop	r0
 abc:	1f 90       	pop	r1
 abe:	18 95       	reti

00000ac0 <GIE_enableGeneralInterrupt>:
/******************************************************************************/

en_gieErrorStatus GIE_enableGeneralInterrupt(void)
{
	en_gieErrorStatus u8_a_retFunction = GIE_OK;
	SET_BIT(SREG, GLOBAL_INTERRUPT_ENABLE_BIT);
 ac0:	8f b7       	in	r24, 0x3f	; 63
 ac2:	80 68       	ori	r24, 0x80	; 128
 ac4:	8f bf       	out	0x3f, r24	; 63
	return u8_a_retFunction;
	
}
 ac6:	80 e0       	ldi	r24, 0x00	; 0
 ac8:	08 95       	ret

00000aca <TIMER_init>:
**************************************************************************************************************************	
*/

en_timerError TIMER_init(void) {
	en_timerError en_a_retFunction = TIMER_OK;
	TIMSK = 0x00;
 aca:	19 be       	out	0x39, r1	; 57
	TIFR  = 0x00;
 acc:	18 be       	out	0x38, r1	; 56
	TIMSK = (TIMER_0_OC_INTERRUPT << OCIE0) | (TIMER_0_OVF_INTERRUPT << TOIE0)
 ace:	85 e0       	ldi	r24, 0x05	; 5
 ad0:	89 bf       	out	0x39, r24	; 57
	| (TIMER_1_IC_INTERRUPT << TICIE1)
	| (TIMER_1_OCA_INTERRUPT << OCIE1A)
	| (TIMER_1_OCB_INTERRUPT << OCIE1B)
	| (TIMER_1_OVF_INTERRUPT << TOIE1);
	#if TIMER_0 == ENABLE
	TCCR0 = ((TCCR0 & 0x00) | TIMER_0_MODE);
 ad2:	83 b7       	in	r24, 0x33	; 51
 ad4:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00;
 ad6:	12 be       	out	0x32, r1	; 50
	OCR0 = 0x00;
 ad8:	1c be       	out	0x3c, r1	; 60
	#endif
	#if TIMER_1 == ENABLE
	TCCR1A = ((TCCR1A & 0x00) | (TIMER_1_MODE & 0x03));
 ada:	8f b5       	in	r24, 0x2f	; 47
 adc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = ((TCCR1B & 0x00) | ((TIMER_1_MODE >> 2) << WGM12));
 ade:	8e b5       	in	r24, 0x2e	; 46
 ae0:	1e bc       	out	0x2e, r1	; 46
	TCNT1H = 0x00;
 ae2:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0x00;
 ae4:	1c bc       	out	0x2c, r1	; 44
	OCR1AH = 0x00;
 ae6:	1b bc       	out	0x2b, r1	; 43
	OCR1AL = 0x00;
 ae8:	1a bc       	out	0x2a, r1	; 42
	OCR1BH = 0x00;
 aea:	19 bc       	out	0x29, r1	; 41
	OCR1BL = 0x00;
 aec:	18 bc       	out	0x28, r1	; 40
	ICR1H  = 0x00;
 aee:	17 bc       	out	0x27, r1	; 39
	ICR1L  = 0x00;
 af0:	16 bc       	out	0x26, r1	; 38
	#endif
	return en_a_retFunction;
}
 af2:	80 e0       	ldi	r24, 0x00	; 0
 af4:	08 95       	ret

00000af6 <TIMER_start>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3){
 af6:	83 30       	cpi	r24, 0x03	; 3
 af8:	88 f4       	brcc	.+34     	; 0xb1c <TIMER_start+0x26>
		switch (u8_a_timerNumber) {
 afa:	88 23       	and	r24, r24
 afc:	19 f0       	breq	.+6      	; 0xb04 <TIMER_start+0xe>
 afe:	81 30       	cpi	r24, 0x01	; 1
 b00:	31 f0       	breq	.+12     	; 0xb0e <TIMER_start+0x18>
 b02:	0e c0       	rjmp	.+28     	; 0xb20 <TIMER_start+0x2a>
			case TIMER_TM0:
			TCCR0 |= (TIMER_0_CLK << CS00);
 b04:	83 b7       	in	r24, 0x33	; 51
 b06:	82 60       	ori	r24, 0x02	; 2
 b08:	83 bf       	out	0x33, r24	; 51
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 b0a:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			TCCR0 |= (TIMER_0_CLK << CS00);
			break;
 b0c:	08 95       	ret
			case TIMER_TM1:
			TCNT1H = 0x00;
 b0e:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0x00;
 b10:	1c bc       	out	0x2c, r1	; 44
			TCCR1B |= (TIMER_1_CLK << CS10);
 b12:	8e b5       	in	r24, 0x2e	; 46
 b14:	83 60       	ori	r24, 0x03	; 3
 b16:	8e bd       	out	0x2e, r24	; 46
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 b18:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case TIMER_TM1:
			TCNT1H = 0x00;
			TCNT1L = 0x00;
			TCCR1B |= (TIMER_1_CLK << CS10);
			break;
 b1a:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_start(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 b20:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 b22:	08 95       	ret

00000b24 <TIMER_stop>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3){
 b24:	83 30       	cpi	r24, 0x03	; 3
 b26:	88 f4       	brcc	.+34     	; 0xb4a <TIMER_stop+0x26>
		switch (u8_a_timerNumber) {
 b28:	88 23       	and	r24, r24
 b2a:	19 f0       	breq	.+6      	; 0xb32 <TIMER_stop+0xe>
 b2c:	81 30       	cpi	r24, 0x01	; 1
 b2e:	31 f0       	breq	.+12     	; 0xb3c <TIMER_stop+0x18>
 b30:	0e c0       	rjmp	.+28     	; 0xb4e <TIMER_stop+0x2a>
			case TIMER_TM0:
			TCCR0 &= 0xF8;
 b32:	83 b7       	in	r24, 0x33	; 51
 b34:	88 7f       	andi	r24, 0xF8	; 248
 b36:	83 bf       	out	0x33, r24	; 51
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 b38:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			TCCR0 &= 0xF8;
			break;
 b3a:	08 95       	ret
			case TIMER_TM1:
			TCCR1B &= 0xF8;
 b3c:	8e b5       	in	r24, 0x2e	; 46
 b3e:	88 7f       	andi	r24, 0xF8	; 248
 b40:	8e bd       	out	0x2e, r24	; 46
			TCNT1H = 0x00;
 b42:	1d bc       	out	0x2d, r1	; 45
			TCNT1L = 0x00;
 b44:	1c bc       	out	0x2c, r1	; 44
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 b46:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case TIMER_TM1:
			TCCR1B &= 0xF8;
			TCNT1H = 0x00;
			TCNT1L = 0x00;
			break;
 b48:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 b4a:	81 e0       	ldi	r24, 0x01	; 1
 b4c:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_stop(u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 b4e:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 b50:	08 95       	ret

00000b52 <TIMER_read>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3 && u16_a_tTimerValue != NULL){
 b52:	83 30       	cpi	r24, 0x03	; 3
 b54:	d0 f4       	brcc	.+52     	; 0xb8a <TIMER_read+0x38>
 b56:	61 15       	cp	r22, r1
 b58:	71 05       	cpc	r23, r1
 b5a:	c9 f0       	breq	.+50     	; 0xb8e <TIMER_read+0x3c>
		switch (u8_a_timerNumber) {
 b5c:	88 23       	and	r24, r24
 b5e:	19 f0       	breq	.+6      	; 0xb66 <TIMER_read+0x14>
 b60:	81 30       	cpi	r24, 0x01	; 1
 b62:	41 f0       	breq	.+16     	; 0xb74 <TIMER_read+0x22>
 b64:	16 c0       	rjmp	.+44     	; 0xb92 <TIMER_read+0x40>
			case TIMER_TM0:
			*u16_a_tTimerValue = TCNT0;
 b66:	82 b7       	in	r24, 0x32	; 50
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	fb 01       	movw	r30, r22
 b6c:	91 83       	std	Z+1, r25	; 0x01
 b6e:	80 83       	st	Z, r24
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
 b70:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3 && u16_a_tTimerValue != NULL){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			*u16_a_tTimerValue = TCNT0;
			break;
 b72:	08 95       	ret
			case TIMER_TM1:
			*u16_a_tTimerValue = (TCNT1L | (TCNT1H << 8));
 b74:	2c b5       	in	r18, 0x2c	; 44
 b76:	8d b5       	in	r24, 0x2d	; 45
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	98 2f       	mov	r25, r24
 b7c:	88 27       	eor	r24, r24
 b7e:	82 2b       	or	r24, r18
 b80:	fb 01       	movw	r30, r22
 b82:	91 83       	std	Z+1, r25	; 0x01
 b84:	80 83       	st	Z, r24
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
 b86:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_TM0:
			*u16_a_tTimerValue = TCNT0;
			break;
			case TIMER_TM1:
			*u16_a_tTimerValue = (TCNT1L | (TCNT1H << 8));
			break;
 b88:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 b8a:	81 e0       	ldi	r24, 0x01	; 1
 b8c:	08 95       	ret
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_read(u8 u8_a_timerNumber, u16* u16_a_tTimerValue) {
	en_timerError en_a_retFunction = TIMER_OK;
 b92:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 b94:	08 95       	ret

00000b96 <TIMER_preload>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
	if(u8_a_timerNumber < 3){
 b96:	63 30       	cpi	r22, 0x03	; 3
 b98:	60 f4       	brcc	.+24     	; 0xbb2 <TIMER_preload+0x1c>
		switch (u8_a_timerNumber) {
 b9a:	66 23       	and	r22, r22
 b9c:	19 f0       	breq	.+6      	; 0xba4 <TIMER_preload+0xe>
 b9e:	61 30       	cpi	r22, 0x01	; 1
 ba0:	21 f0       	breq	.+8      	; 0xbaa <TIMER_preload+0x14>
 ba2:	09 c0       	rjmp	.+18     	; 0xbb6 <TIMER_preload+0x20>
			case TIMER_TM0:
			TCNT0 = (u8) u16_a_value;
 ba4:	82 bf       	out	0x32, r24	; 50
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 ba6:	80 e0       	ldi	r24, 0x00	; 0
	if(u8_a_timerNumber < 3){
		switch (u8_a_timerNumber) {
			case TIMER_TM0:
			TCNT0 = (u8) u16_a_value;
			break;
 ba8:	08 95       	ret
			case TIMER_TM1:
			TCNT1H = (u8) (u16_a_value >> 8);
 baa:	9d bd       	out	0x2d, r25	; 45
			TCNT1L = (u8) u16_a_value;
 bac:	8c bd       	out	0x2c, r24	; 44
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 bae:	80 e0       	ldi	r24, 0x00	; 0
			TCNT0 = (u8) u16_a_value;
			break;
			case TIMER_TM1:
			TCNT1H = (u8) (u16_a_value >> 8);
			TCNT1L = (u8) u16_a_value;
			break;
 bb0:	08 95       	ret
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
 bb2:	81 e0       	ldi	r24, 0x01	; 1
 bb4:	08 95       	ret
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_preload(u16 u16_a_value, u8 u8_a_timerNumber) {
	en_timerError en_a_retFunction = TIMER_OK;
 bb6:	80 e0       	ldi	r24, 0x00	; 0
		}
		} else {
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	return en_a_retFunction;
}
 bb8:	08 95       	ret

00000bba <TIMER_setCallBack>:
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_setCallBack(u8 u8_a_timerInterruptNum, void (*v_a_ptr)(void)) {
	en_timerError en_a_retFunction = TIMER_OK;
	if ( NULL == v_a_ptr)
 bba:	61 15       	cp	r22, r1
 bbc:	71 05       	cpc	r23, r1
 bbe:	61 f0       	breq	.+24     	; 0xbd8 <TIMER_setCallBack+0x1e>
	{
		en_a_retFunction = TIMER_WRONG_INPUT;
	}
	else
	{
		if (u8_a_timerInterruptNum >= 0 && u8_a_timerInterruptNum < 2) 
 bc0:	82 30       	cpi	r24, 0x02	; 2
 bc2:	60 f4       	brcc	.+24     	; 0xbdc <TIMER_setCallBack+0x22>
		{
			v_g_callbackFunc[u8_a_timerInterruptNum] = v_a_ptr;
 bc4:	e8 2f       	mov	r30, r24
 bc6:	f0 e0       	ldi	r31, 0x00	; 0
 bc8:	ee 0f       	add	r30, r30
 bca:	ff 1f       	adc	r31, r31
 bcc:	ea 56       	subi	r30, 0x6A	; 106
 bce:	ff 4f       	sbci	r31, 0xFF	; 255
 bd0:	71 83       	std	Z+1, r23	; 0x01
 bd2:	60 83       	st	Z, r22
	
**************************************************************************************************************************
**************************************************************************************************************************	
*/
en_timerError TIMER_setCallBack(u8 u8_a_timerInterruptNum, void (*v_a_ptr)(void)) {
	en_timerError en_a_retFunction = TIMER_OK;
 bd4:	80 e0       	ldi	r24, 0x00	; 0
 bd6:	08 95       	ret
	if ( NULL == v_a_ptr)
	{
		en_a_retFunction = TIMER_WRONG_INPUT;
 bd8:	81 e0       	ldi	r24, 0x01	; 1
 bda:	08 95       	ret
		if (u8_a_timerInterruptNum >= 0 && u8_a_timerInterruptNum < 2) 
		{
			v_g_callbackFunc[u8_a_timerInterruptNum] = v_a_ptr;
		} 
		else {
			en_a_retFunction = TIMER_WRONG_INPUT;
 bdc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return en_a_retFunction ;
}
 bde:	08 95       	ret

00000be0 <__vector_9>:
//TIMER interrupt vectors(ISR Handlers)


/*        timer1 overflow            */
void __vector_9  (void) __attribute__ ((signal, used));                           
void __vector_9(void) {
 be0:	1f 92       	push	r1
 be2:	0f 92       	push	r0
 be4:	0f b6       	in	r0, 0x3f	; 63
 be6:	0f 92       	push	r0
 be8:	11 24       	eor	r1, r1
 bea:	2f 93       	push	r18
 bec:	3f 93       	push	r19
 bee:	4f 93       	push	r20
 bf0:	5f 93       	push	r21
 bf2:	6f 93       	push	r22
 bf4:	7f 93       	push	r23
 bf6:	8f 93       	push	r24
 bf8:	9f 93       	push	r25
 bfa:	af 93       	push	r26
 bfc:	bf 93       	push	r27
 bfe:	ef 93       	push	r30
 c00:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER1_OVF] != NULL)
 c02:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <v_g_callbackFunc>
 c06:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <v_g_callbackFunc+0x1>
 c0a:	30 97       	sbiw	r30, 0x00	; 0
 c0c:	09 f0       	breq	.+2      	; 0xc10 <__vector_9+0x30>
	v_g_callbackFunc[TIMER1_OVF]();
 c0e:	09 95       	icall
}
 c10:	ff 91       	pop	r31
 c12:	ef 91       	pop	r30
 c14:	bf 91       	pop	r27
 c16:	af 91       	pop	r26
 c18:	9f 91       	pop	r25
 c1a:	8f 91       	pop	r24
 c1c:	7f 91       	pop	r23
 c1e:	6f 91       	pop	r22
 c20:	5f 91       	pop	r21
 c22:	4f 91       	pop	r20
 c24:	3f 91       	pop	r19
 c26:	2f 91       	pop	r18
 c28:	0f 90       	pop	r0
 c2a:	0f be       	out	0x3f, r0	; 63
 c2c:	0f 90       	pop	r0
 c2e:	1f 90       	pop	r1
 c30:	18 95       	reti

00000c32 <__vector_11>:

/*        timer0 overflow            */
void __vector_11 (void) __attribute__ ((signal, used));                           
void __vector_11(void) {
 c32:	1f 92       	push	r1
 c34:	0f 92       	push	r0
 c36:	0f b6       	in	r0, 0x3f	; 63
 c38:	0f 92       	push	r0
 c3a:	11 24       	eor	r1, r1
 c3c:	2f 93       	push	r18
 c3e:	3f 93       	push	r19
 c40:	4f 93       	push	r20
 c42:	5f 93       	push	r21
 c44:	6f 93       	push	r22
 c46:	7f 93       	push	r23
 c48:	8f 93       	push	r24
 c4a:	9f 93       	push	r25
 c4c:	af 93       	push	r26
 c4e:	bf 93       	push	r27
 c50:	ef 93       	push	r30
 c52:	ff 93       	push	r31
	if (v_g_callbackFunc[TIMER0_OVF] != NULL)
 c54:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <v_g_callbackFunc+0x2>
 c58:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <v_g_callbackFunc+0x3>
 c5c:	30 97       	sbiw	r30, 0x00	; 0
 c5e:	09 f0       	breq	.+2      	; 0xc62 <__vector_11+0x30>
	v_g_callbackFunc[TIMER0_OVF]();
 c60:	09 95       	icall
 c62:	ff 91       	pop	r31
 c64:	ef 91       	pop	r30
 c66:	bf 91       	pop	r27
 c68:	af 91       	pop	r26
 c6a:	9f 91       	pop	r25
 c6c:	8f 91       	pop	r24
 c6e:	7f 91       	pop	r23
 c70:	6f 91       	pop	r22
 c72:	5f 91       	pop	r21
 c74:	4f 91       	pop	r20
 c76:	3f 91       	pop	r19
 c78:	2f 91       	pop	r18
 c7a:	0f 90       	pop	r0
 c7c:	0f be       	out	0x3f, r0	; 63
 c7e:	0f 90       	pop	r0
 c80:	1f 90       	pop	r1
 c82:	18 95       	reti

00000c84 <main>:

/************************************************************/
int main(void)
{
	// Initialize the application
	APP_init();
 c84:	0e 94 4a 01 	call	0x294	; 0x294 <APP_init>
	
    while (1) 
    {
		// Check if the car system is ON
		if(en_g_carStatus == SYSTEM_ON)
 c88:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <en_g_carStatus>
 c8c:	81 11       	cpse	r24, r1
 c8e:	fc cf       	rjmp	.-8      	; 0xc88 <main+0x4>
		{
			// Check if the half-second stop is not active
			if(u8_g_halfSecondStop != 1)
 c90:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <u8_g_halfSecondStop>
 c94:	81 30       	cpi	r24, 0x01	; 1
 c96:	81 f0       	breq	.+32     	; 0xcb8 <main+0x34>
			{
				// Execute the function specified by the current sequence number
				st_g_systemSequence[u8_g_sequenceNumber].ptr_g_Function();
 c98:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <u8_g_sequenceNumber>
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	fc 01       	movw	r30, r24
 ca0:	ee 0f       	add	r30, r30
 ca2:	ff 1f       	adc	r31, r31
 ca4:	8e 0f       	add	r24, r30
 ca6:	9f 1f       	adc	r25, r31
 ca8:	fc 01       	movw	r30, r24
 caa:	e7 58       	subi	r30, 0x87	; 135
 cac:	ff 4f       	sbci	r31, 0xFF	; 255
 cae:	01 90       	ld	r0, Z+
 cb0:	f0 81       	ld	r31, Z
 cb2:	e0 2d       	mov	r30, r0
 cb4:	09 95       	icall
 cb6:	e8 cf       	rjmp	.-48     	; 0xc88 <main+0x4>
			}
			else
			{
				// Temporarily stop the car
				APP_temporaryStop();
 cb8:	0e 94 9f 01 	call	0x33e	; 0x33e <APP_temporaryStop>
 cbc:	e5 cf       	rjmp	.-54     	; 0xc88 <main+0x4>

00000cbe <_exit>:
 cbe:	f8 94       	cli

00000cc0 <__stop_program>:
 cc0:	ff cf       	rjmp	.-2      	; 0xcc0 <__stop_program>
